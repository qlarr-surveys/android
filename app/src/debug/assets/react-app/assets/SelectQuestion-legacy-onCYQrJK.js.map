{"version":3,"file":"SelectQuestion-legacy-onCYQrJK.js","sources":["../../node_modules/react-hook-form/dist/index.esm.mjs","../../src/components/hook-form/rhf-select.jsx","../../src/components/hook-form/rhf-checkbox.jsx","../../src/components/hook-form/form-provider.jsx","../../node_modules/mui-one-time-password-input/dist/mui-one-time-password-input.es.js","../../src/components/hook-form/rhf-code.jsx","../../src/components/hook-form/rhf-slider.jsx","../../src/components/hook-form/rhf-switch.jsx","../../src/components/hook-form/rhf-text-field.jsx","../../src/components/hook-form/rhf-radio-group.jsx","../../src/components/hook-form/rhf-autocomplete.jsx","../../src/components/Questions/SelectQuestion/SelectQuestion.jsx"],"sourcesContent":["import * as React from 'react';\nimport React__default from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar isUndefined = (val) => val === undefined;\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = (isKey(path) ? [path] : stringToPath(path)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React__default.createContext(null);\nHookFormContext.displayName = 'HookFormContext';\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React__default.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React__default.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React__default.useState(control._formState);\n    const _localProxyFormState = React__default.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    useIsomorphicLayoutEffect(() => control._subscribe({\n        name,\n        formState: _localProxyFormState.current,\n        exact,\n        callback: (formState) => {\n            !disabled &&\n                updateFormState({\n                    ...control._formState,\n                    ...formState,\n                });\n        },\n    }), [name, disabled, exact]);\n    React__default.useEffect(() => {\n        _localProxyFormState.current.isValid && control._setValid(true);\n    }, [control]);\n    return React__default.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\n            get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _defaultValue = React__default.useRef(defaultValue);\n    const [value, updateValue] = React__default.useState(control._getWatch(name, _defaultValue.current));\n    useIsomorphicLayoutEffect(() => control._subscribe({\n        name,\n        formState: {\n            values: true,\n        },\n        exact,\n        callback: (formState) => !disabled &&\n            updateValue(generateWatchOutput(name, control._names, formState.values || control._formValues, false, _defaultValue.current)),\n    }), [name, control, disabled, exact]);\n    React__default.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _props = React__default.useRef(props);\n    const _registerProps = React__default.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    const fieldState = React__default.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const onChange = React__default.useCallback((event) => _registerProps.current.onChange({\n        target: {\n            value: getEventValue(event),\n            name: name,\n        },\n        type: EVENTS.CHANGE,\n    }), [name]);\n    const onBlur = React__default.useCallback(() => _registerProps.current.onBlur({\n        target: {\n            value: get(control._formValues, name),\n            name: name,\n        },\n        type: EVENTS.BLUR,\n    }), [name, control._formValues]);\n    const ref = React__default.useCallback((elm) => {\n        const field = get(control._fields, name);\n        if (field && elm) {\n            field._f.ref = {\n                focus: () => elm.focus && elm.focus(),\n                select: () => elm.select && elm.select(),\n                setCustomValidity: (message) => elm.setCustomValidity(message),\n                reportValidity: () => elm.reportValidity(),\n            };\n        }\n    }, [control._fields, name]);\n    const field = React__default.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange,\n        onBlur,\n        ref,\n    }), [name, disabled, formState.disabled, onChange, onBlur, ref, value]);\n    React__default.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        control.register(name, {\n            ..._props.current.rules,\n            ...(isBoolean(_props.current.disabled)\n                ? { disabled: _props.current.disabled }\n                : {}),\n        });\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React__default.useEffect(() => {\n        control._setDisabledField({\n            disabled,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React__default.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React__default.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React__default.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React__default.createElement(React__default.Fragment, null, render({\n        submit,\n    }))) : (React__default.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2, _internal_visited = new WeakSet()) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    if (_internal_visited.has(object1) || _internal_visited.has(object2)) {\n        return true;\n    }\n    _internal_visited.add(object1);\n    _internal_visited.add(object2);\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2, _internal_visited)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        if (foundError && foundError.root && foundError.root.type) {\n            return {\n                name: `${fieldName}.root`,\n                error: foundError.root,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isMessage = (value) => isString(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isReady: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    let _proxySubscribeFormState = {\n        ..._proxyFormState,\n    };\n    const _subjects = {\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _setValid = async (shouldUpdateValid) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValid ||\n                _proxySubscribeFormState.isValid ||\n                shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _runSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating ||\n                _proxyFormState.validatingFields ||\n                _proxySubscribeFormState.isValidating ||\n                _proxySubscribeFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _setFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if ((_proxyFormState.touchedFields ||\n                _proxySubscribeFormState.touchedFields) &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _setValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!get(_formState.dirtyFields, name);\n                isCurrentFieldPristine\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        ((_proxyFormState.dirtyFields ||\n                            _proxySubscribeFormState.dirtyFields) &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            ((_proxyFormState.touchedFields ||\n                                _proxySubscribeFormState.touchedFields) &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _runSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _runSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.forEach((checkboxRef) => {\n                            if (!checkboxRef.defaultChecked || !checkboxRef.disabled) {\n                                if (Array.isArray(fieldValue)) {\n                                    checkboxRef.checked = !!fieldValue.find((data) => data === checkboxRef.value);\n                                }\n                                else {\n                                    checkboxRef.checked =\n                                        fieldValue === checkboxRef.value || !!fieldValue;\n                                }\n                            }\n                        });\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.state.next({\n                            name,\n                            values: cloneObject(_formValues),\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            if (!value.hasOwnProperty(fieldKey)) {\n                return;\n            }\n            const fieldValue = value[fieldKey];\n            const fieldName = name + '.' + fieldKey;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: cloneObject(_formValues),\n            });\n            if ((_proxyFormState.isDirty ||\n                _proxyFormState.dirtyFields ||\n                _proxySubscribeFormState.isDirty ||\n                _proxySubscribeFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.state.next({\n            name: _state.mount ? name : undefined,\n            values: cloneObject(_formValues),\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        const validationModeBeforeSubmit = getValidationModes(_options.mode);\n        const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = target.type\n                ? getFieldValue(field._f)\n                : getEventValue(event);\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.state.next({\n                    name,\n                    type: event.type,\n                    values: cloneObject(_formValues),\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {\n                    if (_options.mode === 'onBlur') {\n                        if (isBlurEvent) {\n                            _setValid();\n                        }\n                    }\n                    else if (!isBlurEvent) {\n                        _setValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _runSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid ||\n                        _proxySubscribeFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _setValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                ((_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n                    isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.state.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const _subscribe = (props) => _subjects.state.subscribe({\n        next: (formState) => {\n            if (shouldSubscribeByName(props.name, formState.name, props.exact) &&\n                shouldRenderFormState(formState, props.formState || _proxyFormState, _setFormState, props.reRenderRoot)) {\n                props.callback({\n                    values: { ..._formValues },\n                    ..._formState,\n                    ...formState,\n                });\n            }\n        },\n    }).unsubscribe;\n    const subscribe = (props) => {\n        _state.mount = true;\n        _proxySubscribeFormState = {\n            ..._proxySubscribeFormState,\n            ...props.formState,\n        };\n        return _subscribe({\n            ...props,\n            formState: _proxySubscribeFormState,\n        });\n    };\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.state.next({\n            values: cloneObject(_formValues),\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _setValid();\n    };\n    const _setDisabledField = ({ disabled, name, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _setDisabledField({\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist &&\n                e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _runSchema();\n            _formState.errors = errors;\n            fieldValues = cloneObject(values);\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                unset(fieldValues, name);\n            }\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _setValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (keepStateOptions.keepFieldsRef) {\n                    for (const fieldName of _names.mount) {\n                        setValue(fieldName, get(values, fieldName));\n                    }\n                }\n                else {\n                    _fields = {};\n                }\n            }\n            _formValues = _options.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.state.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _setFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    const methods = {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _subscribe,\n            _runSchema,\n            _focusError,\n            _getWatch,\n            _getDirty,\n            _setValid,\n            _setFieldArray,\n            _setDisabledField,\n            _setErrors,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _removeUnmounted,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        subscribe,\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n    return {\n        ...methods,\n        formControl: methods,\n    };\n}\n\nvar generateId = () => {\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n        return crypto.randomUUID();\n    }\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React__default.useState(control._getFieldArray(name));\n    const ids = React__default.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React__default.useRef(fields);\n    const _name = React__default.useRef(name);\n    const _actioned = React__default.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    rules &&\n        control.register(name, rules);\n    useIsomorphicLayoutEffect(() => control._subjects.array.subscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n    }).unsubscribe, [control]);\n    const updateValues = React__default.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._setFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._setFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React__default.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted) &&\n            !getValidationModes(control._options.reValidateMode).isOnSubmit) {\n            if (control._options.resolver) {\n                control._runSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.state.next({\n            name,\n            values: cloneObject(control._formValues),\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._setValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React__default.useEffect(() => {\n        !get(control._formValues, name) && control._setFieldArray(name);\n        return () => {\n            const updateMounted = (name, value) => {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    field._f.mount = value;\n                }\n            };\n            control._options.shouldUnregister || shouldUnregister\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React__default.useCallback(swap, [updateValues, name, control]),\n        move: React__default.useCallback(move, [updateValues, name, control]),\n        prepend: React__default.useCallback(prepend, [updateValues, name, control]),\n        append: React__default.useCallback(append, [updateValues, name, control]),\n        remove: React__default.useCallback(remove, [updateValues, name, control]),\n        insert: React__default.useCallback(insert$1, [updateValues, name, control]),\n        update: React__default.useCallback(update, [updateValues, name, control]),\n        replace: React__default.useCallback(replace, [updateValues, name, control]),\n        fields: React__default.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React__default.useRef(undefined);\n    const _values = React__default.useRef(undefined);\n    const [formState, updateFormState] = React__default.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        isReady: false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        if (props.formControl) {\n            _formControl.current = {\n                ...props.formControl,\n                formState,\n            };\n            if (props.defaultValues && !isFunction(props.defaultValues)) {\n                props.formControl.reset(props.defaultValues, props.resetOptions);\n            }\n        }\n        else {\n            const { formControl, ...rest } = createFormControl(props);\n            _formControl.current = {\n                ...rest,\n                formState,\n            };\n        }\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useIsomorphicLayoutEffect(() => {\n        const sub = control._subscribe({\n            formState: control._proxyFormState,\n            callback: () => updateFormState({ ...control._formState }),\n            reRenderRoot: true,\n        });\n        updateFormState((data) => ({\n            ...data,\n            isReady: true,\n        }));\n        control._formState.isReady = true;\n        return sub;\n    }, [control]);\n    React__default.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React__default.useEffect(() => {\n        if (props.mode) {\n            control._options.mode = props.mode;\n        }\n        if (props.reValidateMode) {\n            control._options.reValidateMode = props.reValidateMode;\n        }\n    }, [control, props.mode, props.reValidateMode]);\n    React__default.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n            control._focusError();\n        }\n    }, [control, props.errors]);\n    React__default.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.state.next({\n                values: control._getWatch(),\n            });\n    }, [control, props.shouldUnregister]);\n    React__default.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React__default.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, {\n                keepFieldsRef: true,\n                ...control._options.resetOptions,\n            });\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [control, props.values]);\n    React__default.useEffect(() => {\n        if (!control._state.mount) {\n            control._setValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, createFormControl, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import PropTypes from \"prop-types\";\nimport { Controller, useFormContext } from \"react-hook-form\";\n\nimport Box from \"@mui/material/Box\";\nimport Chip from \"@mui/material/Chip\";\nimport Select from \"@mui/material/Select\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormHelperText from \"@mui/material/FormHelperText\";\nimport React from \"react\";\n\n// ----------------------------------------------------------------------\n\nexport function RHFSelect({\n  name,\n  native,\n  maxHeight = 220,\n  helperText,\n  children,\n  PaperPropsSx,\n  label,\n  onChange,\n  value,\n  ...other\n}) {\n  const context = useFormContext();\n  if (!context) {\n    return (\n      <FormControl fullWidth {...other}>\n        <InputLabel>{label}</InputLabel>\n        <Select\n          value={value ?? \"\"}\n          sx={{\n            borderRadius: \"12px\",\n            \"& .MuiOutlinedInput-notchedOutline\": {\n              border: \"1px solid #d7d7d7\",\n            },\n            \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n              border: \"1px solid #181735\",\n            },\n            \"&:hover .MuiOutlinedInput-notchedOutline\": {\n              borderColor: \"#181735\",\n            },\n            \"& .MuiOutlinedInput-input\": {\n              padding: \".5rem\",\n            },\n          }}\n          onChange={onChange}\n          label={label}\n        >\n          {React.Children.map(children, (child, index) => (\n            <MenuItem key={index} value={child.props.value}>\n              {child.props.children}\n            </MenuItem>\n          ))}\n        </Select>\n        <FormHelperText>{helperText}</FormHelperText>\n      </FormControl>\n    );\n  }\n\n  const { control } = context;\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState: { error } }) => (\n        <FormControl fullWidth {...field}>\n          <InputLabel>{label}</InputLabel>\n          <Select\n            {...field}\n            sx={{\n              borderRadius: \"12px\",\n              \"& .MuiOutlinedInput-notchedOutline\": {\n                border: \"1px solid #d7d7d7\",\n              },\n              \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n                border: \"1px solid #181735\",\n              },\n              \"&:hover .MuiOutlinedInput-notchedOutline\": {\n                borderColor: \"#181735\",\n              },\n              \"& .MuiOutlinedInput-input\": {\n                padding: \".5rem\",\n              },\n            }}\n            error={!!error}\n            label={label}\n            {...other}\n          >\n            {React.Children.map(children, (child, index) => (\n              <MenuItem key={index} value={child.props.value}>\n                {child.props.children}\n              </MenuItem>\n            ))}\n          </Select>\n          <FormHelperText>{helperText}</FormHelperText>\n        </FormControl>\n      )}\n    />\n  );\n}\n\nRHFSelect.propTypes = {\n  PaperPropsSx: PropTypes.object,\n  children: PropTypes.node,\n  helperText: PropTypes.object,\n  maxHeight: PropTypes.number,\n  name: PropTypes.string,\n  native: PropTypes.bool,\n};\n\n// ----------------------------------------------------------------------\n\nexport function RHFMultiSelect({\n  name,\n  chip,\n  label,\n  options,\n  checkbox,\n  placeholder,\n  helperText,\n  isOptionDisabled,\n  ...other\n}) {\n  const { control } = useFormContext();\n\n  const renderValues = (selectedIds) => {\n    const selectedItems = options.filter((item) =>\n      selectedIds.includes(item.value)\n    );\n\n    if (!selectedItems.length && placeholder) {\n      return <Box sx={{ color: \"text.disabled\" }}>{placeholder}</Box>;\n    }\n\n    if (chip) {\n      return (\n        <Box sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 0.5 }}>\n          {selectedItems.map((item) => (\n            <Chip key={item.value} size=\"small\" label={item.label} />\n          ))}\n        </Box>\n      );\n    }\n\n    return selectedItems.map((item) => item.label).join(\", \");\n  };\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState: { error } }) => (\n        <FormControl error={!!error} {...other}>\n          {label && <InputLabel id={name}> {label} </InputLabel>}\n\n          <Select\n            {...field}\n            multiple\n            displayEmpty={!!placeholder}\n            id={`multiple-${name}`}\n            labelId={name}\n            label={label}\n            renderValue={renderValues}\n          >\n            {options.map((option) => {\n              const selected = field.value.includes(option.value);\n\n              return (\n                <MenuItem\n                  key={option.value}\n                  disabled={\n                    isOptionDisabled\n                      ? isOptionDisabled(option.value, field.value)\n                      : false\n                  }\n                  value={option.value}\n                >\n                  {checkbox && (\n                    <Checkbox size=\"small\" disableRipple checked={selected} />\n                  )}\n                  {option.label}\n                </MenuItem>\n              );\n            })}\n          </Select>\n\n          {(!!error || helperText) && (\n            <FormHelperText error={!!error}>\n              {error ? error?.message : helperText}\n            </FormHelperText>\n          )}\n        </FormControl>\n      )}\n    />\n  );\n}\n\nRHFMultiSelect.propTypes = {\n  checkbox: PropTypes.bool,\n  chip: PropTypes.bool,\n  helperText: PropTypes.object,\n  label: PropTypes.string,\n  name: PropTypes.string,\n  options: PropTypes.array,\n  placeholder: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport Checkbox from '@mui/material/Checkbox';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControlLabel, { formControlLabelClasses } from '@mui/material/FormControlLabel';\n\n// ----------------------------------------------------------------------\n\nexport function RHFCheckbox({ name, helperText, ...other }) {\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState: { error } }) => (\n        <div>\n          <FormControlLabel control={<Checkbox {...field} checked={field.value} />} {...other} />\n\n          {(!!error || helperText) && (\n            <FormHelperText error={!!error}>{error ? error?.message : helperText}</FormHelperText>\n          )}\n        </div>\n      )}\n    />\n  );\n}\n\nRHFCheckbox.propTypes = {\n  helperText: PropTypes.string,\n  name: PropTypes.string,\n};\n\n// ----------------------------------------------------------------------\n\nexport function RHFMultiCheckbox({ row, name, label, options, spacing, helperText, sx, ...other }) {\n  const { control } = useFormContext();\n\n  const getSelected = (selectedItems, item) =>\n    selectedItems.includes(item)\n      ? selectedItems.filter((value) => value !== item)\n      : [...selectedItems, item];\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState: { error } }) => (\n        <FormControl component=\"fieldset\">\n          {label && (\n            <FormLabel component=\"legend\" sx={{ typography: 'body2' }}>\n              {label}\n            </FormLabel>\n          )}\n\n          <FormGroup\n            sx={{\n              ...(row && {\n                flexDirection: 'row',\n              }),\n              [`& .${formControlLabelClasses.root}`]: {\n                '&:not(:last-of-type)': {\n                  mb: spacing || 0,\n                },\n                ...(row && {\n                  mr: 0,\n                  '&:not(:last-of-type)': {\n                    mr: spacing || 2,\n                  },\n                }),\n              },\n              ...sx,\n            }}\n          >\n            {options.map((option) => (\n              <FormControlLabel\n                key={option.value}\n                control={\n                  <Checkbox\n                    checked={field.value.includes(option.value)}\n                    onChange={() => field.onChange(getSelected(field.value, option.value))}\n                  />\n                }\n                label={option.label}\n                {...other}\n              />\n            ))}\n          </FormGroup>\n\n          {(!!error || helperText) && (\n            <FormHelperText error={!!error} sx={{ mx: 0 }}>\n              {error ? error?.message : helperText}\n            </FormHelperText>\n          )}\n        </FormControl>\n      )}\n    />\n  );\n}\n\nRHFMultiCheckbox.propTypes = {\n  helperText: PropTypes.string,\n  label: PropTypes.string,\n  name: PropTypes.string,\n  options: PropTypes.array,\n  row: PropTypes.bool,\n  spacing: PropTypes.number,\n  sx: PropTypes.object,\n};\n","import PropTypes from 'prop-types';\nimport { FormProvider as Form } from 'react-hook-form';\n\n// ----------------------------------------------------------------------\n\nexport default function FormProvider({ children, onSubmit, methods }) {\n  return (\n    <Form {...methods}>\n      <form onSubmit={onSubmit}>{children}</form>\n    </Form>\n  );\n}\n\nFormProvider.propTypes = {\n  children: PropTypes.node,\n  methods: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n","import { jsx as E } from \"react/jsx-runtime\";\nimport g from \"react\";\nimport { styled as W } from \"@mui/material/styles\";\nimport q from \"@mui/material/TextField\";\nimport z from \"@mui/material/Box\";\nconst G = W(q)`\n  input {\n    text-align: center;\n  }\n`, J = {\n  TextFieldStyled: G\n}, Q = (n) => /* @__PURE__ */ E(J.TextFieldStyled, { ...n }), B = {\n  left: \"ArrowLeft\",\n  right: \"ArrowRight\",\n  backspace: \"Backspace\",\n  home: \"Home\",\n  end: \"End\"\n};\nfunction U(n, l) {\n  return n <= 0 ? [] : Array.from({ length: n }, l);\n}\nfunction X(n, l, f) {\n  return n.map((u, x) => l === x ? f : u);\n}\nfunction P(n) {\n  return n.join(\"\");\n}\nfunction M(n, l) {\n  return [...n, l];\n}\nfunction Z(n, l, f) {\n  return n.reduce(\n    (u, x, C) => {\n      const { characters: y, restArrayMerged: d } = u;\n      if (C < f)\n        return {\n          restArrayMerged: d,\n          characters: M(y, x)\n        };\n      const [D, ...V] = d;\n      return {\n        restArrayMerged: V,\n        characters: M(y, D || \"\")\n      };\n    },\n    {\n      restArrayMerged: l,\n      characters: []\n    }\n  ).characters;\n}\nfunction v(n) {\n  return n.split(\"\");\n}\nfunction N(n) {\n  const l = g.useRef(() => {\n    throw new Error(\"Cannot call an event handler while rendering.\");\n  });\n  return g.useInsertionEffect(() => {\n    l.current = n;\n  }), g.useCallback((...f) => l.current?.(...f), []);\n}\nconst ee = () => !0, oe = g.forwardRef(\n  (n, l) => {\n    const {\n      value: f = \"\",\n      length: u = 4,\n      autoFocus: x = !1,\n      onChange: C,\n      TextFieldsProps: y,\n      onComplete: d,\n      validateChar: D = ee,\n      className: V,\n      onBlur: b,\n      ...K\n    } = n, j = g.useRef(f), k = N(d), I = N((e) => {\n      const t = e.slice(0, u);\n      return {\n        isCompleted: t.length === u,\n        finalValue: t\n      };\n    });\n    g.useEffect(() => {\n      const { isCompleted: e, finalValue: t } = I(\n        j.current\n      );\n      e && k(t);\n    }, [u, k, I]);\n    const p = U(\n      u,\n      (e, t) => ({\n        character: f[t] || \"\",\n        inputRef: g.createRef()\n      })\n    ), A = (e) => p.findIndex(({ inputRef: t }) => t.current === e), T = () => p.map(({ character: e }) => e), O = (e, t) => {\n      const a = X(\n        T(),\n        e,\n        t\n      );\n      return P(a);\n    }, $ = (e) => {\n      p[e]?.inputRef.current?.focus();\n    }, c = (e) => {\n      p[e]?.inputRef.current?.select();\n    }, R = (e) => {\n      e + 1 !== u && (p[e + 1].character ? c(e + 1) : $(e + 1));\n    }, S = (e, t) => typeof D != \"function\" ? !0 : D(e, t), Y = (e) => {\n      const t = A(e.target);\n      if (t === 0 && e.target.value.length > 1) {\n        const { finalValue: m, isCompleted: F } = I(\n          e.target.value\n        );\n        C?.(m), F && d?.(m), c(m.length - 1);\n        return;\n      }\n      const a = e.target.value[0] || \"\";\n      let o = a;\n      o && !S(o, t) && (o = \"\");\n      const s = O(t, o);\n      C?.(s);\n      const { isCompleted: h, finalValue: i } = I(s);\n      h && d?.(i), o !== \"\" ? s.length - 1 < t ? c(s.length) : R(t) : a === \"\" && s.length <= t && c(t - 1);\n    }, _ = (e) => {\n      const t = e.target, a = t.selectionStart, o = t.selectionEnd, s = A(t), h = a === 0 && o === 0;\n      if (t.value === e.key)\n        e.preventDefault(), R(s);\n      else if (B.backspace === e.key) {\n        if (!t.value)\n          e.preventDefault(), c(s - 1);\n        else if (h) {\n          e.preventDefault();\n          const i = O(s, \"\");\n          C?.(i), i.length <= s && c(s - 1);\n        }\n      } else B.left === e.key ? (e.preventDefault(), c(s - 1)) : B.right === e.key ? (e.preventDefault(), c(s + 1)) : B.home === e.key ? (e.preventDefault(), c(0)) : B.end === e.key && (e.preventDefault(), c(p.length - 1));\n    }, H = (e) => {\n      const t = e.clipboardData.getData(\"text/plain\"), a = e.target, o = p.findIndex(\n        ({ character: r, inputRef: w }) => r === \"\" || w.current === a\n      ), s = T(), h = Z(\n        s,\n        v(t),\n        o\n      ).map((r, w) => S(r, w) ? r : \"\"), i = P(h);\n      C?.(i);\n      const { isCompleted: m, finalValue: F } = I(i);\n      m ? (d?.(F), c(u - 1)) : c(i.length);\n    }, L = (e) => {\n      if (!p.some(({ inputRef: a }) => a.current === e.relatedTarget)) {\n        const { isCompleted: a, finalValue: o } = I(f);\n        b?.(o, a);\n      }\n    };\n    return /* @__PURE__ */ E(\n      z,\n      {\n        display: \"flex\",\n        gap: \"20px\",\n        alignItems: \"center\",\n        ref: l,\n        className: `MuiOtpInput-Box ${V || \"\"}`,\n        ...K,\n        children: p.map(({ character: e, inputRef: t }, a) => {\n          const {\n            onPaste: o,\n            onFocus: s,\n            onKeyDown: h,\n            className: i,\n            onBlur: m,\n            ...F\n          } = typeof y == \"function\" ? y(a) || {} : y || {};\n          return /* @__PURE__ */ E(\n            Q,\n            {\n              autoFocus: x ? a === 0 : !1,\n              autoComplete: \"one-time-code\",\n              value: e,\n              inputRef: t,\n              className: `MuiOtpInput-TextField MuiOtpInput-TextField-${a + 1} ${i || \"\"}`,\n              onPaste: (r) => {\n                r.preventDefault(), H(r), o?.(r);\n              },\n              onFocus: (r) => {\n                r.preventDefault(), r.target.select(), s?.(r);\n              },\n              onChange: Y,\n              onKeyDown: (r) => {\n                _(r), h?.(r);\n              },\n              onBlur: (r) => {\n                m?.(r), L(r);\n              },\n              ...F\n            },\n            a\n          );\n        })\n      }\n    );\n  }\n);\nexport {\n  oe as MuiOtpInput\n};\n","import PropTypes from 'prop-types';\nimport { MuiOtpInput } from 'mui-one-time-password-input';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport FormHelperText from '@mui/material/FormHelperText';\n\n// ----------------------------------------------------------------------\n\nexport default function RHFCode({ name, ...other }) {\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState: { error } }) => (\n        <div>\n          <MuiOtpInput\n            {...field}\n            autoFocus\n            gap={1.5}\n            length={6}\n            TextFieldsProps={{\n              error: !!error,\n              placeholder: '-',\n            }}\n            {...other}\n          />\n\n          {error && (\n            <FormHelperText sx={{ px: 2 }} error>\n              {error.message}\n            </FormHelperText>\n          )}\n        </div>\n      )}\n    />\n  );\n}\n\nRHFCode.propTypes = {\n  name: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport Slider from '@mui/material/Slider';\nimport FormHelperText from '@mui/material/FormHelperText';\n\n// ----------------------------------------------------------------------\n\nexport default function RHFSlider({ name, helperText, ...other }) {\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState: { error } }) => (\n        <>\n          <Slider {...field} valueLabelDisplay=\"auto\" {...other} />\n\n          {(!!error || helperText) && (\n            <FormHelperText error={!!error}>{error ? error?.message : helperText}</FormHelperText>\n          )}\n        </>\n      )}\n    />\n  );\n}\n\nRHFSlider.propTypes = {\n  helperText: PropTypes.string,\n  name: PropTypes.string,\n};\n","import PropTypes from \"prop-types\";\nimport { Controller, useFormContext } from \"react-hook-form\";\n\nimport Switch from \"@mui/material/Switch\";\nimport FormHelperText from \"@mui/material/FormHelperText\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\n\n// ----------------------------------------------------------------------\n\nexport default function RHFSwitch({ name, helperText, ...other }) {\n  const context = useFormContext();\n\n  if (!context) {\n    return (\n      <FormControlLabel\n        control={<Switch {...other} name={name} checked={other.checked} />}\n        {...other}\n      />\n    );\n  }\n\n  // const { control } = useFormContext();\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState: { error } }) => (\n        <div>\n          <FormControlLabel\n            control={<Switch {...field} checked={field.value} />}\n            {...other}\n          />\n\n          {(!!error || helperText) && (\n            <FormHelperText error={!!error}>\n              {error ? error?.message : helperText}\n            </FormHelperText>\n          )}\n        </div>\n      )}\n    />\n  );\n}\n\nRHFSwitch.propTypes = {\n  helperText: PropTypes.string,\n  name: PropTypes.string,\n};\n","import PropTypes from \"prop-types\";\nimport { Controller, useFormContext } from \"react-hook-form\";\n\nimport TextField from \"@mui/material/TextField\";\n\n// ----------------------------------------------------------------------\n\nexport default function RHFTextField({ name, helperText, type, ...other }) {\n  const context = useFormContext();\n  if (!context) {\n    return (\n      <TextField fullWidth type={type} helperText={helperText} {...other} />\n    );\n  }\n\n  const { control } = context;\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState: { error } }) => (\n        <TextField\n          {...field}\n          fullWidth\n          type={type}\n          value={type === \"number\" && field.value === 0 ? \"\" : field.value}\n          onChange={(event) => {\n            if (type === \"number\") {\n              field.onChange(Number(event.target.value));\n            } else {\n              field.onChange(event.target.value);\n            }\n          }}\n          error={!!error}\n          helperText={error ? error?.message : helperText}\n          {...other}\n        />\n      )}\n    />\n  );\n}\n\nRHFTextField.propTypes = {\n  helperText: PropTypes.string,\n  name: PropTypes.string,\n  type: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport Radio from '@mui/material/Radio';\nimport FormLabel from '@mui/material/FormLabel';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControl from '@mui/material/FormControl';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// ----------------------------------------------------------------------\n\nexport default function RHFRadioGroup({\n  row,\n  name,\n  label,\n  options,\n  spacing,\n  helperText,\n  ...other\n}) {\n  const { control } = useFormContext();\n\n  const labelledby = label ? `${name}-${label}` : '';\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState: { error } }) => (\n        <FormControl component=\"fieldset\">\n          {label && (\n            <FormLabel component=\"legend\" id={labelledby} sx={{ typography: 'body2' }}>\n              {label}\n            </FormLabel>\n          )}\n\n          <RadioGroup {...field} aria-labelledby={labelledby} row={row} {...other}>\n            {options.map((option) => (\n              <FormControlLabel\n                key={option.value}\n                value={option.value}\n                control={<Radio />}\n                label={option.label}\n                sx={{\n                  '&:not(:last-of-type)': {\n                    mb: spacing || 0,\n                  },\n                  ...(row && {\n                    mr: 0,\n                    '&:not(:last-of-type)': {\n                      mr: spacing || 2,\n                    },\n                  }),\n                }}\n              />\n            ))}\n          </RadioGroup>\n\n          {(!!error || helperText) && (\n            <FormHelperText error={!!error} sx={{ mx: 0 }}>\n              {error ? error?.message : helperText}\n            </FormHelperText>\n          )}\n        </FormControl>\n      )}\n    />\n  );\n}\n\nRHFRadioGroup.propTypes = {\n  helperText: PropTypes.string,\n  label: PropTypes.string,\n  name: PropTypes.string,\n  options: PropTypes.array,\n  row: PropTypes.bool,\n  spacing: PropTypes.number,\n};\n","import PropTypes from \"prop-types\";\nimport { Controller, useFormContext } from \"react-hook-form\";\n\nimport Chip from \"@mui/material/Chip\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport { filledInputClasses } from \"@mui/material/FilledInput\";\n\n// import { countries } from 'src/assets/data';\n\n// import Iconify from \"src/components/iconify\";\n\n// ----------------------------------------------------------------------\n\nexport default function RHFAutocomplete({\n  name,\n  label,\n  type,\n  helperText,\n  hiddenLabel,\n  placeholder,\n  ...other\n}) {\n  const { control, setValue } = useFormContext();\n\n  const { multiple } = other;\n\n  return (\n    <div>s</div>\n    // <Controller\n    //   name={name}\n    //   control={control}\n    //   render={({ field, fieldState: { error } }) => {\n    //     if (type === \"country\") {\n    //       return (\n    //         <Autocomplete\n    //           {...field}\n    //           id={`autocomplete-${name}`}\n    //           autoHighlight={!multiple}\n    //           disableCloseOnSelect={multiple}\n    //           onChange={(event, newValue) =>\n    //             setValue(name, newValue, { shouldValidate: true })\n    //           }\n    //           renderOption={(props, option) => {\n    //             const country = getCountry(option);\n\n    //             if (!country.label) {\n    //               return null;\n    //             }\n\n    //             return (\n    //               <li {...props} key={country.label}>\n    //                 <Iconify\n    //                   key={country.label}\n    //                   icon={`circle-flags:${country.code?.toLowerCase()}`}\n    //                   sx={{ mr: 1 }}\n    //                 />\n    //                 {country.label} ({country.code}) +{country.phone}\n    //               </li>\n    //             );\n    //           }}\n    //           renderInput={(params) => {\n    //             const country = getCountry(params.inputProps.value);\n\n    //             const baseField = {\n    //               ...params,\n    //               label,\n    //               hiddenLabel,\n    //               placeholder,\n    //               error: !!error,\n    //               helperText: error ? error?.message : helperText,\n    //               inputProps: {\n    //                 ...params.inputProps,\n    //                 autoComplete: \"new-password\",\n    //               },\n    //             };\n\n    //             if (multiple) {\n    //               return <TextField {...baseField} />;\n    //             }\n\n    //             return (\n    //               <TextField\n    //                 {...baseField}\n    //                 InputProps={{\n    //                   ...params.InputProps,\n    //                   startAdornment: (\n    //                     <InputAdornment\n    //                       position=\"start\"\n    //                       sx={{\n    //                         ...(!country.code && {\n    //                           display: \"none\",\n    //                         }),\n    //                       }}\n    //                     >\n    //                       <Iconify\n    //                         icon={`circle-flags:${country.code?.toLowerCase()}`}\n    //                         sx={{ mr: -0.5, ml: 0.5 }}\n    //                       />\n    //                     </InputAdornment>\n    //                   ),\n    //                 }}\n    //                 sx={{\n    //                   ...(!hiddenLabel && {\n    //                     [`& .${filledInputClasses.root}`]: {\n    //                       \"& .component-iconify\": {\n    //                         mt: -2,\n    //                       },\n    //                     },\n    //                   }),\n    //                 }}\n    //               />\n    //             );\n    //           }}\n    //           renderTags={(selected, getTagProps) =>\n    //             selected.map((option, index) => {\n    //               const country = getCountry(option);\n\n    //               return (\n    //                 <Chip\n    //                   {...getTagProps({ index })}\n    //                   key={country.label}\n    //                   label={country.label}\n    //                   icon={\n    //                     <Iconify\n    //                       icon={`circle-flags:${country.code?.toLowerCase()}`}\n    //                     />\n    //                   }\n    //                   size=\"small\"\n    //                   variant=\"soft\"\n    //                 />\n    //               );\n    //             })\n    //           }\n    //           {...other}\n    //         />\n    //       );\n    //     }\n\n    //     return (\n    //       <Autocomplete\n    //         {...field}\n    //         id={`autocomplete-${name}`}\n    //         onChange={(event, newValue) =>\n    //           setValue(name, newValue, { shouldValidate: true })\n    //         }\n    //         renderInput={(params) => (\n    //           <TextField\n    //             {...params}\n    //             label={label}\n    //             placeholder={placeholder}\n    //             error={!!error}\n    //             helperText={error ? error?.message : helperText}\n    //             inputProps={{\n    //               ...params.inputProps,\n    //               autoComplete: \"new-password\",\n    //             }}\n    //           />\n    //         )}\n    //         {...other}\n    //       />\n    //     );\n    //   }}\n    // />\n  );\n}\n\nRHFAutocomplete.propTypes = {\n  name: PropTypes.string,\n  type: PropTypes.string,\n  label: PropTypes.string,\n  helperText: PropTypes.node,\n  hiddenLabel: PropTypes.bool,\n  placeholder: PropTypes.string,\n};\n\n// ----------------------------------------------------------------------\n\nexport function getCountry(inputValue) {\n  const option = countries.filter((country) => country.label === inputValue)[0];\n\n  return {\n    ...option,\n  };\n}\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { RHFSelect } from \"~/components/hook-form\";\nimport { valueChange } from \"~/state/runState\";\nimport { shallowEqual } from \"react-redux\";\nimport { useTheme } from \"@emotion/react\";\nimport Content from \"~/components/run/Content\";\n\nfunction SelectQuestion({ lang, component }) {\n  const theme = useTheme();\n  const state = useSelector((state) => {\n    let questionState = state.runState.values[component.qualifiedCode];\n    return {\n      value: questionState?.value || \"\",\n    };\n  }, shallowEqual);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: component.qualifiedCode,\n        value: event.target.value,\n      })\n    );\n  };\n\n  const visibleAnswers = useSelector(\n    (state) =>\n      component.answers.filter((ans) => {\n        return state.runState.values[ans.qualifiedCode]?.relevance ?? true;\n      }),\n    shallowEqual\n  );\n\n  return (\n    <>\n      <RHFSelect\n        sx={{ width: \"50%\" }}\n        name={component.qualifiedCode}\n        value={state.value}\n        onChange={handleChange}\n      >\n        {visibleAnswers.map((option) => {\n          return (\n            <option key={option.code} value={option.code}>\n              <Content\n                elementCode={option.code}\n                fontFamily={theme.textStyles.text.font}\n                color={theme.textStyles.text.color}\n                fontSize={theme.textStyles.text.size}\n                name=\"label\"\n                lang={lang}\n                content={option.content?.label}\n              />\n            </option>\n          );\n        })}\n      </RHFSelect>\n    </>\n  );\n}\n\nexport default SelectQuestion;\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","has","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","isFileListInstance","FileList","Blob","key","isKey","test","isUndefined","val","undefined","compact","filter","Boolean","stringToPath","input","replace","split","get","object","path","defaultValue","result","reduce","isBoolean","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","CHANGE","VALIDATION_MODE","all","HookFormContext","React__default","createContext","displayName","useFormContext","useContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","useIsomorphicLayoutEffect","React.useLayoutEffect","React.useEffect","useFormState","props","methods","_ref","_ref$control","disabled","exact","_React$useState","useState","_formState","_React$useState2","_slicedToArray","updateFormState","_localProxyFormState","useRef","isDirty","isLoading","dirtyFields","touchedFields","validatingFields","isValidating","isValid","errors","_subscribe","current","callback","_objectSpread","useEffect","_setValid","useMemo","isString","generateWatchOutput","_names","formValues","isGlobal","map","fieldName","useWatch","_ref2","_ref2$control","_defaultValue","_React$useState3","_getWatch","_React$useState4","updateValue","values","_formValues","_removeUnmounted","useController","_props$control","shouldUnregister","isArrayField","array","_props","_registerProps","register","rules","fieldState","defineProperties","invalid","enumerable","isTouched","error","onChange","useCallback","onBlur","ref","elm","field","_fields","_f","focus","select","setCustomValidity","message","reportValidity","_shouldUnregisterField","_options","updateMounted","mount","_state","action","unregister","_setDisabledField","Controller","render","RHFSelect","_ref3","native","_ref3$maxHeight","maxHeight","helperText","children","PaperPropsSx","label","other","_objectWithoutProperties","_excluded","context","jsxs","FormControl","fullWidth","jsx","InputLabel","Select","sx","borderRadius","border","borderColor","padding","Children","child","MenuItem","FormHelperText","propTypes","PropTypes","node","number","string","bool","checkbox","chip","options","placeholder","row","spacing","onSubmit","func","G","W","q","J","TextFieldStyled","Q","n","E","B","left","right","backspace","home","end","U","l","from","X","f","u","x","P","join","M","Z","C","y","characters","d","restArrayMerged","_d","_toArray","D","V","slice","v","N","g","Error","useInsertionEffect","_l$current","call","ee","forwardRef","_n$value","_n$length","_n$autoFocus","autoFocus","TextFieldsProps","onComplete","_n$validateChar","validateChar","className","b","K","_excluded2","j","k","I","e","t","isCompleted","finalValue","_I","p","character","inputRef","createRef","A","findIndex","T","O","a","$","_p$e","c","_p$e2","R","S","Y","_I2","m","F","o","s","_I3","h","i","_","selectionStart","selectionEnd","preventDefault","H","clipboardData","getData","r","w","_I4","L","some","relatedTarget","_I5","z","display","gap","alignItems","_ref4","onPaste","onFocus","onKeyDown","_excluded3","autoComplete","hiddenLabel","SelectQuestion","lang","component","theme","useTheme","state","useSelector","questionState","runState","qualifiedCode","shallowEqual","dispatch","useDispatch","handleChange","valueChange","componentCode","visibleAnswers","answers","ans","_state2$runState$valu","_state2$runState$valu2","relevance","Fragment","width","option","_option$content","code","Content","elementCode","fontFamily","textStyles","text","font","color","fontSize","size","content"],"mappings":"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","x_google_ignoreList":[0,4]}