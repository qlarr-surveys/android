{"version":3,"file":"index-O6k4ewB-.js","sources":["../../node_modules/@mui/material/Badge/useBadge.js","../../node_modules/@mui/material/Badge/Badge.js","../../node_modules/@mui/icons-material/esm/Add.js","../../node_modules/@mui/icons-material/esm/CopyAll.js","../../node_modules/@mui/icons-material/esm/Description.js","../../node_modules/@mui/icons-material/esm/Stop.js","../../node_modules/@mui/icons-material/Article.js","../../src/utils/format-time.js","../../node_modules/@mui/icons-material/FormatQuote.js","../../node_modules/@mui/icons-material/Warning.js","../../src/components/manage/Survey/EditableSurveyTitle.jsx","../../src/components/manage/Survey/EditableSurveyDescription.jsx","../../src/components/manage/Survey/index.jsx","../../src/components/manage/HeaderContent/index.jsx","../../src/components/manage/ExampleSurveys/ExampleSurveys.jsx","../../src/components/manage/CreateSurvey/CreateSurvey.jsx","../../src/pages/manage/Dashboard/index.jsx"],"sourcesContent":["'use client';\n\nimport { usePreviousProps } from '@mui/utils';\n/**\n *\n * Demos:\n *\n * - [Badge](https://next.mui.com/base-ui/react-badge/#hook)\n *\n * API:\n *\n * - [useBadge API](https://next.mui.com/base-ui/react-badge/hooks-api/#use-badge)\n */\nfunction useBadge(parameters) {\n  const {\n    badgeContent: badgeContentProp,\n    invisible: invisibleProp = false,\n    max: maxProp = 99,\n    showZero = false\n  } = parameters;\n  const prevProps = usePreviousProps({\n    badgeContent: badgeContentProp,\n    max: maxProp\n  });\n  let invisible = invisibleProp;\n  if (invisibleProp === false && badgeContentProp === 0 && !showZero) {\n    invisible = true;\n  }\n  const {\n    badgeContent,\n    max = maxProp\n  } = invisible ? prevProps : parameters;\n  const displayValue = badgeContent && Number(badgeContent) > max ? `${max}+` : badgeContent;\n  return {\n    badgeContent,\n    invisible,\n    max,\n    displayValue\n  };\n}\nexport default useBadge;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"anchorOrigin\", \"className\", \"classes\", \"component\", \"components\", \"componentsProps\", \"children\", \"overlap\", \"color\", \"invisible\", \"max\", \"badgeContent\", \"slots\", \"slotProps\", \"showZero\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport usePreviousProps from '@mui/utils/usePreviousProps';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useSlotProps from '@mui/utils/useSlotProps';\nimport useBadge from './useBadge';\nimport { styled } from '../zero-styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport capitalize from '../utils/capitalize';\nimport badgeClasses, { getBadgeUtilityClass } from './badgeClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst RADIUS_STANDARD = 10;\nconst RADIUS_DOT = 4;\nconst useUtilityClasses = ownerState => {\n  const {\n    color,\n    anchorOrigin,\n    invisible,\n    overlap,\n    variant,\n    classes = {}\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', variant, invisible && 'invisible', `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`, `overlap${capitalize(overlap)}`, color !== 'default' && `color${capitalize(color)}`]\n  };\n  return composeClasses(slots, getBadgeUtilityClass, classes);\n};\nconst BadgeRoot = styled('span', {\n  name: 'MuiBadge',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  position: 'relative',\n  display: 'inline-flex',\n  // For correct alignment with the text.\n  verticalAlign: 'middle',\n  flexShrink: 0\n});\nconst BadgeBadge = styled('span', {\n  name: 'MuiBadge',\n  slot: 'Badge',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.badge, styles[ownerState.variant], styles[`anchorOrigin${capitalize(ownerState.anchorOrigin.vertical)}${capitalize(ownerState.anchorOrigin.horizontal)}${capitalize(ownerState.overlap)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.invisible && styles.invisible];\n  }\n})(({\n  theme\n}) => {\n  var _theme$vars;\n  return {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignContent: 'center',\n    alignItems: 'center',\n    position: 'absolute',\n    boxSizing: 'border-box',\n    fontFamily: theme.typography.fontFamily,\n    fontWeight: theme.typography.fontWeightMedium,\n    fontSize: theme.typography.pxToRem(12),\n    minWidth: RADIUS_STANDARD * 2,\n    lineHeight: 1,\n    padding: '0 6px',\n    height: RADIUS_STANDARD * 2,\n    borderRadius: RADIUS_STANDARD,\n    zIndex: 1,\n    // Render the badge on top of potential ripples.\n    transition: theme.transitions.create('transform', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    variants: [...Object.keys(((_theme$vars = theme.vars) != null ? _theme$vars : theme).palette).filter(key => {\n      var _theme$vars2, _theme$vars3;\n      return ((_theme$vars2 = theme.vars) != null ? _theme$vars2 : theme).palette[key].main && ((_theme$vars3 = theme.vars) != null ? _theme$vars3 : theme).palette[key].contrastText;\n    }).map(color => ({\n      props: {\n        color\n      },\n      style: {\n        backgroundColor: (theme.vars || theme).palette[color].main,\n        color: (theme.vars || theme).palette[color].contrastText\n      }\n    })), {\n      props: {\n        variant: 'dot'\n      },\n      style: {\n        borderRadius: RADIUS_DOT,\n        height: RADIUS_DOT * 2,\n        minWidth: RADIUS_DOT * 2,\n        padding: 0\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular',\n      style: {\n        top: 0,\n        right: 0,\n        transform: 'scale(1) translate(50%, -50%)',\n        transformOrigin: '100% 0%',\n        [`&.${badgeClasses.invisible}`]: {\n          transform: 'scale(0) translate(50%, -50%)'\n        }\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular',\n      style: {\n        bottom: 0,\n        right: 0,\n        transform: 'scale(1) translate(50%, 50%)',\n        transformOrigin: '100% 100%',\n        [`&.${badgeClasses.invisible}`]: {\n          transform: 'scale(0) translate(50%, 50%)'\n        }\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular',\n      style: {\n        top: 0,\n        left: 0,\n        transform: 'scale(1) translate(-50%, -50%)',\n        transformOrigin: '0% 0%',\n        [`&.${badgeClasses.invisible}`]: {\n          transform: 'scale(0) translate(-50%, -50%)'\n        }\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular',\n      style: {\n        bottom: 0,\n        left: 0,\n        transform: 'scale(1) translate(-50%, 50%)',\n        transformOrigin: '0% 100%',\n        [`&.${badgeClasses.invisible}`]: {\n          transform: 'scale(0) translate(-50%, 50%)'\n        }\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular',\n      style: {\n        top: '14%',\n        right: '14%',\n        transform: 'scale(1) translate(50%, -50%)',\n        transformOrigin: '100% 0%',\n        [`&.${badgeClasses.invisible}`]: {\n          transform: 'scale(0) translate(50%, -50%)'\n        }\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular',\n      style: {\n        bottom: '14%',\n        right: '14%',\n        transform: 'scale(1) translate(50%, 50%)',\n        transformOrigin: '100% 100%',\n        [`&.${badgeClasses.invisible}`]: {\n          transform: 'scale(0) translate(50%, 50%)'\n        }\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular',\n      style: {\n        top: '14%',\n        left: '14%',\n        transform: 'scale(1) translate(-50%, -50%)',\n        transformOrigin: '0% 0%',\n        [`&.${badgeClasses.invisible}`]: {\n          transform: 'scale(0) translate(-50%, -50%)'\n        }\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular',\n      style: {\n        bottom: '14%',\n        left: '14%',\n        transform: 'scale(1) translate(-50%, 50%)',\n        transformOrigin: '0% 100%',\n        [`&.${badgeClasses.invisible}`]: {\n          transform: 'scale(0) translate(-50%, 50%)'\n        }\n      }\n    }, {\n      props: {\n        invisible: true\n      },\n      style: {\n        transition: theme.transitions.create('transform', {\n          easing: theme.transitions.easing.easeInOut,\n          duration: theme.transitions.duration.leavingScreen\n        })\n      }\n    }]\n  };\n});\nconst Badge = /*#__PURE__*/React.forwardRef(function Badge(inProps, ref) {\n  var _ref, _slots$root, _ref2, _slots$badge, _slotProps$root, _slotProps$badge;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiBadge'\n  });\n  const {\n      anchorOrigin: anchorOriginProp = {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      className,\n      component,\n      components = {},\n      componentsProps = {},\n      children,\n      overlap: overlapProp = 'rectangular',\n      color: colorProp = 'default',\n      invisible: invisibleProp = false,\n      max: maxProp = 99,\n      badgeContent: badgeContentProp,\n      slots,\n      slotProps,\n      showZero = false,\n      variant: variantProp = 'standard'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    badgeContent,\n    invisible: invisibleFromHook,\n    max,\n    displayValue: displayValueFromHook\n  } = useBadge({\n    max: maxProp,\n    invisible: invisibleProp,\n    badgeContent: badgeContentProp,\n    showZero\n  });\n  const prevProps = usePreviousProps({\n    anchorOrigin: anchorOriginProp,\n    color: colorProp,\n    overlap: overlapProp,\n    variant: variantProp,\n    badgeContent: badgeContentProp\n  });\n  const invisible = invisibleFromHook || badgeContent == null && variantProp !== 'dot';\n  const {\n    color = colorProp,\n    overlap = overlapProp,\n    anchorOrigin = anchorOriginProp,\n    variant = variantProp\n  } = invisible ? prevProps : props;\n  const displayValue = variant !== 'dot' ? displayValueFromHook : undefined;\n  const ownerState = _extends({}, props, {\n    badgeContent,\n    invisible,\n    max,\n    displayValue,\n    showZero,\n    anchorOrigin,\n    color,\n    overlap,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n\n  // support both `slots` and `components` for backward compatibility\n  const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : BadgeRoot;\n  const BadgeSlot = (_ref2 = (_slots$badge = slots == null ? void 0 : slots.badge) != null ? _slots$badge : components.Badge) != null ? _ref2 : BadgeBadge;\n  const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;\n  const badgeSlotProps = (_slotProps$badge = slotProps == null ? void 0 : slotProps.badge) != null ? _slotProps$badge : componentsProps.badge;\n  const rootProps = useSlotProps({\n    elementType: RootSlot,\n    externalSlotProps: rootSlotProps,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref,\n      as: component\n    },\n    ownerState,\n    className: clsx(rootSlotProps == null ? void 0 : rootSlotProps.className, classes.root, className)\n  });\n  const badgeProps = useSlotProps({\n    elementType: BadgeSlot,\n    externalSlotProps: badgeSlotProps,\n    ownerState,\n    className: clsx(classes.badge, badgeSlotProps == null ? void 0 : badgeSlotProps.className)\n  });\n  return /*#__PURE__*/_jsxs(RootSlot, _extends({}, rootProps, {\n    children: [children, /*#__PURE__*/_jsx(BadgeSlot, _extends({}, badgeProps, {\n      children: displayValue\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Badge.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The anchor of the badge.\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'right',\n   * }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'default'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `slots` prop.\n   * It's recommended to use the `slots` prop instead.\n   *\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n  /**\n   * Wrapped shape the badge should overlap.\n   * @default 'rectangular'\n   */\n  overlap: PropTypes.oneOf(['circular', 'rectangular']),\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    badge: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['dot', 'standard']), PropTypes.string])\n} : void 0;\nexport default Badge;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M18 2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2m0 14H9V4h9zM3 15v-2h2v2zm0-5.5h2v2H3zM10 20h2v2h-2zm-7-1.5v-2h2v2zM5 22c-1.1 0-2-.9-2-2h2zm3.5 0h-2v-2h2zm5 0v-2h2c0 1.1-.9 2-2 2M5 6v2H3c0-1.1.9-2 2-2\"\n}), 'CopyAll');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8zm2 16H8v-2h8zm0-4H8v-2h8zm-3-5V3.5L18.5 9z\"\n}), 'Description');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 6h12v12H6z\"\n}), 'Stop');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m-5 14H7v-2h7zm3-4H7v-2h10zm0-4H7V7h10z\"\n}), 'Article');","import dayjs from 'dayjs';\n\n\nexport function fDate(date, newFormat) {\n  const fm = newFormat || \"DD MMM YYYY\"; \n\n  return date ? dayjs(date).format(fm) : \"\";\n}","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 17h3l2-4V7H5v6h3zm8 0h3l2-4V7h-6v6h3z\"\n}), 'FormatQuote');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M1 21h22L12 2zm12-3h-2v-2h2zm0-4h-2v-4h2z\"\n}), 'Warning');","import { Box, IconButton, TextField, Tooltip, Typography } from \"@mui/material\";\nimport { useState } from \"react\";\nimport styles from \"./Survey.module.css\";\nimport { truncateWithEllipsis } from \"~/utils/design/utils\";\nimport { Edit } from \"@mui/icons-material\";\n\nexport const EditableSurveyTitle = ({ survey, onSave, isEditable = true }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [title, setTitle] = useState(survey.name);\n\n  const handleTitleChange = (event) => {\n    setTitle(event.target.value);\n  };\n\n  const handleBlur = () => {\n    if (title.trim() === \"\") {\n      setTitle(survey.name);\n    } else if (title !== survey.name) {\n      onSave(title, () => setTitle(survey.name));\n    }\n    setIsEditing(false);\n  };\n\n  const handleEditClick = (event) => {\n    event.stopPropagation();\n    setIsEditing(true);\n  };\n\n  return (\n    <Box className={styles.titleContainer}>\n      {isEditing ? (\n        <TextField\n          sx={{ px: 3, flexGrow: 1 }}\n          value={title}\n          onChange={handleTitleChange}\n          onBlur={handleBlur}\n          autoFocus\n          variant=\"standard\"\n          fullWidth\n          InputProps={{\n            style: { color: \"white\" },\n          }}\n        />\n      ) : (\n        <>\n          <Tooltip\n            title={title.length > 20 ? title : \"\"}\n            sx={{\n              fontSize: \"1.2rem\",\n            }}\n            arrow\n          >\n            <Typography variant=\"h4\" sx={{ px: 3 }} noWrap>\n              {truncateWithEllipsis(title, 18)}\n            </Typography>\n          </Tooltip>\n          {isEditable && (\n            <IconButton\n              className={styles.nameIcon}\n              onClick={handleEditClick}\n              sx={{ ml: 1 }}\n            >\n              <Edit sx={{ color: \"white\" }} />\n            </IconButton>\n          )}\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box, IconButton, TextField, Tooltip, Typography } from \"@mui/material\";\nimport { useState } from \"react\";\nimport styles from \"./Survey.module.css\";\nimport { truncateWithEllipsis } from \"~/utils/design/utils\";\nimport { Edit } from \"@mui/icons-material\";\n\nexport const EditableSurveyDescription = ({\n  survey,\n  onSave,\n  isEditable = true,\n  isExample,\n}) => {\n  const [isDescriptionEditing, setIsDescriptionEditing] = useState(false);\n  const [description, setDescription] = useState(survey.description);\n\n  const charLimit = isExample ? 450 : 125;\n\n  const handleDescriptionChange = (event) => {\n    setDescription(event.target.value);\n  };\n\n  const handleDescriptionBlur = () => {\n    if (description !== survey.description) {\n      onSave(description, () => setDescription(survey.description));\n    }\n    setIsDescriptionEditing(false);\n  };\n\n  const handleEditClick = (event) => {\n    event.stopPropagation();\n    setIsDescriptionEditing(true);\n  };\n\n  return (\n    <Box className={styles.descriptionContainer}>\n      {isDescriptionEditing ? (\n        <TextField\n          sx={{ px: 3 }}\n          value={description}\n          onChange={handleDescriptionChange}\n          onBlur={handleDescriptionBlur}\n          autoFocus\n          variant=\"standard\"\n          fullWidth\n          multiline\n          rows={3}\n        />\n      ) : (\n        <>\n          <Tooltip\n            title={description?.length > charLimit ? description : \"\"}\n            sx={{\n              fontSize: \"1.2rem\",\n            }}\n            arrow\n          >\n            <Typography\n              variant=\"caption\"\n              sx={{\n                px: 3,\n                color: description ? \"inherit\" : \"gray\",\n                flexGrow: 1,\n              }}\n              className={`${\n                isExample ? styles.exampleTruncatedText : styles.truncatedText\n              }`}\n            >\n              {truncateWithEllipsis(description, charLimit) ||\n                \"Click to add a description...\"}\n            </Typography>\n          </Tooltip>\n          {isEditable && (\n            <IconButton\n              className={`${styles.descriptionIcon}`}\n              onClick={handleEditClick}\n              sx={{ ml: 1 }}\n            >\n              <Edit sx={{ color: \"gray\" }} />\n            </IconButton>\n          )}\n        </>\n      )}\n    </Box>\n  );\n};\n","import {\n  Typography,\n  IconButton,\n  Card,\n  Stack,\n  Divider,\n  Tooltip,\n  Snackbar,\n  Alert,\n  Box,\n  CardMedia,\n  Badge,\n} from \"@mui/material\";\nimport { Stop } from \"@mui/icons-material\";\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\nimport ArticleIcon from \"@mui/icons-material/Article\";\nimport styles from \"./Survey.module.css\";\nimport { serverDateTimeToLocalDateTime } from \"~/utils/DateUtils\";\nimport { useTranslation } from \"react-i18next\";\nimport SavingSurvey from \"~/components/design/SavingSurvey\";\nimport { fDate } from \"~/utils/format-time\";\nimport TableRowsIcon from \"@mui/icons-material/TableRows\";\nimport FormatQuoteIcon from \"@mui/icons-material/FormatQuote\";\nimport WarningIcon from \"@mui/icons-material/Warning\";\nimport FileCopyIcon from \"@mui/icons-material/FileCopy\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { isSurveyAdmin } from \"~/constants/roles\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setLoading } from \"~/state/edit/editState\";\nimport { useService } from \"~/hooks/use-service\";\nimport { PROCESSED_ERRORS } from \"~/utils/errorsProcessor\";\nimport { buildResourceUrl } from \"~/networking/common\";\nimport ImageIcon from \"@mui/icons-material/Image\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTheme } from \"@emotion/react\";\nimport { EditableSurveyTitle } from \"./EditableSurveyTitle\";\nimport { EditableSurveyDescription } from \"./EditableSurveyDescription\";\n\nexport const STATUS = {\n  DRAFT: \"draft\",\n  CLOSED: \"closed\",\n  ACTIVE: \"active\",\n  EXPIRED: \"expired\",\n  SCHEDULED: \"scheduled\",\n};\n\nconst status = (survey) => {\n  switch (survey.status) {\n    case \"draft\":\n      return STATUS.DRAFT;\n    case \"closed\":\n      return STATUS.CLOSED;\n    case \"active\":\n      if (\n        survey.endDate &&\n        serverDateTimeToLocalDateTime(survey.endDate) < Date.now()\n      ) {\n        return STATUS.EXPIRED;\n      } else if (\n        survey.startDate &&\n        serverDateTimeToLocalDateTime(survey.startDate) > Date.now()\n      ) {\n        return STATUS.SCHEDULED;\n      } else {\n        return STATUS.ACTIVE;\n      }\n    default:\n      return STATUS.DRAFT;\n  }\n};\n\nconst bgHeader = (status) => {\n  switch (status) {\n    case STATUS.DRAFT:\n      return \"#e9db3e\";\n    case STATUS.CLOSED:\n      return \"#d32f2f\";\n    case STATUS.EXPIRED:\n      return \"#9d4435\";\n    case STATUS.SCHEDULED:\n      return \"#607d8b\";\n    case STATUS.ACTIVE:\n      return \"#669834\";\n    default:\n      return;\n  }\n};\n\nexport const Survey = ({\n  survey,\n  example = false,\n  onClone,\n  onDelete,\n  onClose,\n  onUpdateTitle,\n  onUpdateDescription,\n  onUpdateImage,\n}) => {\n  const { t } = useTranslation(\"manage\");\n  const surveyStatus = status(survey);\n  const surveyService = useService(\"survey\");\n  const designService = useService(\"design\");\n\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const theme = useTheme();\n\n  const handleChangeTitle = (newTitle, revertTitle) => {\n    dispatch(setLoading(true));\n    surveyService\n      .putSurvey({ ...survey, name: newTitle }, survey.id)\n      .then(() => {\n        onUpdateTitle(survey.id, newTitle);\n      })\n      .catch((processedError) => {\n        if (\n          processedError.name == PROCESSED_ERRORS.DUPLICATE_SURVEY_NAME.name\n        ) {\n          setError(t(`processed_errors.${processedError.name}`));\n          setOpenSnackbar(true);\n          revertTitle();\n        }\n      })\n      .finally(() => {\n        dispatch(setLoading(false));\n      });\n  };\n\n  const handleChangeDescription = (newDescription) => {\n    dispatch(setLoading(true));\n    surveyService\n      .putSurvey({ ...survey, description: newDescription }, survey.id)\n      .then(() => {\n        onUpdateDescription(survey.id, newDescription);\n      })\n      .catch((processedError) => {})\n      .finally(() => {\n        dispatch(setLoading(false));\n      });\n  };\n\n  const handleCloseSnackbar = () => {\n    setOpenSnackbar(false);\n  };\n\n  const handleImageUpload = (event) => {\n    const image = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      designService\n        .uploadResource(image, survey.id)\n        .then((response) => {\n          surveyService\n            .putSurvey({ image: response.name }, survey.id)\n            .then((result) => {\n              onUpdateImage(survey.id, response.name);\n            })\n            .catch((err) => {\n              setError(t(`processed_errors.${err.name}`));\n              setOpenSnackbar(true);\n            })\n            .finally(() => {\n              dispatch(setLoading(false));\n            });\n        })\n        .catch((err) => {\n          setError(t(`processed_errors.${err.name}`));\n          setOpenSnackbar(true);\n        })\n        .finally(() => {\n          dispatch(setLoading(false));\n        });\n    };\n\n    reader.readAsDataURL(image);\n  };\n\n  return (\n    <>\n      <SavingSurvey />\n      <Snackbar\n        open={openSnackbar}\n        autoHideDuration={6000}\n        onClose={handleCloseSnackbar}\n      >\n        <Alert onClose={handleCloseSnackbar} severity=\"error\">\n          {error}\n        </Alert>\n      </Snackbar>\n      <Card\n        sx={{\n          \"&:hover\": {\n            boxShadow: (theme) => theme.customShadows.z24,\n          },\n        }}\n      >\n        <Stack sx={{ pb: 0 }}>\n          <Stack spacing={0.5} sx={{ mb: 1 }}>\n            <Box className={styles.relativeContainer}>\n              <Box className={styles.absoluteOverlay}>\n                <EditableSurveyTitle\n                  survey={survey}\n                  onSave={handleChangeTitle}\n                  isEditable={isSurveyAdmin() && !example}\n                />\n              </Box>\n\n              <Box className={styles.logo}>\n                <Box className={`${styles.logoImageWrapper}`}>\n                  <CardMedia\n                    component=\"img\"\n                    image={\n                      survey.image\n                        ? buildResourceUrl(survey.image, survey.id, example)\n                        : \"/qlarr.png\"\n                    }\n                    height=\"150\"\n                  />\n                  <Box className={styles.imageOverlay} />\n\n                  {isSurveyAdmin() && !survey.example && (\n                    <Box\n                      className={styles.photoIcon}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        document\n                          .getElementById(`imageInput-${survey.id}`)\n                          .click();\n                      }}\n                    >\n                      <ImageIcon className={styles.cameraIcon} />\n                    </Box>\n                  )}\n                </Box>\n                <input\n                  id={`imageInput-${survey.id}`}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  style={{ display: \"none\" }}\n                  onChange={handleImageUpload}\n                />\n              </Box>\n            </Box>\n\n            <EditableSurveyDescription\n              survey={survey}\n              isExample={example}\n              onSave={handleChangeDescription}\n              isEditable={isSurveyAdmin() && !example}\n            />\n\n            {!example && (\n              <>\n                <Stack\n                  direction=\"row\"\n                  alignItems=\"center\"\n                  spacing={0.5}\n                  sx={{ px: 3, typography: \"body2\", color: \"text.secondary\" }}\n                >\n                  <span\n                    style={{\n                      backgroundColor: bgHeader(surveyStatus),\n                    }}\n                    className={styles.badge}\n                  ></span>{\" \"}\n                  <Typography\n                    variant=\"subtitle2\"\n                    className={styles.textTransform}\n                  >\n                    {t(`status.${surveyStatus}`)}\n                  </Typography>\n                </Stack>\n                <Box sx={{ px: 3, display: \"flex\", gap: 2, my: 0.5 }}>\n                  {!example &&\n                    survey.status !== \"closed\" &&\n                    survey.latestVersion.published === false && (\n                      <Tooltip title=\"Has unpublished changes\">\n                        <WarningIcon sx={{ color: \"text.secondary\" }} />\n                      </Tooltip>\n                    )}\n\n                  <Tooltip\n                    title={`Complete Responses: ${survey.completeResponseCount}`}\n                  >\n                    <Badge\n                      badgeContent={survey.completeResponseCount}\n                      color=\"primary\"\n                      anchorOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                      }}\n                    >\n                      <TableRowsIcon sx={{ color: \"text.secondary\" }} />\n                    </Badge>\n                  </Tooltip>\n\n                  <Tooltip\n                    title={\n                      survey.surveyQuota > 0\n                        ? `Quota: ${survey.surveyQuota}`\n                        : \"No Quota\"\n                    }\n                  >\n                    <Badge\n                      badgeContent={\n                        survey.surveyQuota > 0 ? survey.surveyQuota : 0\n                      }\n                      color=\"primary\"\n                      anchorOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                      }}\n                    >\n                      <FormatQuoteIcon sx={{ color: \"text.secondary\" }} />\n                    </Badge>\n                  </Tooltip>\n                </Box>\n              </>\n            )}\n          </Stack>\n\n          <Typography variant=\"caption\" sx={{ px: 3, color: \"text.disabled\" }}>\n            <strong>{t(\"edit_survey.metadata.created\")}</strong>:{\" \"}\n            {fDate(survey.creationDate)}\n          </Typography>\n          <Typography variant=\"caption\" sx={{ px: 3, color: \"text.disabled\" }}>\n            <strong>{t(\"edit_survey.metadata.last_modified\")}</strong>:{\" \"}\n            {fDate(survey.lastModified)}\n          </Typography>\n          {!example && survey.startDate && (\n            <Typography\n              variant=\"caption\"\n              sx={{ px: 3, color: \"text.disabled\" }}\n            >\n              <strong>{t(\"edit_survey.metadata.start_date\")}</strong>:{\" \"}\n              {fDate(survey.startDate)}\n            </Typography>\n          )}\n\n          {!example && survey.endDate && (\n            <Typography\n              variant=\"caption\"\n              sx={{ px: 3, color: \"text.disabled\" }}\n            >\n              <strong>{t(\"edit_survey.metadata.end_date\")}</strong>:{\" \"}\n              {fDate(survey.endDate)}\n            </Typography>\n          )}\n        </Stack>\n\n        <Divider sx={{ borderStyle: \"dashed\", my: 1 }} />\n\n        <Stack\n          sx={{\n            p: 3,\n            pt: 0,\n            typography: \"body2\",\n            color: \"text.secondary\",\n            textTransform: \"capitalize\",\n          }}\n          className={styles.surveyActions}\n        >\n          <IconButton\n            className={styles.iconButton}\n            sx={{\n              backgroundColor: theme.palette.primary.main,\n              \"&:hover\": {\n                backgroundColor: theme.palette.primary.main,\n              },\n            }}\n            aria-label=\"redirect\"\n            size=\"large\"\n            onClick={(e) => {\n              e.stopPropagation();\n              const targetUrl = survey.example\n                ? `/guest/preview/${survey.id}`\n                : `/design-survey/${survey.id}`;\n              navigate(targetUrl);\n            }}\n          >\n            {!example ? (\n              <ArticleIcon sx={{ color: \"#fff\" }} />\n            ) : (\n              <VisibilityIcon sx={{ color: \"#fff\" }} />\n            )}\n          </IconButton>\n          {isSurveyAdmin() && !example && survey.status === \"active\" && (\n            <Tooltip title={t(\"edit_survey.close_title\")}>\n              <IconButton\n                className={styles.iconButton}\n                aria-label=\"stop\"\n                size=\"large\"\n                onClick={() => onClose(survey.id)}\n              >\n                <Stop color=\"primary\" />\n              </IconButton>\n            </Tooltip>\n          )}\n          {isSurveyAdmin() && (\n            <Tooltip title={t(\"edit_survey.clone_survey\")}>\n              <IconButton\n                className={styles.iconButton}\n                aria-label=\"clone\"\n                size=\"large\"\n                onClick={onClone}\n              >\n                <FileCopyIcon color=\"primary\" />\n              </IconButton>\n            </Tooltip>\n          )}\n\n          {!example && survey.status !== STATUS.ACTIVE && (\n            <Tooltip title={t(\"action_btn.delete\")}>\n              <IconButton\n                className={styles.iconButton}\n                aria-label=\"delete\"\n                size=\"large\"\n                onClick={() => onDelete(survey.id)}\n              >\n                <DeleteIcon color=\"primary\" />\n              </IconButton>\n            </Tooltip>\n          )}\n        </Stack>\n      </Card>\n    </>\n  );\n};\n","import { Box, Stack, Typography } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport { STATUS } from \"../Survey\";\nimport { RHFSelect } from \"~/components/hook-form\";\n\nexport const HeaderContent = ({\n  sort,\n  filter,\n  onFilterSelected,\n  onSortSelected,\n}) => {\n  const sort_options = [\n    { value: \"responses_desc\", label: \"survey_sort_options.responses_desc\" },\n    {\n      value: \"last_modified_desc\",\n      label: \"survey_sort_options.last_modified_desc\",\n    },\n  ];\n\n  const filter_options = [\n    { value: \"all\", label: `status.all` },\n    { value: STATUS.ACTIVE, label: `status.${STATUS.ACTIVE}` },\n    { value: STATUS.SCHEDULED, label: `status.${STATUS.SCHEDULED}` },\n    { value: STATUS.DRAFT, label: `status.${STATUS.DRAFT}` },\n    { value: STATUS.EXPIRED, label: `status.${STATUS.EXPIRED}` },\n    { value: STATUS.CLOSED, label: `status.${STATUS.CLOSED}` },\n  ];\n  const { t } = useTranslation(\"manage\");\n\n  return (\n    <Box\n      rowGap={2.5}\n      columnGap={2}\n      display=\"grid\"\n      gridTemplateColumns={{ xs: \"repeat(1, 1fr)\", md: \"repeat(2, 1fr)\" }}\n    >\n      <Typography\n        variant=\"h5\"\n        flex=\"1\"\n        textTransform=\"uppercase\"\n        fontWeight=\"600\"\n      >\n        {t(\"my_surveys\")}\n      </Typography>\n\n      <Stack\n        width=\"100%\"\n        spacing={2.5}\n        direction={{ xs: \"column\", md: \"row\" }}\n        alignItems=\"center\"\n      >\n        <RHFSelect\n          onChange={onSortSelected}\n          native\n          value={sort}\n          name=\"Status\"\n          label={t(\"label.sort_by\")}\n        >\n          {sort_options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {t(option.label)}\n            </option>\n          ))}\n        </RHFSelect>\n        <RHFSelect\n          onChange={onFilterSelected}\n          native\n          value={filter}\n          name=\"Status\"\n          label={t(\"edit_survey.status\")}\n        >\n          {filter_options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {t(option.label)}\n            </option>\n          ))}\n        </RHFSelect>\n      </Stack>\n    </Box>\n  );\n};\n","import { Box, Typography } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"./ExampleSurveys.module.css\";\nimport { Survey } from \"../Survey\";\nimport { useTranslation } from \"react-i18next\";\nimport { processApiError } from \"~/utils/errorsProcessor\";\nimport { useService } from '~/hooks/use-service';\nimport LoadingDots from '~/components/common/LoadingDots';\n\nconst ExampleSurveys = ({ onClone }) => {\n  const { t } = useTranslation(\"manage\");\n  const [isFetching, setFetching] = useState(false);\n  const [exampleSurveys, setExampleSurveys] = useState([]);\n  const surveyService = useService(\"survey\");\n\n  useEffect(() => {\n    setFetching(true);\n    surveyService.getGuestsSurveys()\n      .then((data) => {\n        setFetching(false);\n        if (data) {\n          const updatedData = data.map((survey) => ({\n            ...survey,\n            example: true,\n          }));\n          setExampleSurveys(updatedData);\n        }\n      })\n      .catch((e) => {\n        setFetching(false);\n        processApiError(e);\n      });\n  }, []);\n\n  return (\n    <>\n      <Typography\n        variant=\"h5\"\n        marginBottom={2}\n        fontWeight={600}\n        textTransform=\"uppercase\"\n      >\n        {t(\"example_surveys\")}\n      </Typography>\n\n      {!isFetching ? (\n        <Box\n          className={styles.exampleSurveysContainer}\n          sx={{\n            mt: 3,\n            columnGap: 4,\n            display: \"grid\",\n            rowGap: { xs: 4, md: 5 },\n            gridTemplateColumns: {\n              xs: \"repeat(1, 1fr)\",\n              sm: \"repeat(2, 1fr)\",\n              md: \"repeat(3, 1fr)\",\n            },\n          }}\n        >\n          {exampleSurveys?.map((survey) => {\n            return (\n              <Survey\n                key={survey.id}\n                survey={survey}\n                onClone={() => onClone(survey)}\n                example={true}\n              />\n            );\n          })}\n        </Box>\n      ) : (\n        <LoadingDots />\n      )}\n    </>\n  );\n};\n\nexport default ExampleSurveys;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Box, Card } from \"@mui/material\";\nimport * as Yup from \"yup\";\nimport { PROCESSED_ERRORS } from \"~/utils/errorsProcessor\";\nimport styles from \"./CreateSurvey.module.css\";\nimport { localDateToServerDateTime } from \"~/utils/DateUtils\";\nimport { SURVEY_MODE } from \"~/constants/survey\";\nimport { setLoading } from \"~/state/edit/editState\";\nimport { useDispatch } from \"react-redux\";\nimport FormProvider, { RHFSelect, RHFTextField } from \"~/components/hook-form\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { useService } from \"~/hooks/use-service\";\n\nconst surveyMode_options = [\n  { value: SURVEY_MODE.WEB, label: `mode.${SURVEY_MODE.WEB}` },\n  { value: SURVEY_MODE.OFFLINE, label: `mode.${SURVEY_MODE.OFFLINE}` },\n  { value: SURVEY_MODE.MIXED, label: `mode.${SURVEY_MODE.MIXED}` },\n];\nfunction CreateSurvey({ onSurveyCreated }) {\n  const surveyService = useService(\"survey\");\n\n  const { t } = useTranslation(\"manage\");\n  const dispatch = useDispatch();\n\n  const defaultValues = {\n    surveyName: \"\",\n    surveyMode: SURVEY_MODE.MIXED,\n    surveyActiveFrom: \"\",\n    surveyActiveTo: \"\",\n  };\n  const CreateSurveySchema = Yup.object().shape({\n    surveyName: Yup.string()\n      .required(t(\"survey_required\"))\n      .max(50, t(\"survey_too_long\")),\n  });\n  const methods = useForm({\n    resolver: yupResolver(CreateSurveySchema),\n    defaultValues,\n  });\n\n  const {\n    setError,\n    reset,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    dispatch(setLoading(true));\n    const model = {\n      name: data.surveyName,\n      usage: data.surveyMode,\n    };\n\n    if (data.surveyActiveFrom) {\n      model.startDate = localDateToServerDateTime(surveyActiveFrom);\n    }\n\n    if (data.surveyActiveTo) {\n      model.endDate = localDateToServerDateTime(surveyActiveTo);\n    }\n\n    surveyService\n      .createSurvey(model)\n      .then(() => {\n        if (onSurveyCreated) {\n          onSurveyCreated();\n          reset();\n        }\n      })\n      .catch((processedError) => {\n        if (\n          processedError.name == PROCESSED_ERRORS.DUPLICATE_SURVEY_NAME.name\n        ) {\n          setError(\"surveyName\", {\n            type: \"manual\",\n            message: t(`processed_errors.${processedError.name}`),\n          });\n        } else if (\n          processedError.name == PROCESSED_ERRORS.INVALID_SURVEY_DATES.name\n        ) {\n          setError(\"surveyActiveFrom\", {\n            type: \"manual\",\n            message: t(`processed_errors.${processedError.name}`),\n          });\n        }\n      })\n      .finally(() => {\n        dispatch(setLoading(false));\n      });\n  });\n  return (\n    <Card className={styles.createUserCard}>\n      <FormProvider methods={methods} onSubmit={onSubmit}>\n        <Box\n          rowGap={2.5}\n          columnGap={2}\n          display=\"grid\"\n          gridTemplateColumns={{ xs: \"repeat(1, 1fr)\", md: \"repeat(3, 1fr)\" }}\n        >\n          <RHFTextField name=\"surveyName\" label={t(\"label.survey_name\")} />\n\n          <RHFSelect name=\"surveyMode\" label={t(\"label.survey_mode\")}>\n            {surveyMode_options.map((option) => (\n              <option key={option.value} value={option.value}>\n                {t(option.label)}\n              </option>\n            ))}\n          </RHFSelect>\n\n          <LoadingButton\n            fullWidth\n            size=\"large\"\n            color=\"primary\"\n            type=\"submit\"\n            variant=\"contained\"\n            loading={isSubmitting}\n          >\n            {t(\"action_btn.create\")}\n          </LoadingButton>\n        </Box>\n      </FormProvider>\n    </Card>\n  );\n}\n\nexport default CreateSurvey;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Container,\n  Fade,\n  IconButton,\n  Stack,\n  TablePagination,\n  Typography,\n} from \"@mui/material\";\nimport TokenService from \"~/services/TokenService\";\nimport styles from \"./Dashboard.module.css\";\nimport { HeaderContent } from \"~/components/manage/HeaderContent\";\nimport { ROLES } from \"~/constants/roles\";\nimport { setLoading } from \"~/state/edit/editState\";\nimport { useDispatch } from \"react-redux\";\nimport ExampleSurveys from \"~/components/manage/ExampleSurveys/ExampleSurveys\";\nimport CreateSurvey from \"~/components/manage/CreateSurvey/CreateSurvey\";\nimport { PROCESSED_ERRORS } from \"~/utils/errorsProcessor\";\nimport { useTranslation } from \"react-i18next\";\nimport { Survey } from \"~/components/manage/Survey\";\nimport { SurveyClone } from \"~/components/manage/SurveyClone\";\nimport LoadingDots from \"~/components/common/LoadingDots\";\nimport { useService } from \"~/hooks/use-service\";\nimport DeleteModal from \"~/components/common/DeleteModal\";\nimport {\n  Add,\n  Close,\n  CopyAll,\n  Description,\n  SentimentDissatisfied,\n} from \"@mui/icons-material\";\nimport { getDirFromSession } from \"~/utils/common\";\n\nfunction Dashboard() {\n  const surveyService = useService(\"survey\");\n  const [surveys, setSurveys] = useState(null);\n\n  const [fetchingSurveys, setFetchingSurveys] = useState(true);\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n  const [status, setStatus] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"last_modified_desc\");\n\n  const [openCloneModal, setOpenCloneModal] = useState(false);\n  const [cloningSurvey, setCloningSurvey] = useState();\n\n  const dispatch = useDispatch();\n\n  const { t } = useTranslation(\"manage\");\n\n  const processApirror = (e) => {\n    setFetchingSurveys(false);\n  };\n\n  const fetchSurveys = () => {\n    surveyService\n      .getAllSurveys(page, perPage, status, sortBy)\n      .then((data) => {\n        if (data) {\n          setFetchingSurveys(false);\n          setSurveys(data);\n        }\n      })\n      .catch((e) => processApirror(e));\n  };\n  useEffect(() => {\n    fetchSurveys();\n  }, [page, perPage, sortBy, status]);\n\n  const handleSurveyStatusChange = (id, newStatus) => {\n    setSurveys((prevState) => ({\n      ...prevState,\n      surveys: prevState.surveys.map((survey) =>\n        survey.id === id ? { ...survey, status: newStatus } : survey\n      ),\n    }));\n  };\n\n  const shouldShowClickAdd = () => {\n    const roles = TokenService.getUser().roles;\n    if (\n      roles.indexOf(ROLES.SUPER_ADMIN) > -1 ||\n      roles.indexOf(ROLES.SURVEY_ADMIN) > -1\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  const [description, setDescription] = useState(\"\");\n  const [actionType, setActionType] = useState(\"\");\n  const [selectedSurvey, setSelectedSurvey] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [title, setTitle] = useState(t(\"action_btn.delete\"));\n  const [isCreateSurveyOpen, setCreateSurveyOpen] = useState(false);\n  const [isTemplateSliderOpen, setTemplateSliderOpen] = useState(false);\n\n  const handleButtonClick = () => {\n    setCreateSurveyOpen(true);\n  };\n\n  const handleTemplateButtonClick = () => {\n    setTemplateSliderOpen(true);\n  };\n\n  const handleCloseClick = () => {\n    setCreateSurveyOpen(false);\n  };\n\n  const handleTemplateCloseClick = () => {\n    setTemplateSliderOpen(false);\n  };\n  const onDelete = (survey) => {\n    setActionType(\"delete\");\n    setTitle(t(\"action_btn.delete\"));\n    setSelectedSurvey(survey);\n    setDescription(\n      t(\"edit_survey.delete_survey\", { survey_name: survey.name })\n    );\n    setOpen(true);\n  };\n\n  const onCloseSurvey = (survey) => {\n    setActionType(\"close\");\n    setTitle(t(\"action_btn.close\"));\n    setSelectedSurvey(survey);\n    setDescription(t(\"edit_survey.close_survey\", { survey_name: survey.name }));\n    setOpen(true);\n  };\n\n  const handleAction = () => {\n    if (actionType === \"delete\") {\n      deleteSurvey(selectedSurvey.id);\n      setOpen(false);\n    } else if (actionType === \"close\") {\n      closeSurvey(selectedSurvey.id);\n      setOpen(false);\n    }\n  };\n\n  const onClone = (survey) => {\n    setCloningSurvey(survey);\n    setOpenCloneModal(true);\n  };\n\n  const deleteSurvey = (id) => {\n    dispatch(setLoading(true));\n    surveyService\n      .deleteSurvey(id)\n      .then(() => {\n        fetchSurveys();\n      })\n      .catch((e) => {\n        dispatch(setLoading(false));\n      })\n      .finally(() => {\n        dispatch(setLoading(false));\n      });\n  };\n\n  const closeSurvey = (id) => {\n    dispatch(setLoading(true));\n    surveyService\n      .closeSurvey(id)\n      .then((data) => {\n        handleSurveyStatusChange(id, \"closed\");\n      })\n      .catch((processedError) => {\n        if (processedError.name == PROCESSED_ERRORS.INVALID_SURVEY_DATES.name) {\n          setSurveyDateError(t(`processed_errors.${processed.name}`));\n        }\n      })\n      .finally(() => {\n        dispatch(setLoading(false));\n      });\n  };\n\n  const handleUpdateSurveyName = (surveyId, newName) => {\n    setSurveys((prevSurveys) => {\n      const updatedSurveys = prevSurveys.surveys.map((survey) =>\n        survey.id === surveyId ? { ...survey, name: newName } : survey\n      );\n      return {\n        ...prevSurveys,\n        surveys: updatedSurveys,\n      };\n    });\n  };\n\n  const handleUpdateSurveyDescription = (surveyId, newDescription) => {\n    setSurveys((prevSurveys) => {\n      const updatedSurveys = prevSurveys.surveys.map((survey) =>\n        survey.id === surveyId\n          ? { ...survey, description: newDescription }\n          : survey\n      );\n      return {\n        ...prevSurveys,\n        surveys: updatedSurveys,\n      };\n    });\n  };\n\n  const handleUpdateSurveyImage = (surveyId, newImage) => {\n    setSurveys((prevSurveys) => {\n      const updatedSurveys = prevSurveys.surveys.map((survey) =>\n        survey.id === surveyId ? { ...survey, image: newImage } : survey\n      );\n      return {\n        ...prevSurveys,\n        surveys: updatedSurveys,\n      };\n    });\n  };\n\n  const isRtl = getDirFromSession();\n\n  return (\n    <Box className={styles.mainContainer}>\n      <Container>\n        <Box className={styles.content}>\n          <Stack\n            className={styles.newSurveysButton}\n            direction=\"row\"\n            spacing={2}\n          >\n            {shouldShowClickAdd() && !isCreateSurveyOpen && (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<Add />}\n                onClick={handleButtonClick}\n              >\n                {t(\"create_new_survey\")}\n              </Button>\n            )}\n            {shouldShowClickAdd() && !isTemplateSliderOpen && (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<CopyAll />}\n                onClick={handleTemplateButtonClick}\n              >\n                {t(\"copy_example_surveys\")}\n              </Button>\n            )}\n          </Stack>\n\n          {isCreateSurveyOpen && (\n            <Fade in={isCreateSurveyOpen} timeout={300}>\n              <div style={{ position: \"relative\" }}>\n                <IconButton\n                  onClick={handleCloseClick}\n                  aria-label=\"close\"\n                  style={{\n                    position: \"absolute\",\n                    top: 0,\n                    ...(isRtl === \"ltr\" ? { right: 0 } : { left: 0 }),\n                    color: \"black\",\n                    zIndex: 1,\n                  }}\n                >\n                  <Close color=\"#000\" />\n                </IconButton>\n                <CreateSurvey onSurveyCreated={fetchSurveys} />\n              </div>\n            </Fade>\n          )}\n\n          {isTemplateSliderOpen && (\n            <Fade in={isTemplateSliderOpen} timeout={300}>\n              <div style={{ position: \"relative\" }}>\n                <IconButton\n                  onClick={handleTemplateCloseClick}\n                  aria-label=\"close\"\n                  style={{\n                    position: \"absolute\",\n                    top: 0,\n                    ...(isRtl === \"ltr\" ? { right: 0 } : { left: 0 }),\n                    color: \"black\",\n                    zIndex: 1,\n                  }}\n                >\n                  <Close color=\"#000\" />\n                </IconButton>\n                <ExampleSurveys onClone={(survey) => onClone(survey)} />\n              </div>\n            </Fade>\n          )}\n\n          <HeaderContent\n            filter={status}\n            onFilterSelected={(el) => {\n              setPage(1);\n              setStatus(el.target.value);\n            }}\n            sort={sortBy}\n            onSortSelected={(el) => {\n              setPage(1);\n              setSortBy(el.target.value);\n            }}\n          />\n          <Box className={styles.surveyCardsContainer}>\n          {!fetchingSurveys ? (\n            <>\n              {surveys?.surveys?.length > 0 ? (\n                <Box\n                  sx={{\n                    mt: 3,\n                    columnGap: 2,\n                    display: \"grid\",\n                    rowGap: { xs: 4, md: 5 },\n                    gridTemplateColumns: {\n                      xs: \"1fr\",\n                      sm: \"repeat(auto-fit, minmax(280px, 1fr))\",\n                      md: \"repeat(auto-fit, minmax(330px, 350px))\",\n                    },\n                  }}\n                >\n                  {surveys?.surveys?.map((survey) => {\n                    return (\n                      <Survey\n                        key={survey.id}\n                        survey={survey}\n                        onStatusChange={handleSurveyStatusChange}\n                        onClone={() => onClone(survey)}\n                        onDelete={() => onDelete(survey)}\n                        onClose={() => onCloseSurvey(survey)}\n                        onUpdateTitle={handleUpdateSurveyName}\n                        onUpdateDescription={handleUpdateSurveyDescription}\n                        onUpdateImage={handleUpdateSurveyImage}\n                      />\n                    );\n                  })}\n                </Box>\n              ) : (\n                <div className={styles.noSurveys}>\n                  <Description sx={{ fontSize: 48, color: \"#ccc\" }} />\n                  <Typography variant=\"h6\" color=\"textSecondary\" sx={{ mt: 2 }}>\n                    {t(\"create_survey.empty_state_message\")}\n                  </Typography>\n                </div>\n              )}\n            </>\n          ) : (\n            <LoadingDots />\n          )}\n          </Box>\n\n          {surveys && (\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 20, 50]}\n              component=\"div\"\n              labelDisplayedRows={({ from, to, count, page }) => {\n                return t(\"responses.label_displayed_rows\", { from, to, count });\n              }}\n              labelRowsPerPage={t(\"responses.label_surveys_per_page\")}\n              count={surveys?.totalCount}\n              rowsPerPage={perPage}\n              page={page - 1}\n              onPageChange={(event, newPage) => {\n                setPage(newPage + 1);\n              }}\n              onRowsPerPageChange={(event) => {\n                setPerPage(parseInt(event.target.value, 10));\n                setPage(1);\n              }}\n            />\n          )}\n        </Box>\n      </Container>\n      <SurveyClone\n        open={openCloneModal}\n        onClose={(cloned) => {\n          setOpenCloneModal(false);\n          if (cloned) {\n            fetchSurveys();\n          }\n        }}\n        survey={cloningSurvey}\n      />\n      <DeleteModal\n        open={open}\n        description={description}\n        handleClose={() => setOpen(false)}\n        handleDelete={handleAction}\n        title={title}\n      />\n    </Box>\n  );\n}\n\nexport default Dashboard;\n"],"names":["styles","React.forwardRef","Badge","_jsxs","_jsx","_interopRequireDefault","require$$0","default_1","_createSvgIcon","require$$1","_jsxRuntime","require$$2","useState","jsx","jsxs","Fragment","status","surveyStatus","theme","ImageIcon","WarningIcon","TableRowsIcon","FormatQuoteIcon","ArticleIcon","VisibilityIcon","FileCopyIcon","DeleteIcon","useEffect","Yup.object","Yup.string","yupResolver","page"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,8,9]}