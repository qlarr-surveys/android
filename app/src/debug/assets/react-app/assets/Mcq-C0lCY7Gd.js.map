{"version":3,"file":"Mcq-C0lCY7Gd.js","sources":["../../src/components/Questions/Mcq/MCQAnswer.jsx","../../src/components/Questions/Mcq/Mcq.jsx"],"sourcesContent":["\n\nimport React, { memo } from \"react\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\n\nimport Checkbox from \"@mui/material/Checkbox\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { valueChange } from \"~/state/runState\";\nimport { Box } from \"@mui/material\";\nimport { setDirty } from \"~/state/templateState\";\n\nfunction McqAnswer(props) {\n  const theme = useTheme();\n  const state = useSelector((state) => {\n    let answerState = state.runState.values[props.Answer?.qualifiedCode];\n    return {\n      showAnswer:\n        typeof answerState?.relevance == \"undefined\" || answerState.relevance,\n      checked: answerState?.value || false,\n    };\n  }, shallowEqual);\n  const dispatch = useDispatch();\n  const handleChange = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n        value: event.target.checked,\n      })\n    );\n    dispatch(setDirty(event.target.name));\n    dispatch(setDirty(props.parentCode));\n  };\n\n  return state.showAnswer ? (\n    <FormControlLabel\n      control={\n        <Checkbox\n          checked={state.checked}\n          onChange={handleChange}\n          name={props.Answer.qualifiedCode}\n          sx={{\n            color: theme.textStyles.text.color,\n          }}\n        />\n      }\n      label={\n        <Box\n          sx={{\n            fontFamily: theme.textStyles.text.font,\n            fontSize: theme.textStyles.text.size,\n          }}\n        >\n          {props.Answer.content?.label}\n        </Box>\n      }\n    />\n  ) : (\n    \"\"\n  );\n}\n\nexport default memo(McqAnswer);\n","import FormControl from \"@mui/material/FormControl\";\nimport FormGroup from \"@mui/material/RadioGroup\";\n\nimport React, { memo, useRef } from \"react\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport TextField from \"@mui/material/TextField\";\n\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Validation from \"~/components/run/Validation\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { valueChange } from \"~/state/runState\";\nimport { setDirty } from \"~/state/templateState\";\nimport MCQAnswer from \"./MCQAnswer\";\n\nfunction MCQ(props) {\n  return (\n    <FormControl component=\"fieldset\">\n      <FormGroup>\n        {props.component.answers.map((option) => {\n          if (option.type === \"other\") {\n            return (\n              <McqAnswerOther\n                key={option.qualifiedCode}\n                Answer={option}\n                parentCode={props.component.qualifiedCode}\n              />\n            );\n          } else {\n            return (\n              <MCQAnswer\n                key={option.qualifiedCode}\n                Answer={option}\n                parentCode={props.component.qualifiedCode}\n              />\n            );\n          }\n        })}\n      </FormGroup>\n    </FormControl>\n  );\n}\n\nfunction McqAnswerOther(props) {\n  const theme = useTheme();\n  const nestedTextChild = props.Answer.answers[0];\n  const state = useSelector((state) => {\n    let own = state.runState.values[props.Answer.qualifiedCode];\n    let textChild = state.runState.values[nestedTextChild.qualifiedCode];\n    let show_errors = state.runState.values.Survey.show_errors;\n    let isChildDirty = state.templateState[nestedTextChild.qualifiedCode];\n    return {\n      showAnswer: typeof own?.relevance === \"undefined\" || own.relevance,\n      childInvalid:\n        (show_errors || isChildDirty) &&\n        textChild?.relevance === true &&\n        textChild?.validity === false,\n      checked: own?.value || false,\n      textValue: textChild?.value || \"\",\n      textRelevance: state.textChild?.relevance,\n    };\n  }, shallowEqual);\n\n  const dispatch = useDispatch();\n  const onButtonClick = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n        value: event.target.checked,\n      })\n    );\n    dispatch(setDirty(event.target.name));\n    dispatch(setDirty(props.parentCode));\n    if (event.target.checked) {\n      textInput.current.focus();\n    }\n  };\n  const handleChange = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n        value: event.target.value,\n      })\n    );\n  };\n\n  const textInput = useRef();\n  const handleFocus = (event) => {\n    dispatch(\n      valueChange({ componentCode: props.Answer.qualifiedCode, value: true })\n    );\n  };\n\n  const lostFocus = (event) => {\n    dispatch(setDirty(event.target.name));\n  };\n\n  const showAnswer = () => {\n    return (\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={state.checked}\n            onChange={onButtonClick}\n            name={props.Answer.qualifiedCode}\n            sx={{\n              color: theme.textStyles.text.color,\n            }}\n          />\n        }\n        label={\n          <div className=\"w-100\">\n            <TextField\n              variant=\"standard\"\n              required={\n                state.textRelevance && nestedTextChild.validation?.required\n              }\n              inputRef={textInput}\n              id={nestedTextChild.qualifiedCode}\n              name={nestedTextChild.qualifiedCode}\n              label={props.Answer.content?.label}\n              onChange={handleChange}\n              onFocus={handleFocus}\n              onBlur={lostFocus}\n              sx={{\n                label: { color: theme.textStyles.text.color },\n              }}\n              value={state.textValue}\n              InputProps={{\n                sx: {\n                  fontFamily: theme.textStyles.text.font,\n                  color: theme.textStyles.text.color,\n                  fontSize: theme.textStyles.text.size,\n                },\n              }}\n              helperText={\n                state.childInvalid ? (\n                  <Validation component={nestedTextChild} limit={1} />\n                ) : (\n                  \"\"\n                )\n              }\n            />\n          </div>\n        }\n      />\n    );\n  };\n\n  return state.showAnswer ? showAnswer() : \"\";\n}\n\nexport default memo(MCQ);\n"],"names":["state","_a","jsx","memo","FormGroup","useRef"],"mappings":"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"}