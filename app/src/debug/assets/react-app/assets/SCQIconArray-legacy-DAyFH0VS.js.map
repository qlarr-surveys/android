{"version":3,"file":"SCQIconArray-legacy-DAyFH0VS.js","sources":["../../src/components/Questions/SCQArray/SCQIconArray.jsx"],"sourcesContent":["import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { useTheme } from \"@emotion/react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { valueChange } from \"~/state/runState\";\nimport Validation from \"~/components/run/Validation\";\nimport DynamicSvg from \"~/components/DynamicSvg\";\nimport { buildResourceUrl } from \"~/networking/common\";\nimport { TableHead } from \"@mui/material\";\nimport { columnMinWidth } from '~/utils/design/utils';\n\nfunction SCQIconArray(props) {\n  const theme = useTheme();\n  const width = columnMinWidth()\n\n  let columns = props.component.answers.filter(\n    (answer) => answer.type == \"column\"\n  );\n  let rows = props.component.answers.filter((answer) => answer.type == \"row\");\n\n  return (\n    <TableContainer\n      sx={{\n        overflowX: \"auto\",\n        maxWidth: \"100%\",\n      }}\n    >\n      <Table\n        sx={{ tableLayout: \"fixed\", minWidth: `${columns.length * width}px` }}\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell\n              key=\"content\"\n              sx={{\n                width: width,\n                padding: \"0px\",\n              }}\n            ></TableCell>\n            {columns.map((option) => {\n              return (\n                <TableCell\n                  sx={{\n                    fontFamily: theme.textStyles.text.font,\n                    color: theme.textStyles.text.color,\n                    fontSize: theme.textStyles.text.size,\n                    textAlign: \"center\",\n                    width: width,\n                  }}\n                  key={option.qualifiedCode}\n                >\n                  {option.content?.label}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((answer) => {\n            return (\n              <React.Fragment key={answer.qualifiedCode}>\n                <SCQArrayRow\n                  key={answer.qualifiedCode}\n                  answer={answer}\n                  choices={columns}\n                  width={width}\n                />\n              </React.Fragment>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction SCQArrayRow(props) {\n  const theme = useTheme();\n\n  const isDirty = useSelector(\n    (state) => state.templateState[props.answer.qualifiedCode]?.isDirty\n  );\n  const show_errors = useSelector(\n    (state) => state.runState.values.Survey.show_errors\n  );\n  const state = useSelector(\n    (state) => state.runState.values[props.answer.qualifiedCode]\n  );\n  const validity = React.useMemo(() => state?.validity, [state]);\n  const value = React.useMemo(() => state?.value, [state]);\n  const relevance = React.useMemo(() => state?.relevance, [state]);\n\n  const dispatch = useDispatch();\n\n  const handleChange = (value) => {\n    dispatch(\n      valueChange({\n        componentCode: props.answer.qualifiedCode,\n        value: value,\n      })\n    );\n  };\n\n  const invalid = (show_errors || isDirty) && validity === false;\n\n  return typeof relevance === \"undefined\" || relevance ? (\n    <React.Fragment>\n      <TableRow key={props.answer.code}>\n        <TableCell\n          sx={{\n            fontFamily: theme.textStyles.text.font,\n            color: theme.textStyles.text.color,\n            fontSize: theme.textStyles.text.size,\n            borderBottom: invalid ? \"0\" : \"\",\n            padding: \"2px\",\n          }}\n        >\n          {props.answer.content?.label}\n        </TableCell>\n        {props.choices.map((option) => {\n          return (\n            <TableCell\n              key={option.code}\n              component=\"th\"\n              scope=\"row\"\n              sx={{\n                borderBottom: invalid ? \"0\" : \"\",\n                padding: \"2px\",\n                width: props.width,\n              }}\n            >\n              <DynamicSvg\n                onIconClick={() => handleChange(option.code)}\n                imageHeight={\"64px\"}\n                isSelected={value == option.code}\n                theme={theme}\n                svgUrl={\n                  option?.resources?.icon\n                    ? buildResourceUrl(option?.resources?.icon)\n                    : undefined\n                }\n              />\n            </TableCell>\n          );\n        })}\n      </TableRow>\n      {invalid ? (\n        <TableRow>\n          <TableCell\n            sx={{ padding: \"2px\" }}\n            colSpan={props.choices ? props.choices.length + 1 : 1}\n          >\n            <Validation component={props.answer} />\n          </TableCell>\n        </TableRow>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  ) : (\n    \"\"\n  );\n}\n\nexport default SCQIconArray;\n"],"names":["SCQIconArray","props","theme","useTheme","width","columnMinWidth","columns","component","answers","filter","answer","type","rows","jsx","TableContainer","sx","overflowX","maxWidth","children","jsxs","Table","tableLayout","minWidth","length","TableHead","TableRow","TableCell","padding","map","option","_option$content","fontFamily","textStyles","text","font","color","fontSize","size","textAlign","content","label","qualifiedCode","TableBody","React","Fragment","SCQArrayRow","choices","_props$answer$content","isDirty","useSelector","state","templateState","_state2$templateState","show_errors","runState","values","Survey","validity","useMemo","value","relevance","dispatch","useDispatch","handleChange","valueChange","componentCode","invalid","borderBottom","_option$resources","_option$resources2","scope","DynamicSvg","onIconClick","code","imageHeight","isSelected","svgUrl","resources","icon","buildResourceUrl","colSpan","Validation"],"mappings":"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"}