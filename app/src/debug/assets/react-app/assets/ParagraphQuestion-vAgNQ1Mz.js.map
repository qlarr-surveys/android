{"version":3,"file":"ParagraphQuestion-vAgNQ1Mz.js","sources":["../../src/components/Questions/Paragraph/ParagraphQuestion.jsx"],"sourcesContent":["import React from \"react\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport TextareaAutosize from \"@mui/material/TextareaAutosize\";\n\nimport styles from \"./ParagraphQuestion.module.css\";\nimport { valueChange } from \"~/state/runState\";\nimport { setDirty } from \"~/state/templateState\";\nimport { TextField } from \"@mui/material\";\n\nfunction ParagraphQuestion(props) {\n  const state = useSelector((state) => {\n    let questionState = state.runState.values[props.component.qualifiedCode];\n    let show_errors = state.runState.values.Survey.show_errors;\n    let isDirty = state.templateState[props.component.qualifiedCode];\n    let validity = questionState?.validity;\n    let invalid = (show_errors || isDirty) && validity === false;\n    let value = questionState?.value || \"\";\n    return {\n      value: value,\n      wordCount: window.QlarrScripts\n        ? window.QlarrScripts.wordCount(value)\n        : 0,\n      invalid: invalid,\n    };\n  }, shallowEqual);\n  const dispatch = useDispatch();\n\n  const { t } = useTranslation(\"run\");\n\n  const handleChange = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n        value: event.target.value,\n      })\n    );\n  };\n\n  const lostFocus = (event) => {\n    dispatch(setDirty(event.target.name));\n  };\n\n  return (\n    <div className={styles.questionItem}>\n      <TextField\n        className={styles.paragraph}\n        required={\n          props.component.validation?.validation_required?.isActive\n            ? true\n            : false\n        }\n        multiline\n        id={props.component.qualifiedCode}\n        name={props.component.qualifiedCode}\n        minRows={props.component.minRows || 2}\n        label={props.component.content?.hint || \"\"}\n        onChange={handleChange}\n        onBlur={lostFocus}\n        value={state.value}\n      />\n      {props.component.showWordCount ? (\n        <div className={styles.wordCount}>\n          <span>{t(\"word_count\", { count: state.wordCount })}</span>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n\nexport default ParagraphQuestion;\n"],"names":["state","jsxs","jsx"],"mappings":";;;;;;;;;;;AAUA,SAAS,kBAAkB,OAAO;;AAC1B,QAAA,QAAQ,YAAY,CAACA,WAAU;AACnC,QAAI,gBAAgBA,OAAM,SAAS,OAAO,MAAM,UAAU,aAAa;AACvE,QAAI,cAAcA,OAAM,SAAS,OAAO,OAAO;AAC/C,QAAI,UAAUA,OAAM,cAAc,MAAM,UAAU,aAAa;AAC/D,QAAI,WAAW,+CAAe;AAC1B,QAAA,WAAW,eAAe,YAAY,aAAa;AACnD,QAAA,SAAQ,+CAAe,UAAS;AAC7B,WAAA;AAAA,MACL;AAAA,MACA,WAAW,OAAO,eACd,OAAO,aAAa,UAAU,KAAK,IACnC;AAAA,MACJ;AAAA,IAAA;AAAA,KAED,YAAY;AACf,QAAM,WAAW;AAEjB,QAAM,EAAE,EAAA,IAAM,eAAe,KAAK;AAE5B,QAAA,eAAe,CAAC,UAAU;AAC9B;AAAA,MACE,YAAY;AAAA,QACV,eAAe,MAAM,OAAO;AAAA,QAC5B,OAAO,MAAM,OAAO;AAAA,MAAA,CACrB;AAAA,IAAA;AAAA,EACH;AAGI,QAAA,YAAY,CAAC,UAAU;AAC3B,aAAS,SAAS,MAAM,OAAO,IAAI,CAAC;AAAA,EAAA;AAGtC,SACGC,kCAAAA,KAAA,OAAA,EAAI,WAAW,OAAO,cACrB,UAAA;AAAA,IAAAC,kCAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,WAAW,OAAO;AAAA,QAClB,YACE,iBAAM,UAAU,eAAhB,mBAA4B,wBAA5B,mBAAiD,YAC7C,OACA;AAAA,QAEN,WAAS;AAAA,QACT,IAAI,MAAM,UAAU;AAAA,QACpB,MAAM,MAAM,UAAU;AAAA,QACtB,SAAS,MAAM,UAAU,WAAW;AAAA,QACpC,SAAO,WAAM,UAAU,YAAhB,mBAAyB,SAAQ;AAAA,QACxC,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,OAAO,MAAM;AAAA,MAAA;AAAA,IACf;AAAA,IACC,MAAM,UAAU,sDACd,OAAI,EAAA,WAAW,OAAO,WACrB,UAAAA,kCAAA,IAAC,UAAM,UAAE,EAAA,cAAc,EAAE,OAAO,MAAM,WAAW,EAAA,CAAE,EACrD,CAAA,IAEA;AAAA,EAEJ,EAAA,CAAA;AAEJ;"}