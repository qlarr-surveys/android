{"version":3,"file":"Scq-legacy-6DTQDQA_.js","sources":["../../src/components/Questions/Scq/Scq.jsx"],"sourcesContent":["import React, { useRef } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport { useTheme } from \"@mui/material/styles\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Validation from \"~/components/run/Validation\";\nimport Radio from \"@mui/material/Radio\";\nimport { valueChange } from \"~/state/runState\";\nimport FormControl from \"@mui/material/FormControl\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport { Box } from \"@mui/material\";\nimport { setDirty } from \"~/state/templateState\";\n\nfunction SCQ(props) {\n  const state = useSelector((state) => {\n    let questionState = state.runState.values[props.component.qualifiedCode];\n    return {\n      value: questionState?.value || \"\",\n    };\n  }, shallowEqual);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n        value: event.target.value,\n      })\n    );\n  };\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup\n        name={props.component.qualifiedCode}\n        value={state.value}\n        onChange={handleChange}\n      >\n        {props.component.answers.map((option) => {\n          if (option.type === \"other\") {\n            return (\n              <ScqChoiceOther\n                parentCode={props.component.qualifiedCode}\n                key={option.qualifiedCode}\n                Choice={option}\n              />\n            );\n          } else {\n            return <ScqChoice key={option.qualifiedCode} Choice={option} />;\n          }\n        })}\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nfunction ScqChoice(props) {\n  const theme = useTheme();\n\n  const showChoice = () => {\n    return (\n      <FormControlLabel\n        key={props.Choice.qualifiedCode}\n        control={\n          <Radio\n            sx={{\n              color: theme.textStyles.text.color,\n            }}\n          />\n        }\n        label={\n          <Box\n            sx={{\n              fontFamily: theme.textStyles.text.font,\n              color: theme.textStyles.text.color,\n              fontSize: theme.textStyles.text.size,\n            }}\n          >\n            {props.Choice.content?.label}\n          </Box>\n        }\n        value={props.Choice.code}\n      />\n    );\n  };\n\n  return showChoice ? showChoice() : \"\";\n}\n\nfunction ScqChoiceOther(props) {\n  const theme = useTheme();\n  const nestedTextChild = props.Choice.answers[0];\n  const state = useSelector((state) => {\n    let choiceState = state.runState.values[props.Choice.qualifiedCode];\n    let childState = state.runState.values[nestedTextChild.qualifiedCode];\n    let show_errors = state.runState.values.Survey.show_errors;\n    let isChildDirty = state.templateState[nestedTextChild.qualifiedCode];\n    return {\n      showChoice:\n        typeof choiceState?.relevance === \"undefined\" || choiceState.relevance,\n      childInvalid:\n        (show_errors || isChildDirty) &&\n        childState?.relevance === true &&\n        childState?.validity === false,\n      value: childState?.value || \"\",\n    };\n  }, shallowEqual);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n        value: event.target.value,\n      })\n    );\n  };\n\n  const handleFocus = (event) => {\n    dispatch(\n      valueChange({ componentCode: props.parentCode, value: props.Choice.code })\n    );\n  };\n\n  const lostFocus = (event) => {\n    dispatch(setDirty(event.target.name));\n  };\n\n  const textInput = useRef();\n  const onButtonClick = (event) => {\n    if (event.target.checked) {\n      textInput.current.focus();\n    }\n  };\n\n  const showChoice = () => {\n    return (\n      <div className=\"text-left d-flex\">\n        <FormControlLabel\n          key={props.Choice.qualifiedCode}\n          control={<Radio\n            sx={{\n              color: theme.textStyles.text.color,\n            }}\n          />}\n          label={\n            <div className=\"w-100\">\n              <TextField\n                variant=\"standard\"\n                required={\n                  state.textChild?.relevance &&\n                  nestedTextChild.validation?.required\n                }\n                sx={{\n                  label: { color: theme.textStyles.text.color },\n                }}\n                inputRef={textInput}\n                id={nestedTextChild.qualifiedCode}\n                name={nestedTextChild.qualifiedCode}\n                label={props.Choice.content?.label}\n                onChange={handleChange}\n                onFocus={handleFocus}\n                onBlur={lostFocus}\n                value={state.value}\n                InputProps={{\n                  sx: {\n                    fontFamily: theme.textStyles.text.font,\n                    color: theme.textStyles.text.color,\n                    fontSize: theme.textStyles.text.size,\n                  },\n                }}\n                helperText={\n                  state.childInvalid ? (\n                    <Validation component={nestedTextChild} limit={1} />\n                  ) : (\n                    \"\"\n                  )\n                }\n              />\n            </div>\n          }\n          onChange={onButtonClick}\n          value={props.Choice.code}\n        />\n        <p />\n      </div>\n    );\n  };\n\n  return state.showChoice ? showChoice() : \"\";\n}\n\nexport default SCQ;\n"],"names":["SCQ","props","state","useSelector","questionState","runState","values","component","qualifiedCode","value","shallowEqual","dispatch","useDispatch","handleChange","event","valueChange","componentCode","target","name","jsx","FormControl","children","RadioGroup","onChange","answers","map","option","type","ScqChoiceOther","parentCode","Choice","ScqChoice","theme","useTheme","showChoice","_props$Choice$content","FormControlLabel","control","Radio","sx","color","textStyles","text","label","Box","fontFamily","font","fontSize","size","content","code","nestedTextChild","choiceState","childState","show_errors","Survey","isChildDirty","templateState","relevance","childInvalid","validity","handleFocus","lostFocus","setDirty","textInput","useRef","onButtonClick","checked","current","focus","_state$textChild","_nestedTextChild$vali","_props$Choice$content2","jsxs","className","TextField","variant","required","textChild","validation","inputRef","id","onFocus","onBlur","InputProps","helperText","Validation","limit"],"mappings":"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"}