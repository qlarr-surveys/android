{"version":3,"file":"SCQIconArray-legacy-Eymmu0eF.js","sources":["../../src/components/Questions/SCQArray/SCQIconArray.jsx"],"sourcesContent":["import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { useTheme } from \"@emotion/react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { valueChange } from \"~/state/runState\";\nimport Validation from \"~/components/run/Validation\";\nimport DynamicSvg from \"~/components/DynamicSvg\";\nimport { buildResourceUrl } from \"~/networking/common\";\nimport { TableHead } from \"@mui/material\";\n\nfunction SCQIconArray(props) {\n  const theme = useTheme();\n\n  let columns = props.component.answers.filter(\n    (answer) => answer.type == \"column\"\n  );\n  let rows = props.component.answers.filter((answer) => answer.type == \"row\");\n\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell key=\"content\"></TableCell>\n            {columns.map((option) => {\n              return (\n                <TableCell\n                  sx={{\n                    fontFamily: theme.textStyles.text.font,\n                    color: theme.textStyles.text.color,\n                    fontSize: theme.textStyles.text.size,\n                    textAlign: \"center\",\n                  }}\n                  key={option.qualifiedCode}\n                >\n                  {option.content?.label}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((answer) => {\n            return (\n              <React.Fragment key={answer.qualifiedCode}>\n                <SCQArrayRow\n                  key={answer.qualifiedCode}\n                  answer={answer}\n                  choices={columns}\n                />\n              </React.Fragment>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction SCQArrayRow(props) {\n  const theme = useTheme();\n\n  const isDirty = useSelector(\n    (state) => state.templateState[props.answer.qualifiedCode]?.isDirty\n  );\n  const show_errors = useSelector(\n    (state) => state.runState.values.Survey.show_errors\n  );\n  const state = useSelector(\n    (state) => state.runState.values[props.answer.qualifiedCode]\n  );\n  const validity = React.useMemo(() => state?.validity, [state]);\n  const value = React.useMemo(() => state?.value, [state]);\n  const relevance = React.useMemo(() => state?.relevance, [state]);\n\n  const dispatch = useDispatch();\n\n  const handleChange = (value) => {\n    dispatch(\n      valueChange({\n        componentCode: props.answer.qualifiedCode,\n        value: value,\n      })\n    );\n  };\n\n  const invalid = (show_errors || isDirty) && validity === false;\n\n  return typeof relevance === \"undefined\" || relevance ? (\n    <React.Fragment>\n      <TableRow key={props.answer.code}>\n        <TableCell\n          sx={{\n            fontFamily: theme.textStyles.text.font,\n            color: theme.textStyles.text.color,\n            fontSize: theme.textStyles.text.size,\n            borderBottom: invalid ? \"0\" : \"\",\n            padding: \"8px\",\n            position: \"sticky\",\n            left: 0,\n            zIndex: 1,\n            minWidth: \"60px\",\n\n          }}\n        >\n          {props.answer.content?.label}\n        </TableCell>\n        {props.choices.map((option) => {\n          return (\n            <TableCell\n              key={option.code}\n              component=\"th\"\n              scope=\"row\"\n              sx={{\n                borderBottom: invalid ? \"0\" : \"\",\n                padding: \"8px\",\n              }}\n            >\n              <DynamicSvg\n                onIconClick={() => handleChange(option.code)}\n                imageHeight={\"64px\"}\n                isSelected={value == option.code}\n                theme={theme}\n                svgUrl={\n                  option?.resources?.icon\n                    ? buildResourceUrl(option?.resources?.icon)\n                    : undefined\n                }\n              />\n            </TableCell>\n          );\n        })}\n      </TableRow>\n      {invalid ? (\n        <TableRow>\n          <TableCell\n            sx={{ padding: \"8px\" }}\n            colSpan={props.choices ? props.choices.length + 1 : 1}\n          >\n            <Validation component={props.answer} />\n          </TableCell>\n        </TableRow>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  ) : (\n    \"\"\n  );\n}\n\nexport default SCQIconArray;\n"],"names":["SCQIconArray","props","theme","useTheme","columns","component","answers","filter","answer","type","rows","jsx","TableContainer","children","jsxs","Table","TableHead","TableRow","TableCell","map","option","_option$content","sx","fontFamily","textStyles","text","font","color","fontSize","size","textAlign","content","label","qualifiedCode","TableBody","React","Fragment","SCQArrayRow","choices","_props$answer$content","isDirty","useSelector","state","templateState","_state2$templateState","show_errors","runState","values","Survey","validity","useMemo","value","relevance","dispatch","useDispatch","handleChange","valueChange","componentCode","invalid","borderBottom","padding","position","left","zIndex","minWidth","_option$resources","_option$resources2","scope","DynamicSvg","onIconClick","code","imageHeight","isSelected","svgUrl","resources","icon","buildResourceUrl","colSpan","length","Validation"],"mappings":"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"}