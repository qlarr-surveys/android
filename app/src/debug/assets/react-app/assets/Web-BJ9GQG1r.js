const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-Ct665bQK.js","assets/index-BXKg_X9w.js","assets/index-CoUo3s5p.css","assets/Delete-CGrSv7M_.js","assets/use-service-D_BNczvS.js","assets/use-service-DwBCS-1d.css","assets/DateUtils-D9XCaXee.js","assets/Tabs-C8JT5hpD.js","assets/TableRow-D6Acb3fE.js","assets/TableCell-Di9qFQzs.js","assets/tableRowClasses-B1HVMYOB.js","assets/TablePagination-DYBvoZJZ.js","assets/Toolbar-CZ6sMNbC.js","assets/Checkbox-DSC03rz9.js","assets/SwitchBase-BqqZbFu5.js","assets/radioClasses-B6tZog_h.js","assets/TextField-WQpbUAds.js","assets/FormControlLabel-i6VTBdFM.js","assets/index-CJ9lbdKb.css","assets/index-D1ggAoGZ.js","assets/index-PeLvE506.js","assets/index-LFjYGgJu.js","assets/index-CFFrfAwV.js","assets/dayjs.min-BYuDNZGJ.js","assets/DateTimePicker-CBtVfPsg.js","assets/InputAdornment-CnebZoW9.js","assets/survey-B8WvHOv0.js","assets/index-CQIINAAR.js","assets/common-Bl2TiDan.js","assets/index-DQnYX5Do.css","assets/index-CQPYgnOI.js","assets/isTouchDevice-BxjlknWP.js","assets/Image-CE4vE1Da.js","assets/Image-D_AjlMEB.css","assets/Radio-C05RY_Qz.js","assets/RadioGroupContext-C8tgogbD.js","assets/useDrop-eT_s750g.js","assets/index-DsxU1XV0.js","assets/index-C1bvT1wp.js","assets/index-_2rZ8I_A.css","assets/DatePicker-wBwy_29S.js","assets/Card-BxTiTrtS.js","assets/use-boolean-DmRxK5TP.js","assets/index-DCF2BXKY.css","assets/index-D0_MXkK0.js","assets/index-DNabgenT.css","assets/index-CVvzllyt.js","assets/yup-DOqXNEId.js","assets/router-link-WGW5BBjn.js","assets/Check-CzItDdan.js","assets/Link-B6OA4b9x.js","assets/index-DM_q9pq0.css","assets/index-DkwXoLjM.js","assets/index-CsEUyNpt.js","assets/CardMedia-naaIupyv.js","assets/Divider-Dlzogn56.js","assets/index-Cjs-_wQa.css","assets/index-Dbypx-LI.js","assets/index-D3A8ta7E.js","assets/index-Cw7h46Lm.css","assets/index-C21aYqNv.js","assets/index-DcxnSa-8.css","assets/index-BTbhsMIE.js","assets/FormGroup-oSWhZBRb.js","assets/index-dYrCusrS.css","assets/index-DAoruMCC.js","assets/index-_5kp2L-s.css"])))=>i.map(i=>d[i]);
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a, _b, _c, _d, _e;
import { _ as _extends$1, c as createTheme, r as reactExports, a as useTheme, e as extendSxProp, b as _objectWithoutPropertiesLoose, j as jsxRuntimeExports, d as clsx, g as generateUtilityClass, f as generateUtilityClasses, h as capitalize, i as darken_1, l as lighten_1, k as alpha_1, m as keyframes, n as css, o as emphasize_1, p as commonjsGlobal, q as interopRequireDefaultExports, s as useNavigate, t as useLocation, R as React, B as Box, v as createCache, C as CacheProvider, w as getDefaultExportFromCjs, x as createTheme$1, y as useTheme$2, L as Link, z as __vitePreload, u as useParams, A as LoadingDots, D as useSearchParams, E as Routes, F as Route, N as Navigate } from "./index-BXKg_X9w.js";
import { s as styled, i as isMuiElement, u as useThemeProps, c as composeClasses, a as resolveComponentProps, m as mergeSlotProps, b as useForkRef, d as appendOwnerState, e as createSvgIcon, f as styled$1, h as Paper, j as useDefaultProps, I as IconButton, B as ButtonBase, k as useEventCallback, o as ownerDocument, G as GlobalStyles, T as Typography, l as rootShouldForwardProp, L as ListContext, n as useEnhancedEffect, p as isHostComponent, q as getListItemIconUtilityClass, t as useTimeout, v as extractEventHandlers, w as useTheme$1, x as useSlotProps, y as Grow, z as useRtl, A as useControlled, C as useId, D as useIsFocusVisible, E as Timeout, F as propTypesExports, H as useSelector, J as TokenService, K as requireCreateSvgIcon, M as useTranslation, S as Select, N as MenuItem, O as setDocumentLang, Q as useService, R as useDispatch, U as isSessionRtl, V as Menu, W as routes, X as MANAGE_SURVEY_LANDING_PAGES, Y as setLoading, Z as ErrorLayout, _ as onEditErrorSeen, $ as grey, a0 as alpha, a1 as PropTypes, a2 as stylisRTLPlugin, a3 as primary, a4 as info, a5 as secondary, a6 as success, a7 as warning, a8 as error, a9 as menuItemClasses, aa as dividerClasses, ab as drawerClasses, ac as svgIconClasses, ad as buttonClasses, ae as listClasses, af as SvgIcon, ag as paperClasses, ah as listItemIconClasses, ai as iconButtonClasses, aj as formControlClasses, ak as inputBaseClasses, al as outlinedInputClasses, am as filledInputClasses, an as typographyClasses, ao as rtlLanguage, ap as palette, aq as ThemeProvider$1, ar as CompactLayout, as as Image$1, at as setLangFromSession, au as cacheRtl, P as Provider, av as manageStore, aw as FormControl, ax as LANGUAGE_DEF, ay as changeLang, az as onBaseLangChanged, aA as onAdditionalLangAdded, aB as onAdditionalLangRemoved, aC as Button, aD as List, aE as resetSetup, aF as onAddComponentsVisibilityChange, aG as GetData, aH as surveyReceived, aI as designStateReceived, aJ as Container, aK as Stack, aL as Modal, aM as PROCESSED_ERRORS, g as getparam, aN as Close$1, aO as PREVIEW_MODE, aP as SurveyIcon, aQ as BG_COLOR, r as runStore } from "./use-service-D_BNczvS.js";
import { c as checkboxClasses, C as Checkbox } from "./Checkbox-DSC03rz9.js";
import { D as DialogContext, g as getDialogTitleUtilityClass, P as Popper, t as tabClasses, a as Dialog, b as DialogContent, u as useMediaQuery, T as Tabs, c as Tab } from "./Tabs-C8JT5hpD.js";
import { r as radioClasses } from "./radioClasses-B6tZog_h.js";
import { t as tableRowClasses, a as tableCellClasses } from "./tableRowClasses-B1HVMYOB.js";
import { i as inputLabelClasses, I as InputLabel, F as FormLabel, a as FormHelperText, T as TextField } from "./TextField-WQpbUAds.js";
import { F as FormControlLabel } from "./FormControlLabel-i6VTBdFM.js";
import { S as SwitchBase } from "./SwitchBase-BqqZbFu5.js";
const filterBreakpointKeys = (breakpointsKeys, responsiveKeys) => breakpointsKeys.filter((key2) => responsiveKeys.includes(key2));
const traverseBreakpoints = (breakpoints, responsive, iterator2) => {
  const smallestBreakpoint = breakpoints.keys[0];
  if (Array.isArray(responsive)) {
    responsive.forEach((breakpointValue, index2) => {
      iterator2((responsiveStyles, style) => {
        if (index2 <= breakpoints.keys.length - 1) {
          if (index2 === 0) {
            Object.assign(responsiveStyles, style);
          } else {
            responsiveStyles[breakpoints.up(breakpoints.keys[index2])] = style;
          }
        }
      }, breakpointValue);
    });
  } else if (responsive && typeof responsive === "object") {
    const keys2 = Object.keys(responsive).length > breakpoints.keys.length ? breakpoints.keys : filterBreakpointKeys(breakpoints.keys, Object.keys(responsive));
    keys2.forEach((key2) => {
      if (breakpoints.keys.indexOf(key2) !== -1) {
        const breakpointValue = responsive[key2];
        if (breakpointValue !== void 0) {
          iterator2((responsiveStyles, style) => {
            if (smallestBreakpoint === key2) {
              Object.assign(responsiveStyles, style);
            } else {
              responsiveStyles[breakpoints.up(key2)] = style;
            }
          }, breakpointValue);
        }
      }
    });
  } else if (typeof responsive === "number" || typeof responsive === "string") {
    iterator2((responsiveStyles, style) => {
      Object.assign(responsiveStyles, style);
    }, responsive);
  }
};
function appendLevel(level) {
  if (!level) {
    return "";
  }
  return "Level".concat(level);
}
function isNestedContainer(ownerState) {
  return ownerState.unstable_level > 0 && ownerState.container;
}
function createGetSelfSpacing(ownerState) {
  return function getSelfSpacing(axis) {
    return "var(--Grid-".concat(axis, "Spacing").concat(appendLevel(ownerState.unstable_level), ")");
  };
}
function createGetParentSpacing(ownerState) {
  return function getParentSpacing(axis) {
    if (ownerState.unstable_level === 0) {
      return "var(--Grid-".concat(axis, "Spacing)");
    }
    return "var(--Grid-".concat(axis, "Spacing").concat(appendLevel(ownerState.unstable_level - 1), ")");
  };
}
function getParentColumns(ownerState) {
  if (ownerState.unstable_level === 0) {
    return "var(--Grid-columns)";
  }
  return "var(--Grid-columns".concat(appendLevel(ownerState.unstable_level - 1), ")");
}
const generateGridSizeStyles = ({
  theme,
  ownerState
}) => {
  const getSelfSpacing = createGetSelfSpacing(ownerState);
  const styles2 = {};
  traverseBreakpoints(theme.breakpoints, ownerState.gridSize, (appendStyle, value2) => {
    let style = {};
    if (value2 === true) {
      style = {
        flexBasis: 0,
        flexGrow: 1,
        maxWidth: "100%"
      };
    }
    if (value2 === "auto") {
      style = {
        flexBasis: "auto",
        flexGrow: 0,
        flexShrink: 0,
        maxWidth: "none",
        width: "auto"
      };
    }
    if (typeof value2 === "number") {
      style = {
        flexGrow: 0,
        flexBasis: "auto",
        width: "calc(100% * ".concat(value2, " / ").concat(getParentColumns(ownerState)).concat(isNestedContainer(ownerState) ? " + ".concat(getSelfSpacing("column")) : "", ")")
      };
    }
    appendStyle(styles2, style);
  });
  return styles2;
};
const generateGridOffsetStyles = ({
  theme,
  ownerState
}) => {
  const styles2 = {};
  traverseBreakpoints(theme.breakpoints, ownerState.gridOffset, (appendStyle, value2) => {
    let style = {};
    if (value2 === "auto") {
      style = {
        marginLeft: "auto"
      };
    }
    if (typeof value2 === "number") {
      style = {
        marginLeft: value2 === 0 ? "0px" : "calc(100% * ".concat(value2, " / ").concat(getParentColumns(ownerState), ")")
      };
    }
    appendStyle(styles2, style);
  });
  return styles2;
};
const generateGridColumnsStyles = ({
  theme,
  ownerState
}) => {
  if (!ownerState.container) {
    return {};
  }
  const styles2 = isNestedContainer(ownerState) ? {
    ["--Grid-columns".concat(appendLevel(ownerState.unstable_level))]: getParentColumns(ownerState)
  } : {
    "--Grid-columns": 12
  };
  traverseBreakpoints(theme.breakpoints, ownerState.columns, (appendStyle, value2) => {
    appendStyle(styles2, {
      ["--Grid-columns".concat(appendLevel(ownerState.unstable_level))]: value2
    });
  });
  return styles2;
};
const generateGridRowSpacingStyles = ({
  theme,
  ownerState
}) => {
  if (!ownerState.container) {
    return {};
  }
  const getParentSpacing = createGetParentSpacing(ownerState);
  const styles2 = isNestedContainer(ownerState) ? {
    // Set the default spacing as its parent spacing.
    // It will be overridden if spacing props are provided
    ["--Grid-rowSpacing".concat(appendLevel(ownerState.unstable_level))]: getParentSpacing("row")
  } : {};
  traverseBreakpoints(theme.breakpoints, ownerState.rowSpacing, (appendStyle, value2) => {
    var _theme$spacing;
    appendStyle(styles2, {
      ["--Grid-rowSpacing".concat(appendLevel(ownerState.unstable_level))]: typeof value2 === "string" ? value2 : (_theme$spacing = theme.spacing) == null ? void 0 : _theme$spacing.call(theme, value2)
    });
  });
  return styles2;
};
const generateGridColumnSpacingStyles = ({
  theme,
  ownerState
}) => {
  if (!ownerState.container) {
    return {};
  }
  const getParentSpacing = createGetParentSpacing(ownerState);
  const styles2 = isNestedContainer(ownerState) ? {
    // Set the default spacing as its parent spacing.
    // It will be overridden if spacing props are provided
    ["--Grid-columnSpacing".concat(appendLevel(ownerState.unstable_level))]: getParentSpacing("column")
  } : {};
  traverseBreakpoints(theme.breakpoints, ownerState.columnSpacing, (appendStyle, value2) => {
    var _theme$spacing2;
    appendStyle(styles2, {
      ["--Grid-columnSpacing".concat(appendLevel(ownerState.unstable_level))]: typeof value2 === "string" ? value2 : (_theme$spacing2 = theme.spacing) == null ? void 0 : _theme$spacing2.call(theme, value2)
    });
  });
  return styles2;
};
const generateGridDirectionStyles = ({
  theme,
  ownerState
}) => {
  if (!ownerState.container) {
    return {};
  }
  const styles2 = {};
  traverseBreakpoints(theme.breakpoints, ownerState.direction, (appendStyle, value2) => {
    appendStyle(styles2, {
      flexDirection: value2
    });
  });
  return styles2;
};
const generateGridStyles = ({
  ownerState
}) => {
  const getSelfSpacing = createGetSelfSpacing(ownerState);
  const getParentSpacing = createGetParentSpacing(ownerState);
  return _extends$1({
    minWidth: 0,
    boxSizing: "border-box"
  }, ownerState.container && _extends$1({
    display: "flex",
    flexWrap: "wrap"
  }, ownerState.wrap && ownerState.wrap !== "wrap" && {
    flexWrap: ownerState.wrap
  }, {
    margin: "calc(".concat(getSelfSpacing("row"), " / -2) calc(").concat(getSelfSpacing("column"), " / -2)")
  }, ownerState.disableEqualOverflow && {
    margin: "calc(".concat(getSelfSpacing("row"), " * -1) 0px 0px calc(").concat(getSelfSpacing("column"), " * -1)")
  }), (!ownerState.container || isNestedContainer(ownerState)) && _extends$1({
    padding: "calc(".concat(getParentSpacing("row"), " / 2) calc(").concat(getParentSpacing("column"), " / 2)")
  }, (ownerState.disableEqualOverflow || ownerState.parentDisableEqualOverflow) && {
    padding: "".concat(getParentSpacing("row"), " 0px 0px ").concat(getParentSpacing("column"))
  }));
};
const generateSizeClassNames = (gridSize) => {
  const classNames = [];
  Object.entries(gridSize).forEach(([key2, value2]) => {
    if (value2 !== false && value2 !== void 0) {
      classNames.push("grid-".concat(key2, "-").concat(String(value2)));
    }
  });
  return classNames;
};
const generateSpacingClassNames = (spacing, smallestBreakpoint = "xs") => {
  function isValidSpacing(val2) {
    if (val2 === void 0) {
      return false;
    }
    return typeof val2 === "string" && !Number.isNaN(Number(val2)) || typeof val2 === "number" && val2 > 0;
  }
  if (isValidSpacing(spacing)) {
    return ["spacing-".concat(smallestBreakpoint, "-").concat(String(spacing))];
  }
  if (typeof spacing === "object" && !Array.isArray(spacing)) {
    const classNames = [];
    Object.entries(spacing).forEach(([key2, value2]) => {
      if (isValidSpacing(value2)) {
        classNames.push("spacing-".concat(key2, "-").concat(String(value2)));
      }
    });
    return classNames;
  }
  return [];
};
const generateDirectionClasses = (direction) => {
  if (direction === void 0) {
    return [];
  }
  if (typeof direction === "object") {
    return Object.entries(direction).map(([key2, value2]) => "direction-".concat(key2, "-").concat(value2));
  }
  return ["direction-xs-".concat(String(direction))];
};
const _excluded$d = ["className", "children", "columns", "container", "component", "direction", "wrap", "spacing", "rowSpacing", "columnSpacing", "disableEqualOverflow", "unstable_level"];
const defaultTheme = createTheme();
const defaultCreateStyledComponent = styled("div", {
  name: "MuiGrid",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
});
function useThemePropsDefault(props) {
  return useThemeProps({
    props,
    name: "MuiGrid",
    defaultTheme
  });
}
function createGrid(options = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent = defaultCreateStyledComponent,
    useThemeProps: useThemeProps2 = useThemePropsDefault,
    componentName = "MuiGrid"
  } = options;
  const GridOverflowContext = /* @__PURE__ */ reactExports.createContext(void 0);
  const useUtilityClasses2 = (ownerState, theme) => {
    const {
      container: container2,
      direction,
      spacing,
      wrap: wrap2,
      gridSize
    } = ownerState;
    const slots = {
      root: ["root", container2 && "container", wrap2 !== "wrap" && "wrap-xs-".concat(String(wrap2)), ...generateDirectionClasses(direction), ...generateSizeClassNames(gridSize), ...container2 ? generateSpacingClassNames(spacing, theme.breakpoints.keys[0]) : []]
    };
    return composeClasses(slots, (slot) => generateUtilityClass(componentName, slot), {});
  };
  const GridRoot = createStyledComponent(generateGridColumnsStyles, generateGridColumnSpacingStyles, generateGridRowSpacingStyles, generateGridSizeStyles, generateGridDirectionStyles, generateGridStyles, generateGridOffsetStyles);
  const Grid = /* @__PURE__ */ reactExports.forwardRef(function Grid22(inProps, ref) {
    var _inProps$columns, _inProps$spacing, _ref, _inProps$rowSpacing, _ref2, _inProps$columnSpacin, _ref3, _disableEqualOverflow;
    const theme = useTheme();
    const themeProps = useThemeProps2(inProps);
    const props = extendSxProp(themeProps);
    const overflow = reactExports.useContext(GridOverflowContext);
    const {
      className,
      children,
      columns: columnsProp = 12,
      container: container2 = false,
      component = "div",
      direction = "row",
      wrap: wrap2 = "wrap",
      spacing: spacingProp = 0,
      rowSpacing: rowSpacingProp = spacingProp,
      columnSpacing: columnSpacingProp = spacingProp,
      disableEqualOverflow: themeDisableEqualOverflow,
      unstable_level: level = 0
    } = props, rest = _objectWithoutPropertiesLoose(props, _excluded$d);
    let disableEqualOverflow = themeDisableEqualOverflow;
    if (level && themeDisableEqualOverflow !== void 0) {
      disableEqualOverflow = inProps.disableEqualOverflow;
    }
    const gridSize = {};
    const gridOffset = {};
    const other = {};
    Object.entries(rest).forEach(([key2, val2]) => {
      if (theme.breakpoints.values[key2] !== void 0) {
        gridSize[key2] = val2;
      } else if (theme.breakpoints.values[key2.replace("Offset", "")] !== void 0) {
        gridOffset[key2.replace("Offset", "")] = val2;
      } else {
        other[key2] = val2;
      }
    });
    const columns = (_inProps$columns = inProps.columns) != null ? _inProps$columns : level ? void 0 : columnsProp;
    const spacing = (_inProps$spacing = inProps.spacing) != null ? _inProps$spacing : level ? void 0 : spacingProp;
    const rowSpacing = (_ref = (_inProps$rowSpacing = inProps.rowSpacing) != null ? _inProps$rowSpacing : inProps.spacing) != null ? _ref : level ? void 0 : rowSpacingProp;
    const columnSpacing = (_ref2 = (_inProps$columnSpacin = inProps.columnSpacing) != null ? _inProps$columnSpacin : inProps.spacing) != null ? _ref2 : level ? void 0 : columnSpacingProp;
    const ownerState = _extends$1({}, props, {
      level,
      columns,
      container: container2,
      direction,
      wrap: wrap2,
      spacing,
      rowSpacing,
      columnSpacing,
      gridSize,
      gridOffset,
      disableEqualOverflow: (_ref3 = (_disableEqualOverflow = disableEqualOverflow) != null ? _disableEqualOverflow : overflow) != null ? _ref3 : false,
      // use context value if exists.
      parentDisableEqualOverflow: overflow
      // for nested grid
    });
    const classes = useUtilityClasses2(ownerState, theme);
    let result = /* @__PURE__ */ jsxRuntimeExports.jsx(GridRoot, _extends$1({
      ref,
      as: component,
      ownerState,
      className: clsx(classes.root, className)
    }, other, {
      children: reactExports.Children.map(children, (child) => {
        if (/* @__PURE__ */ reactExports.isValidElement(child) && isMuiElement(child, ["Grid"])) {
          var _child$props$unstable;
          return /* @__PURE__ */ reactExports.cloneElement(child, {
            unstable_level: (_child$props$unstable = child.props.unstable_level) != null ? _child$props$unstable : level + 1
          });
        }
        return child;
      })
    }));
    if (disableEqualOverflow !== void 0 && disableEqualOverflow !== (overflow != null ? overflow : false)) {
      result = /* @__PURE__ */ jsxRuntimeExports.jsx(GridOverflowContext.Provider, {
        value: disableEqualOverflow,
        children: result
      });
    }
    return result;
  });
  Grid.muiName = "Grid";
  return Grid;
}
const _excluded$c = ["className", "elementType", "ownerState", "externalForwardedProps", "getSlotOwnerState", "internalForwardedProps"], _excluded2$2 = ["component", "slots", "slotProps"], _excluded3 = ["component"];
function useSlot(name2, parameters) {
  const {
    className,
    elementType: initialElementType,
    ownerState,
    externalForwardedProps,
    getSlotOwnerState,
    internalForwardedProps
  } = parameters, useSlotPropsParams = _objectWithoutPropertiesLoose(parameters, _excluded$c);
  const {
    component: rootComponent,
    slots = {
      [name2]: void 0
    },
    slotProps = {
      [name2]: void 0
    }
  } = externalForwardedProps, other = _objectWithoutPropertiesLoose(externalForwardedProps, _excluded2$2);
  const elementType = slots[name2] || initialElementType;
  const resolvedComponentsProps = resolveComponentProps(slotProps[name2], ownerState);
  const _mergeSlotProps = mergeSlotProps(_extends$1({
    className
  }, useSlotPropsParams, {
    externalForwardedProps: name2 === "root" ? other : void 0,
    externalSlotProps: resolvedComponentsProps
  })), {
    props: {
      component: slotComponent
    },
    internalRef
  } = _mergeSlotProps, mergedProps = _objectWithoutPropertiesLoose(_mergeSlotProps.props, _excluded3);
  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);
  const slotOwnerState = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {};
  const finalOwnerState = _extends$1({}, ownerState, slotOwnerState);
  const LeafComponent = name2 === "root" ? slotComponent || rootComponent : slotComponent;
  const props = appendOwnerState(elementType, _extends$1({}, name2 === "root" && !rootComponent && !slots[name2] && internalForwardedProps, name2 !== "root" && !slots[name2] && internalForwardedProps, mergedProps, LeafComponent && {
    as: LeafComponent
  }, {
    ref
  }), finalOwnerState);
  Object.keys(slotOwnerState).forEach((propName) => {
    delete props[propName];
  });
  return [elementType, props];
}
function getAccordionUtilityClass(slot) {
  return generateUtilityClass("MuiAccordion", slot);
}
const accordionClasses = generateUtilityClasses("MuiAccordion", ["root", "rounded", "expanded", "disabled", "gutters", "region"]);
function getAccordionSummaryUtilityClass(slot) {
  return generateUtilityClass("MuiAccordionSummary", slot);
}
const accordionSummaryClasses = generateUtilityClasses("MuiAccordionSummary", ["root", "expanded", "focusVisible", "disabled", "gutters", "contentGutters", "content", "expandIconWrapper"]);
function getAlertUtilityClass(slot) {
  return generateUtilityClass("MuiAlert", slot);
}
const alertClasses = generateUtilityClasses("MuiAlert", ["root", "action", "icon", "message", "filled", "colorSuccess", "colorInfo", "colorWarning", "colorError", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
const SuccessOutlinedIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
}), "SuccessOutlined");
const ReportProblemOutlinedIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
}), "ReportProblemOutlined");
const ErrorOutlineIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}), "ErrorOutline");
const InfoOutlinedIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
}), "InfoOutlined");
const ClearIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close");
const _excluded$b = ["action", "children", "className", "closeText", "color", "components", "componentsProps", "icon", "iconMapping", "onClose", "role", "severity", "slotProps", "slots", "variant"];
const useUtilityClasses$b = (ownerState) => {
  const {
    variant,
    color,
    severity,
    classes
  } = ownerState;
  const slots = {
    root: ["root", "color".concat(capitalize(color || severity)), "".concat(variant).concat(capitalize(color || severity)), "".concat(variant)],
    icon: ["icon"],
    message: ["message"],
    action: ["action"]
  };
  return composeClasses(slots, getAlertUtilityClass, classes);
};
const AlertRoot = styled$1(Paper, {
  name: "MuiAlert",
  slot: "Root",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, styles2[ownerState.variant], styles2["".concat(ownerState.variant).concat(capitalize(ownerState.color || ownerState.severity))]];
  }
})(({
  theme
}) => {
  const getColor = theme.palette.mode === "light" ? darken_1 : lighten_1;
  const getBackgroundColor = theme.palette.mode === "light" ? lighten_1 : darken_1;
  return _extends$1({}, theme.typography.body2, {
    backgroundColor: "transparent",
    display: "flex",
    padding: "6px 16px",
    variants: [...Object.entries(theme.palette).filter(([, value2]) => value2.main && value2.light).map(([color]) => ({
      props: {
        colorSeverity: color,
        variant: "standard"
      },
      style: {
        color: theme.vars ? theme.vars.palette.Alert["".concat(color, "Color")] : getColor(theme.palette[color].light, 0.6),
        backgroundColor: theme.vars ? theme.vars.palette.Alert["".concat(color, "StandardBg")] : getBackgroundColor(theme.palette[color].light, 0.9),
        ["& .".concat(alertClasses.icon)]: theme.vars ? {
          color: theme.vars.palette.Alert["".concat(color, "IconColor")]
        } : {
          color: theme.palette[color].main
        }
      }
    })), ...Object.entries(theme.palette).filter(([, value2]) => value2.main && value2.light).map(([color]) => ({
      props: {
        colorSeverity: color,
        variant: "outlined"
      },
      style: {
        color: theme.vars ? theme.vars.palette.Alert["".concat(color, "Color")] : getColor(theme.palette[color].light, 0.6),
        border: "1px solid ".concat((theme.vars || theme).palette[color].light),
        ["& .".concat(alertClasses.icon)]: theme.vars ? {
          color: theme.vars.palette.Alert["".concat(color, "IconColor")]
        } : {
          color: theme.palette[color].main
        }
      }
    })), ...Object.entries(theme.palette).filter(([, value2]) => value2.main && value2.dark).map(([color]) => ({
      props: {
        colorSeverity: color,
        variant: "filled"
      },
      style: _extends$1({
        fontWeight: theme.typography.fontWeightMedium
      }, theme.vars ? {
        color: theme.vars.palette.Alert["".concat(color, "FilledColor")],
        backgroundColor: theme.vars.palette.Alert["".concat(color, "FilledBg")]
      } : {
        backgroundColor: theme.palette.mode === "dark" ? theme.palette[color].dark : theme.palette[color].main,
        color: theme.palette.getContrastText(theme.palette[color].main)
      })
    }))]
  });
});
const AlertIcon = styled$1("div", {
  name: "MuiAlert",
  slot: "Icon",
  overridesResolver: (props, styles2) => styles2.icon
})({
  marginRight: 12,
  padding: "7px 0",
  display: "flex",
  fontSize: 22,
  opacity: 0.9
});
const AlertMessage = styled$1("div", {
  name: "MuiAlert",
  slot: "Message",
  overridesResolver: (props, styles2) => styles2.message
})({
  padding: "8px 0",
  minWidth: 0,
  overflow: "auto"
});
const AlertAction = styled$1("div", {
  name: "MuiAlert",
  slot: "Action",
  overridesResolver: (props, styles2) => styles2.action
})({
  display: "flex",
  alignItems: "flex-start",
  padding: "4px 0 0 16px",
  marginLeft: "auto",
  marginRight: -8
});
const defaultIconMapping = {
  success: /* @__PURE__ */ jsxRuntimeExports.jsx(SuccessOutlinedIcon, {
    fontSize: "inherit"
  }),
  warning: /* @__PURE__ */ jsxRuntimeExports.jsx(ReportProblemOutlinedIcon, {
    fontSize: "inherit"
  }),
  error: /* @__PURE__ */ jsxRuntimeExports.jsx(ErrorOutlineIcon, {
    fontSize: "inherit"
  }),
  info: /* @__PURE__ */ jsxRuntimeExports.jsx(InfoOutlinedIcon, {
    fontSize: "inherit"
  })
};
const Alert = /* @__PURE__ */ reactExports.forwardRef(function Alert2(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: "MuiAlert"
  });
  const {
    action: action2,
    children,
    className,
    closeText = "Close",
    color,
    components = {},
    componentsProps = {},
    icon: icon2,
    iconMapping = defaultIconMapping,
    onClose,
    role = "alert",
    severity = "success",
    slotProps = {},
    slots = {},
    variant = "standard"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded$b);
  const ownerState = _extends$1({}, props, {
    color,
    severity,
    variant,
    colorSeverity: color || severity
  });
  const classes = useUtilityClasses$b(ownerState);
  const externalForwardedProps = {
    slots: _extends$1({
      closeButton: components.CloseButton,
      closeIcon: components.CloseIcon
    }, slots),
    slotProps: _extends$1({}, componentsProps, slotProps)
  };
  const [CloseButtonSlot, closeButtonProps] = useSlot("closeButton", {
    elementType: IconButton,
    externalForwardedProps,
    ownerState
  });
  const [CloseIconSlot, closeIconProps] = useSlot("closeIcon", {
    elementType: ClearIcon,
    externalForwardedProps,
    ownerState
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(AlertRoot, _extends$1({
    role,
    elevation: 0,
    ownerState,
    className: clsx(classes.root, className),
    ref
  }, other, {
    children: [icon2 !== false ? /* @__PURE__ */ jsxRuntimeExports.jsx(AlertIcon, {
      ownerState,
      className: classes.icon,
      children: icon2 || iconMapping[severity] || defaultIconMapping[severity]
    }) : null, /* @__PURE__ */ jsxRuntimeExports.jsx(AlertMessage, {
      ownerState,
      className: classes.message,
      children
    }), action2 != null ? /* @__PURE__ */ jsxRuntimeExports.jsx(AlertAction, {
      ownerState,
      className: classes.action,
      children: action2
    }) : null, action2 == null && onClose ? /* @__PURE__ */ jsxRuntimeExports.jsx(AlertAction, {
      ownerState,
      className: classes.action,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(CloseButtonSlot, _extends$1({
        size: "small",
        "aria-label": closeText,
        title: closeText,
        color: "inherit",
        onClick: onClose
      }, closeButtonProps, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIconSlot, _extends$1({
          fontSize: "small"
        }, closeIconProps))
      }))
    }) : null]
  }));
});
const CancelIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
}), "Cancel");
function getChipUtilityClass(slot) {
  return generateUtilityClass("MuiChip", slot);
}
const chipClasses = generateUtilityClasses("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
const _excluded$a = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"];
const useUtilityClasses$a = (ownerState) => {
  const {
    classes,
    disabled,
    size,
    color,
    iconColor,
    onDelete,
    clickable,
    variant
  } = ownerState;
  const slots = {
    root: ["root", variant, disabled && "disabled", "size".concat(capitalize(size)), "color".concat(capitalize(color)), clickable && "clickable", clickable && "clickableColor".concat(capitalize(color)), onDelete && "deletable", onDelete && "deletableColor".concat(capitalize(color)), "".concat(variant).concat(capitalize(color))],
    label: ["label", "label".concat(capitalize(size))],
    avatar: ["avatar", "avatar".concat(capitalize(size)), "avatarColor".concat(capitalize(color))],
    icon: ["icon", "icon".concat(capitalize(size)), "iconColor".concat(capitalize(iconColor))],
    deleteIcon: ["deleteIcon", "deleteIcon".concat(capitalize(size)), "deleteIconColor".concat(capitalize(color)), "deleteIcon".concat(capitalize(variant), "Color").concat(capitalize(color))]
  };
  return composeClasses(slots, getChipUtilityClass, classes);
};
const ChipRoot = styled$1("div", {
  name: "MuiChip",
  slot: "Root",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    const {
      color,
      iconColor,
      clickable,
      onDelete,
      size,
      variant
    } = ownerState;
    return [{
      ["& .".concat(chipClasses.avatar)]: styles2.avatar
    }, {
      ["& .".concat(chipClasses.avatar)]: styles2["avatar".concat(capitalize(size))]
    }, {
      ["& .".concat(chipClasses.avatar)]: styles2["avatarColor".concat(capitalize(color))]
    }, {
      ["& .".concat(chipClasses.icon)]: styles2.icon
    }, {
      ["& .".concat(chipClasses.icon)]: styles2["icon".concat(capitalize(size))]
    }, {
      ["& .".concat(chipClasses.icon)]: styles2["iconColor".concat(capitalize(iconColor))]
    }, {
      ["& .".concat(chipClasses.deleteIcon)]: styles2.deleteIcon
    }, {
      ["& .".concat(chipClasses.deleteIcon)]: styles2["deleteIcon".concat(capitalize(size))]
    }, {
      ["& .".concat(chipClasses.deleteIcon)]: styles2["deleteIconColor".concat(capitalize(color))]
    }, {
      ["& .".concat(chipClasses.deleteIcon)]: styles2["deleteIcon".concat(capitalize(variant), "Color").concat(capitalize(color))]
    }, styles2.root, styles2["size".concat(capitalize(size))], styles2["color".concat(capitalize(color))], clickable && styles2.clickable, clickable && color !== "default" && styles2["clickableColor".concat(capitalize(color), ")")], onDelete && styles2.deletable, onDelete && color !== "default" && styles2["deletableColor".concat(capitalize(color))], styles2[variant], styles2["".concat(variant).concat(capitalize(color))]];
  }
})(({
  theme,
  ownerState
}) => {
  const textColor = theme.palette.mode === "light" ? theme.palette.grey[700] : theme.palette.grey[300];
  return _extends$1({
    maxWidth: "100%",
    fontFamily: theme.typography.fontFamily,
    fontSize: theme.typography.pxToRem(13),
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    height: 32,
    color: (theme.vars || theme).palette.text.primary,
    backgroundColor: (theme.vars || theme).palette.action.selected,
    borderRadius: 32 / 2,
    whiteSpace: "nowrap",
    transition: theme.transitions.create(["background-color", "box-shadow"]),
    // reset cursor explicitly in case ButtonBase is used
    cursor: "unset",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    textDecoration: "none",
    border: 0,
    // Remove `button` border
    padding: 0,
    // Remove `button` padding
    verticalAlign: "middle",
    boxSizing: "border-box",
    ["&.".concat(chipClasses.disabled)]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity,
      pointerEvents: "none"
    },
    ["& .".concat(chipClasses.avatar)]: {
      marginLeft: 5,
      marginRight: -6,
      width: 24,
      height: 24,
      color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
      fontSize: theme.typography.pxToRem(12)
    },
    ["& .".concat(chipClasses.avatarColorPrimary)]: {
      color: (theme.vars || theme).palette.primary.contrastText,
      backgroundColor: (theme.vars || theme).palette.primary.dark
    },
    ["& .".concat(chipClasses.avatarColorSecondary)]: {
      color: (theme.vars || theme).palette.secondary.contrastText,
      backgroundColor: (theme.vars || theme).palette.secondary.dark
    },
    ["& .".concat(chipClasses.avatarSmall)]: {
      marginLeft: 4,
      marginRight: -4,
      width: 18,
      height: 18,
      fontSize: theme.typography.pxToRem(10)
    },
    ["& .".concat(chipClasses.icon)]: _extends$1({
      marginLeft: 5,
      marginRight: -6
    }, ownerState.size === "small" && {
      fontSize: 18,
      marginLeft: 4,
      marginRight: -4
    }, ownerState.iconColor === ownerState.color && _extends$1({
      color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
    }, ownerState.color !== "default" && {
      color: "inherit"
    })),
    ["& .".concat(chipClasses.deleteIcon)]: _extends$1({
      WebkitTapHighlightColor: "transparent",
      color: theme.vars ? "rgba(".concat(theme.vars.palette.text.primaryChannel, " / 0.26)") : alpha_1(theme.palette.text.primary, 0.26),
      fontSize: 22,
      cursor: "pointer",
      margin: "0 5px 0 -6px",
      "&:hover": {
        color: theme.vars ? "rgba(".concat(theme.vars.palette.text.primaryChannel, " / 0.4)") : alpha_1(theme.palette.text.primary, 0.4)
      }
    }, ownerState.size === "small" && {
      fontSize: 16,
      marginRight: 4,
      marginLeft: -4
    }, ownerState.color !== "default" && {
      color: theme.vars ? "rgba(".concat(theme.vars.palette[ownerState.color].contrastTextChannel, " / 0.7)") : alpha_1(theme.palette[ownerState.color].contrastText, 0.7),
      "&:hover, &:active": {
        color: (theme.vars || theme).palette[ownerState.color].contrastText
      }
    })
  }, ownerState.size === "small" && {
    height: 24
  }, ownerState.color !== "default" && {
    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
    color: (theme.vars || theme).palette[ownerState.color].contrastText
  }, ownerState.onDelete && {
    ["&.".concat(chipClasses.focusVisible)]: {
      backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette.action.selectedChannel, " / calc(").concat(theme.vars.palette.action.selectedOpacity, " + ").concat(theme.vars.palette.action.focusOpacity, "))") : alpha_1(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    }
  }, ownerState.onDelete && ownerState.color !== "default" && {
    ["&.".concat(chipClasses.focusVisible)]: {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
    }
  });
}, ({
  theme,
  ownerState
}) => _extends$1({}, ownerState.clickable && {
  userSelect: "none",
  WebkitTapHighlightColor: "transparent",
  cursor: "pointer",
  "&:hover": {
    backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette.action.selectedChannel, " / calc(").concat(theme.vars.palette.action.selectedOpacity, " + ").concat(theme.vars.palette.action.hoverOpacity, "))") : alpha_1(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
  },
  ["&.".concat(chipClasses.focusVisible)]: {
    backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette.action.selectedChannel, " / calc(").concat(theme.vars.palette.action.selectedOpacity, " + ").concat(theme.vars.palette.action.focusOpacity, "))") : alpha_1(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
  },
  "&:active": {
    boxShadow: (theme.vars || theme).shadows[1]
  }
}, ownerState.clickable && ownerState.color !== "default" && {
  ["&:hover, &.".concat(chipClasses.focusVisible)]: {
    backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
  }
}), ({
  theme,
  ownerState
}) => _extends$1({}, ownerState.variant === "outlined" && {
  backgroundColor: "transparent",
  border: theme.vars ? "1px solid ".concat(theme.vars.palette.Chip.defaultBorder) : "1px solid ".concat(theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[700]),
  ["&.".concat(chipClasses.clickable, ":hover")]: {
    backgroundColor: (theme.vars || theme).palette.action.hover
  },
  ["&.".concat(chipClasses.focusVisible)]: {
    backgroundColor: (theme.vars || theme).palette.action.focus
  },
  ["& .".concat(chipClasses.avatar)]: {
    marginLeft: 4
  },
  ["& .".concat(chipClasses.avatarSmall)]: {
    marginLeft: 2
  },
  ["& .".concat(chipClasses.icon)]: {
    marginLeft: 4
  },
  ["& .".concat(chipClasses.iconSmall)]: {
    marginLeft: 2
  },
  ["& .".concat(chipClasses.deleteIcon)]: {
    marginRight: 5
  },
  ["& .".concat(chipClasses.deleteIconSmall)]: {
    marginRight: 3
  }
}, ownerState.variant === "outlined" && ownerState.color !== "default" && {
  color: (theme.vars || theme).palette[ownerState.color].main,
  border: "1px solid ".concat(theme.vars ? "rgba(".concat(theme.vars.palette[ownerState.color].mainChannel, " / 0.7)") : alpha_1(theme.palette[ownerState.color].main, 0.7)),
  ["&.".concat(chipClasses.clickable, ":hover")]: {
    backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette[ownerState.color].mainChannel, " / ").concat(theme.vars.palette.action.hoverOpacity, ")") : alpha_1(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
  },
  ["&.".concat(chipClasses.focusVisible)]: {
    backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette[ownerState.color].mainChannel, " / ").concat(theme.vars.palette.action.focusOpacity, ")") : alpha_1(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
  },
  ["& .".concat(chipClasses.deleteIcon)]: {
    color: theme.vars ? "rgba(".concat(theme.vars.palette[ownerState.color].mainChannel, " / 0.7)") : alpha_1(theme.palette[ownerState.color].main, 0.7),
    "&:hover, &:active": {
      color: (theme.vars || theme).palette[ownerState.color].main
    }
  }
}));
const ChipLabel = styled$1("span", {
  name: "MuiChip",
  slot: "Label",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    const {
      size
    } = ownerState;
    return [styles2.label, styles2["label".concat(capitalize(size))]];
  }
})(({
  ownerState
}) => _extends$1({
  overflow: "hidden",
  textOverflow: "ellipsis",
  paddingLeft: 12,
  paddingRight: 12,
  whiteSpace: "nowrap"
}, ownerState.variant === "outlined" && {
  paddingLeft: 11,
  paddingRight: 11
}, ownerState.size === "small" && {
  paddingLeft: 8,
  paddingRight: 8
}, ownerState.size === "small" && ownerState.variant === "outlined" && {
  paddingLeft: 7,
  paddingRight: 7
}));
function isDeleteKeyboardEvent(keyboardEvent) {
  return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
}
const Chip = /* @__PURE__ */ reactExports.forwardRef(function Chip2(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: "MuiChip"
  });
  const {
    avatar: avatarProp,
    className,
    clickable: clickableProp,
    color = "default",
    component: ComponentProp,
    deleteIcon: deleteIconProp,
    disabled = false,
    icon: iconProp,
    label,
    onClick,
    onDelete,
    onKeyDown,
    onKeyUp,
    size = "medium",
    variant = "filled",
    tabIndex,
    skipFocusWhenDisabled = false
    // TODO v6: Rename to `focusableWhenDisabled`.
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded$a);
  const chipRef = reactExports.useRef(null);
  const handleRef = useForkRef(chipRef, ref);
  const handleDeleteIconClick = (event) => {
    event.stopPropagation();
    if (onDelete) {
      onDelete(event);
    }
  };
  const handleKeyDown = (event) => {
    if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
      event.preventDefault();
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  };
  const handleKeyUp = (event) => {
    if (event.currentTarget === event.target) {
      if (onDelete && isDeleteKeyboardEvent(event)) {
        onDelete(event);
      } else if (event.key === "Escape" && chipRef.current) {
        chipRef.current.blur();
      }
    }
    if (onKeyUp) {
      onKeyUp(event);
    }
  };
  const clickable = clickableProp !== false && onClick ? true : clickableProp;
  const component = clickable || onDelete ? ButtonBase : ComponentProp || "div";
  const ownerState = _extends$1({}, props, {
    component,
    disabled,
    size,
    color,
    iconColor: /* @__PURE__ */ reactExports.isValidElement(iconProp) ? iconProp.props.color || color : color,
    onDelete: !!onDelete,
    clickable,
    variant
  });
  const classes = useUtilityClasses$a(ownerState);
  const moreProps = component === ButtonBase ? _extends$1({
    component: ComponentProp || "div",
    focusVisibleClassName: classes.focusVisible
  }, onDelete && {
    disableRipple: true
  }) : {};
  let deleteIcon = null;
  if (onDelete) {
    deleteIcon = deleteIconProp && /* @__PURE__ */ reactExports.isValidElement(deleteIconProp) ? /* @__PURE__ */ reactExports.cloneElement(deleteIconProp, {
      className: clsx(deleteIconProp.props.className, classes.deleteIcon),
      onClick: handleDeleteIconClick
    }) : /* @__PURE__ */ jsxRuntimeExports.jsx(CancelIcon, {
      className: clsx(classes.deleteIcon),
      onClick: handleDeleteIconClick
    });
  }
  let avatar2 = null;
  if (avatarProp && /* @__PURE__ */ reactExports.isValidElement(avatarProp)) {
    avatar2 = /* @__PURE__ */ reactExports.cloneElement(avatarProp, {
      className: clsx(classes.avatar, avatarProp.props.className)
    });
  }
  let icon2 = null;
  if (iconProp && /* @__PURE__ */ reactExports.isValidElement(iconProp)) {
    icon2 = /* @__PURE__ */ reactExports.cloneElement(iconProp, {
      className: clsx(classes.icon, iconProp.props.className)
    });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(ChipRoot, _extends$1({
    as: component,
    className: clsx(classes.root, className),
    disabled: clickable && disabled ? true : void 0,
    onClick,
    onKeyDown: handleKeyDown,
    onKeyUp: handleKeyUp,
    ref: handleRef,
    tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
    ownerState
  }, moreProps, other, {
    children: [avatar2 || icon2, /* @__PURE__ */ jsxRuntimeExports.jsx(ChipLabel, {
      className: clsx(classes.label),
      ownerState,
      children: label
    }), deleteIcon]
  }));
});
function getAutocompleteUtilityClass(slot) {
  return generateUtilityClass("MuiAutocomplete", slot);
}
const autocompleteClasses = generateUtilityClasses("MuiAutocomplete", ["root", "expanded", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
const avatarGroupClasses = generateUtilityClasses("MuiAvatarGroup", ["root", "avatar"]);
function getBadgeUtilityClass(slot) {
  return generateUtilityClass("MuiBadge", slot);
}
const badgeClasses = generateUtilityClasses("MuiBadge", [
  "root",
  "badge",
  "dot",
  "standard",
  "anchorOriginTopRight",
  "anchorOriginBottomRight",
  "anchorOriginTopLeft",
  "anchorOriginBottomLeft",
  "invisible",
  "colorError",
  "colorInfo",
  "colorPrimary",
  "colorSecondary",
  "colorSuccess",
  "colorWarning",
  "overlapRectangular",
  "overlapCircular",
  // TODO: v6 remove the overlap value from these class keys
  "anchorOriginTopLeftCircular",
  "anchorOriginTopLeftRectangular",
  "anchorOriginTopRightCircular",
  "anchorOriginTopRightRectangular",
  "anchorOriginBottomLeftCircular",
  "anchorOriginBottomLeftRectangular",
  "anchorOriginBottomRightCircular",
  "anchorOriginBottomRightRectangular"
]);
function getButtonGroupUtilityClass(slot) {
  return generateUtilityClass("MuiButtonGroup", slot);
}
const buttonGroupClasses = generateUtilityClasses("MuiButtonGroup", ["root", "contained", "outlined", "text", "disableElevation", "disabled", "firstButton", "fullWidth", "vertical", "grouped", "groupedHorizontal", "groupedVertical", "groupedText", "groupedTextHorizontal", "groupedTextVertical", "groupedTextPrimary", "groupedTextSecondary", "groupedOutlined", "groupedOutlinedHorizontal", "groupedOutlinedVertical", "groupedOutlinedPrimary", "groupedOutlinedSecondary", "groupedContained", "groupedContainedHorizontal", "groupedContainedVertical", "groupedContainedPrimary", "groupedContainedSecondary", "lastButton", "middleButton"]);
function getCircularProgressUtilityClass(slot) {
  return generateUtilityClass("MuiCircularProgress", slot);
}
const circularProgressClasses = generateUtilityClasses("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);
const _excluded$9 = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
let _ = (t) => t, _t, _t2, _t3, _t4;
const SIZE = 44;
const circularRotateKeyframe = keyframes(_t || (_t = _(_a || (_a = __template(["\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n"])))));
const circularDashKeyframe = keyframes(_t2 || (_t2 = _(_b || (_b = __template(["\n  0% {\n    stroke-dasharray: 1px, 200px;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -15px;\n  }\n\n  100% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -125px;\n  }\n"])))));
const useUtilityClasses$9 = (ownerState) => {
  const {
    classes,
    variant,
    color,
    disableShrink
  } = ownerState;
  const slots = {
    root: ["root", variant, "color".concat(capitalize(color))],
    svg: ["svg"],
    circle: ["circle", "circle".concat(capitalize(variant)), disableShrink && "circleDisableShrink"]
  };
  return composeClasses(slots, getCircularProgressUtilityClass, classes);
};
const CircularProgressRoot = styled$1("span", {
  name: "MuiCircularProgress",
  slot: "Root",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, styles2[ownerState.variant], styles2["color".concat(capitalize(ownerState.color))]];
  }
})(({
  ownerState,
  theme
}) => _extends$1({
  display: "inline-block"
}, ownerState.variant === "determinate" && {
  transition: theme.transitions.create("transform")
}, ownerState.color !== "inherit" && {
  color: (theme.vars || theme).palette[ownerState.color].main
}), ({
  ownerState
}) => ownerState.variant === "indeterminate" && css(_t3 || (_t3 = _(_c || (_c = __template(["\n      animation: ", " 1.4s linear infinite;\n    "])), 0)), circularRotateKeyframe));
const CircularProgressSVG = styled$1("svg", {
  name: "MuiCircularProgress",
  slot: "Svg",
  overridesResolver: (props, styles2) => styles2.svg
})({
  display: "block"
  // Keeps the progress centered
});
const CircularProgressCircle = styled$1("circle", {
  name: "MuiCircularProgress",
  slot: "Circle",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.circle, styles2["circle".concat(capitalize(ownerState.variant))], ownerState.disableShrink && styles2.circleDisableShrink];
  }
})(({
  ownerState,
  theme
}) => _extends$1({
  stroke: "currentColor"
}, ownerState.variant === "determinate" && {
  transition: theme.transitions.create("stroke-dashoffset")
}, ownerState.variant === "indeterminate" && {
  // Some default value that looks fine waiting for the animation to kicks in.
  strokeDasharray: "80px, 200px",
  strokeDashoffset: 0
  // Add the unit to fix a Edge 16 and below bug.
}), ({
  ownerState
}) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && css(_t4 || (_t4 = _(_d || (_d = __template(["\n      animation: ", " 1.4s ease-in-out infinite;\n    "])), 0)), circularDashKeyframe));
const CircularProgress = /* @__PURE__ */ reactExports.forwardRef(function CircularProgress2(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: "MuiCircularProgress"
  });
  const {
    className,
    color = "primary",
    disableShrink = false,
    size = 40,
    style,
    thickness = 3.6,
    value: value2 = 0,
    variant = "indeterminate"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded$9);
  const ownerState = _extends$1({}, props, {
    color,
    disableShrink,
    size,
    thickness,
    value: value2,
    variant
  });
  const classes = useUtilityClasses$9(ownerState);
  const circleStyle = {};
  const rootStyle = {};
  const rootProps = {};
  if (variant === "determinate") {
    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
    circleStyle.strokeDasharray = circumference.toFixed(3);
    rootProps["aria-valuenow"] = Math.round(value2);
    circleStyle.strokeDashoffset = "".concat(((100 - value2) / 100 * circumference).toFixed(3), "px");
    rootStyle.transform = "rotate(-90deg)";
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgressRoot, _extends$1({
    className: clsx(classes.root, className),
    style: _extends$1({
      width: size,
      height: size
    }, rootStyle, style),
    ownerState,
    ref,
    role: "progressbar"
  }, rootProps, other, {
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgressSVG, {
      className: classes.svg,
      ownerState,
      viewBox: "".concat(SIZE / 2, " ").concat(SIZE / 2, " ").concat(SIZE, " ").concat(SIZE),
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgressCircle, {
        className: classes.circle,
        style: circleStyle,
        ownerState,
        cx: SIZE,
        cy: SIZE,
        r: (SIZE - thickness) / 2,
        fill: "none",
        strokeWidth: thickness
      })
    })
  }));
});
function mapEventPropToEvent(eventProp) {
  return eventProp.substring(2).toLowerCase();
}
function clickedRootScrollbar(event, doc) {
  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
}
function ClickAwayListener(props) {
  const {
    children,
    disableReactTree = false,
    mouseEvent = "onClick",
    onClickAway,
    touchEvent = "onTouchEnd"
  } = props;
  const movedRef = reactExports.useRef(false);
  const nodeRef = reactExports.useRef(null);
  const activatedRef = reactExports.useRef(false);
  const syntheticEventRef = reactExports.useRef(false);
  reactExports.useEffect(() => {
    setTimeout(() => {
      activatedRef.current = true;
    }, 0);
    return () => {
      activatedRef.current = false;
    };
  }, []);
  const handleRef = useForkRef(
    // @ts-expect-error TODO upstream fix
    children.ref,
    nodeRef
  );
  const handleClickAway = useEventCallback((event) => {
    const insideReactTree = syntheticEventRef.current;
    syntheticEventRef.current = false;
    const doc = ownerDocument(nodeRef.current);
    if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
      return;
    }
    if (movedRef.current) {
      movedRef.current = false;
      return;
    }
    let insideDOM;
    if (event.composedPath) {
      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
    } else {
      insideDOM = !doc.documentElement.contains(
        // @ts-expect-error returns `false` as intended when not dispatched from a Node
        event.target
      ) || nodeRef.current.contains(
        // @ts-expect-error returns `false` as intended when not dispatched from a Node
        event.target
      );
    }
    if (!insideDOM && (disableReactTree || !insideReactTree)) {
      onClickAway(event);
    }
  });
  const createHandleSynthetic = (handlerName) => (event) => {
    syntheticEventRef.current = true;
    const childrenPropsHandler = children.props[handlerName];
    if (childrenPropsHandler) {
      childrenPropsHandler(event);
    }
  };
  const childrenProps = {
    ref: handleRef
  };
  if (touchEvent !== false) {
    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
  }
  reactExports.useEffect(() => {
    if (touchEvent !== false) {
      const mappedTouchEvent = mapEventPropToEvent(touchEvent);
      const doc = ownerDocument(nodeRef.current);
      const handleTouchMove = () => {
        movedRef.current = true;
      };
      doc.addEventListener(mappedTouchEvent, handleClickAway);
      doc.addEventListener("touchmove", handleTouchMove);
      return () => {
        doc.removeEventListener(mappedTouchEvent, handleClickAway);
        doc.removeEventListener("touchmove", handleTouchMove);
      };
    }
    return void 0;
  }, [handleClickAway, touchEvent]);
  if (mouseEvent !== false) {
    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
  }
  reactExports.useEffect(() => {
    if (mouseEvent !== false) {
      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
      const doc = ownerDocument(nodeRef.current);
      doc.addEventListener(mappedMouseEvent, handleClickAway);
      return () => {
        doc.removeEventListener(mappedMouseEvent, handleClickAway);
      };
    }
    return void 0;
  }, [handleClickAway, mouseEvent]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Fragment, {
    children: /* @__PURE__ */ reactExports.cloneElement(children, childrenProps)
  });
}
const html = (theme, enableColorScheme) => _extends$1({
  WebkitFontSmoothing: "antialiased",
  // Antialiasing.
  MozOsxFontSmoothing: "grayscale",
  // Antialiasing.
  // Change from `box-sizing: content-box` so that `width`
  // is not affected by `padding` or `border`.
  boxSizing: "border-box",
  // Fix font resize problem in iOS
  WebkitTextSizeAdjust: "100%"
}, enableColorScheme && !theme.vars && {
  colorScheme: theme.palette.mode
});
const body = (theme) => _extends$1({
  color: (theme.vars || theme).palette.text.primary
}, theme.typography.body1, {
  backgroundColor: (theme.vars || theme).palette.background.default,
  "@media print": {
    // Save printer ink.
    backgroundColor: (theme.vars || theme).palette.common.white
  }
});
const styles$9 = (theme, enableColorScheme = false) => {
  var _theme$components;
  const colorSchemeStyles = {};
  if (enableColorScheme && theme.colorSchemes) {
    Object.entries(theme.colorSchemes).forEach(([key2, scheme]) => {
      var _scheme$palette;
      colorSchemeStyles[theme.getColorSchemeSelector(key2).replace(/\s*&/, "")] = {
        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
      };
    });
  }
  let defaultStyles = _extends$1({
    html: html(theme, enableColorScheme),
    "*, *::before, *::after": {
      boxSizing: "inherit"
    },
    "strong, b": {
      fontWeight: theme.typography.fontWeightBold
    },
    body: _extends$1({
      margin: 0
    }, body(theme), {
      // Add support for document.body.requestFullScreen().
      // Other elements, if background transparent, are not supported.
      "&::backdrop": {
        backgroundColor: (theme.vars || theme).palette.background.default
      }
    })
  }, colorSchemeStyles);
  const themeOverrides = (_theme$components = theme.components) == null || (_theme$components = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components.styleOverrides;
  if (themeOverrides) {
    defaultStyles = [defaultStyles, themeOverrides];
  }
  return defaultStyles;
};
function CssBaseline(inProps) {
  const props = useDefaultProps({
    props: inProps,
    name: "MuiCssBaseline"
  });
  const {
    children,
    enableColorScheme = false
  } = props;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
    children: [/* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles, {
      styles: (theme) => styles$9(theme, enableColorScheme)
    }), children]
  });
}
const _excluded$8 = ["className", "id"];
const useUtilityClasses$8 = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getDialogTitleUtilityClass, classes);
};
const DialogTitleRoot = styled$1(Typography, {
  name: "MuiDialogTitle",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({
  padding: "16px 24px",
  flex: "0 0 auto"
});
const DialogTitle = /* @__PURE__ */ reactExports.forwardRef(function DialogTitle2(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: "MuiDialogTitle"
  });
  const {
    className,
    id: idProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded$8);
  const ownerState = props;
  const classes = useUtilityClasses$8(ownerState);
  const {
    titleId = idProp
  } = reactExports.useContext(DialogContext);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogTitleRoot, _extends$1({
    component: "h2",
    className: clsx(classes.root, className),
    ownerState,
    ref,
    variant: "h6",
    id: idProp != null ? idProp : titleId
  }, other));
});
function getFabUtilityClass(slot) {
  return generateUtilityClass("MuiFab", slot);
}
const fabClasses = generateUtilityClasses("MuiFab", ["root", "primary", "secondary", "extended", "circular", "focusVisible", "disabled", "colorInherit", "sizeSmall", "sizeMedium", "sizeLarge", "info", "error", "warning", "success"]);
const Grid2 = createGrid({
  createStyledComponent: styled$1("div", {
    name: "MuiGrid2",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  }),
  componentName: "MuiGrid2",
  useThemeProps: (inProps) => useDefaultProps({
    props: inProps,
    name: "MuiGrid2"
  })
});
const linearProgressClasses = generateUtilityClasses("MuiLinearProgress", ["root", "colorPrimary", "colorSecondary", "determinate", "indeterminate", "buffer", "query", "dashed", "dashedColorPrimary", "dashedColorSecondary", "bar", "barColorPrimary", "barColorSecondary", "bar1Indeterminate", "bar1Determinate", "bar1Buffer", "bar2Indeterminate", "bar2Buffer"]);
function getListItemUtilityClass(slot) {
  return generateUtilityClass("MuiListItem", slot);
}
const listItemClasses = generateUtilityClasses("MuiListItem", ["root", "container", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "padding", "button", "secondaryAction", "selected"]);
function getListItemButtonUtilityClass(slot) {
  return generateUtilityClass("MuiListItemButton", slot);
}
const listItemButtonClasses = generateUtilityClasses("MuiListItemButton", ["root", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "selected"]);
const _excluded$7 = ["alignItems", "autoFocus", "component", "children", "dense", "disableGutters", "divider", "focusVisibleClassName", "selected", "className"];
const overridesResolver$1 = (props, styles2) => {
  const {
    ownerState
  } = props;
  return [styles2.root, ownerState.dense && styles2.dense, ownerState.alignItems === "flex-start" && styles2.alignItemsFlexStart, ownerState.divider && styles2.divider, !ownerState.disableGutters && styles2.gutters];
};
const useUtilityClasses$7 = (ownerState) => {
  const {
    alignItems,
    classes,
    dense,
    disabled,
    disableGutters,
    divider,
    selected
  } = ownerState;
  const slots = {
    root: ["root", dense && "dense", !disableGutters && "gutters", divider && "divider", disabled && "disabled", alignItems === "flex-start" && "alignItemsFlexStart", selected && "selected"]
  };
  const composedClasses = composeClasses(slots, getListItemButtonUtilityClass, classes);
  return _extends$1({}, classes, composedClasses);
};
const ListItemButtonRoot = styled$1(ButtonBase, {
  shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
  name: "MuiListItemButton",
  slot: "Root",
  overridesResolver: overridesResolver$1
})(({
  theme,
  ownerState
}) => _extends$1({
  display: "flex",
  flexGrow: 1,
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  textDecoration: "none",
  minWidth: 0,
  boxSizing: "border-box",
  textAlign: "left",
  paddingTop: 8,
  paddingBottom: 8,
  transition: theme.transitions.create("background-color", {
    duration: theme.transitions.duration.shortest
  }),
  "&:hover": {
    textDecoration: "none",
    backgroundColor: (theme.vars || theme).palette.action.hover,
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  ["&.".concat(listItemButtonClasses.selected)]: {
    backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette.primary.mainChannel, " / ").concat(theme.vars.palette.action.selectedOpacity, ")") : alpha_1(theme.palette.primary.main, theme.palette.action.selectedOpacity),
    ["&.".concat(listItemButtonClasses.focusVisible)]: {
      backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette.primary.mainChannel, " / calc(").concat(theme.vars.palette.action.selectedOpacity, " + ").concat(theme.vars.palette.action.focusOpacity, "))") : alpha_1(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    }
  },
  ["&.".concat(listItemButtonClasses.selected, ":hover")]: {
    backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette.primary.mainChannel, " / calc(").concat(theme.vars.palette.action.selectedOpacity, " + ").concat(theme.vars.palette.action.hoverOpacity, "))") : alpha_1(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette.primary.mainChannel, " / ").concat(theme.vars.palette.action.selectedOpacity, ")") : alpha_1(theme.palette.primary.main, theme.palette.action.selectedOpacity)
    }
  },
  ["&.".concat(listItemButtonClasses.focusVisible)]: {
    backgroundColor: (theme.vars || theme).palette.action.focus
  },
  ["&.".concat(listItemButtonClasses.disabled)]: {
    opacity: (theme.vars || theme).palette.action.disabledOpacity
  }
}, ownerState.divider && {
  borderBottom: "1px solid ".concat((theme.vars || theme).palette.divider),
  backgroundClip: "padding-box"
}, ownerState.alignItems === "flex-start" && {
  alignItems: "flex-start"
}, !ownerState.disableGutters && {
  paddingLeft: 16,
  paddingRight: 16
}, ownerState.dense && {
  paddingTop: 4,
  paddingBottom: 4
}));
const ListItemButton = /* @__PURE__ */ reactExports.forwardRef(function ListItemButton2(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: "MuiListItemButton"
  });
  const {
    alignItems = "center",
    autoFocus = false,
    component = "div",
    children,
    dense = false,
    disableGutters = false,
    divider = false,
    focusVisibleClassName,
    selected = false,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded$7);
  const context = reactExports.useContext(ListContext);
  const childContext = reactExports.useMemo(() => ({
    dense: dense || context.dense || false,
    alignItems,
    disableGutters
  }), [alignItems, context.dense, dense, disableGutters]);
  const listItemRef = reactExports.useRef(null);
  useEnhancedEffect(() => {
    if (autoFocus) {
      if (listItemRef.current) {
        listItemRef.current.focus();
      }
    }
  }, [autoFocus]);
  const ownerState = _extends$1({}, props, {
    alignItems,
    dense: childContext.dense,
    disableGutters,
    divider,
    selected
  });
  const classes = useUtilityClasses$7(ownerState);
  const handleRef = useForkRef(listItemRef, ref);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext.Provider, {
    value: childContext,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemButtonRoot, _extends$1({
      ref: handleRef,
      href: other.href || other.to,
      component: (other.href || other.to) && component === "div" ? "button" : component,
      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
      ownerState,
      className: clsx(classes.root, className)
    }, other, {
      classes,
      children
    }))
  });
});
function getListItemSecondaryActionClassesUtilityClass(slot) {
  return generateUtilityClass("MuiListItemSecondaryAction", slot);
}
generateUtilityClasses("MuiListItemSecondaryAction", ["root", "disableGutters"]);
const _excluded$6 = ["className"];
const useUtilityClasses$6 = (ownerState) => {
  const {
    disableGutters,
    classes
  } = ownerState;
  const slots = {
    root: ["root", disableGutters && "disableGutters"]
  };
  return composeClasses(slots, getListItemSecondaryActionClassesUtilityClass, classes);
};
const ListItemSecondaryActionRoot = styled$1("div", {
  name: "MuiListItemSecondaryAction",
  slot: "Root",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, ownerState.disableGutters && styles2.disableGutters];
  }
})(({
  ownerState
}) => _extends$1({
  position: "absolute",
  right: 16,
  top: "50%",
  transform: "translateY(-50%)"
}, ownerState.disableGutters && {
  right: 0
}));
const ListItemSecondaryAction = /* @__PURE__ */ reactExports.forwardRef(function ListItemSecondaryAction2(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: "MuiListItemSecondaryAction"
  });
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded$6);
  const context = reactExports.useContext(ListContext);
  const ownerState = _extends$1({}, props, {
    disableGutters: context.disableGutters
  });
  const classes = useUtilityClasses$6(ownerState);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemSecondaryActionRoot, _extends$1({
    className: clsx(classes.root, className),
    ownerState,
    ref
  }, other));
});
ListItemSecondaryAction.muiName = "ListItemSecondaryAction";
const _excluded$5 = ["className"], _excluded2$1 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected", "slotProps", "slots"];
const overridesResolver = (props, styles2) => {
  const {
    ownerState
  } = props;
  return [styles2.root, ownerState.dense && styles2.dense, ownerState.alignItems === "flex-start" && styles2.alignItemsFlexStart, ownerState.divider && styles2.divider, !ownerState.disableGutters && styles2.gutters, !ownerState.disablePadding && styles2.padding, ownerState.button && styles2.button, ownerState.hasSecondaryAction && styles2.secondaryAction];
};
const useUtilityClasses$5 = (ownerState) => {
  const {
    alignItems,
    button: button2,
    classes,
    dense,
    disabled,
    disableGutters,
    disablePadding,
    divider,
    hasSecondaryAction,
    selected
  } = ownerState;
  const slots = {
    root: ["root", dense && "dense", !disableGutters && "gutters", !disablePadding && "padding", divider && "divider", disabled && "disabled", button2 && "button", alignItems === "flex-start" && "alignItemsFlexStart", hasSecondaryAction && "secondaryAction", selected && "selected"],
    container: ["container"]
  };
  return composeClasses(slots, getListItemUtilityClass, classes);
};
const ListItemRoot = styled$1("div", {
  name: "MuiListItem",
  slot: "Root",
  overridesResolver
})(({
  theme,
  ownerState
}) => _extends$1({
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  textDecoration: "none",
  width: "100%",
  boxSizing: "border-box",
  textAlign: "left"
}, !ownerState.disablePadding && _extends$1({
  paddingTop: 8,
  paddingBottom: 8
}, ownerState.dense && {
  paddingTop: 4,
  paddingBottom: 4
}, !ownerState.disableGutters && {
  paddingLeft: 16,
  paddingRight: 16
}, !!ownerState.secondaryAction && {
  // Add some space to avoid collision as `ListItemSecondaryAction`
  // is absolutely positioned.
  paddingRight: 48
}), !!ownerState.secondaryAction && {
  ["& > .".concat(listItemButtonClasses.root)]: {
    paddingRight: 48
  }
}, {
  ["&.".concat(listItemClasses.focusVisible)]: {
    backgroundColor: (theme.vars || theme).palette.action.focus
  },
  ["&.".concat(listItemClasses.selected)]: {
    backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette.primary.mainChannel, " / ").concat(theme.vars.palette.action.selectedOpacity, ")") : alpha_1(theme.palette.primary.main, theme.palette.action.selectedOpacity),
    ["&.".concat(listItemClasses.focusVisible)]: {
      backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette.primary.mainChannel, " / calc(").concat(theme.vars.palette.action.selectedOpacity, " + ").concat(theme.vars.palette.action.focusOpacity, "))") : alpha_1(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    }
  },
  ["&.".concat(listItemClasses.disabled)]: {
    opacity: (theme.vars || theme).palette.action.disabledOpacity
  }
}, ownerState.alignItems === "flex-start" && {
  alignItems: "flex-start"
}, ownerState.divider && {
  borderBottom: "1px solid ".concat((theme.vars || theme).palette.divider),
  backgroundClip: "padding-box"
}, ownerState.button && {
  transition: theme.transitions.create("background-color", {
    duration: theme.transitions.duration.shortest
  }),
  "&:hover": {
    textDecoration: "none",
    backgroundColor: (theme.vars || theme).palette.action.hover,
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  ["&.".concat(listItemClasses.selected, ":hover")]: {
    backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette.primary.mainChannel, " / calc(").concat(theme.vars.palette.action.selectedOpacity, " + ").concat(theme.vars.palette.action.hoverOpacity, "))") : alpha_1(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette.primary.mainChannel, " / ").concat(theme.vars.palette.action.selectedOpacity, ")") : alpha_1(theme.palette.primary.main, theme.palette.action.selectedOpacity)
    }
  }
}, ownerState.hasSecondaryAction && {
  // Add some space to avoid collision as `ListItemSecondaryAction`
  // is absolutely positioned.
  paddingRight: 48
}));
const ListItemContainer = styled$1("li", {
  name: "MuiListItem",
  slot: "Container",
  overridesResolver: (props, styles2) => styles2.container
})({
  position: "relative"
});
const ListItem = /* @__PURE__ */ reactExports.forwardRef(function ListItem2(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: "MuiListItem"
  });
  const {
    alignItems = "center",
    autoFocus = false,
    button: button2 = false,
    children: childrenProp,
    className,
    component: componentProp,
    components = {},
    componentsProps = {},
    ContainerComponent = "li",
    ContainerProps: {
      className: ContainerClassName
    } = {},
    dense = false,
    disabled = false,
    disableGutters = false,
    disablePadding = false,
    divider = false,
    focusVisibleClassName,
    secondaryAction,
    selected = false,
    slotProps = {},
    slots = {}
  } = props, ContainerProps = _objectWithoutPropertiesLoose(props.ContainerProps, _excluded$5), other = _objectWithoutPropertiesLoose(props, _excluded2$1);
  const context = reactExports.useContext(ListContext);
  const childContext = reactExports.useMemo(() => ({
    dense: dense || context.dense || false,
    alignItems,
    disableGutters
  }), [alignItems, context.dense, dense, disableGutters]);
  const listItemRef = reactExports.useRef(null);
  useEnhancedEffect(() => {
    if (autoFocus) {
      if (listItemRef.current) {
        listItemRef.current.focus();
      }
    }
  }, [autoFocus]);
  const children = reactExports.Children.toArray(childrenProp);
  const hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ["ListItemSecondaryAction"]);
  const ownerState = _extends$1({}, props, {
    alignItems,
    autoFocus,
    button: button2,
    dense: childContext.dense,
    disabled,
    disableGutters,
    disablePadding,
    divider,
    hasSecondaryAction,
    selected
  });
  const classes = useUtilityClasses$5(ownerState);
  const handleRef = useForkRef(listItemRef, ref);
  const Root = slots.root || components.Root || ListItemRoot;
  const rootProps = slotProps.root || componentsProps.root || {};
  const componentProps = _extends$1({
    className: clsx(classes.root, rootProps.className, className),
    disabled
  }, other);
  let Component = componentProp || "li";
  if (button2) {
    componentProps.component = componentProp || "div";
    componentProps.focusVisibleClassName = clsx(listItemClasses.focusVisible, focusVisibleClassName);
    Component = ButtonBase;
  }
  if (hasSecondaryAction) {
    Component = !componentProps.component && !componentProp ? "div" : Component;
    if (ContainerComponent === "li") {
      if (Component === "li") {
        Component = "div";
      } else if (componentProps.component === "li") {
        componentProps.component = "div";
      }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext.Provider, {
      value: childContext,
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(ListItemContainer, _extends$1({
        as: ContainerComponent,
        className: clsx(classes.container, ContainerClassName),
        ref: handleRef,
        ownerState
      }, ContainerProps, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends$1({}, rootProps, !isHostComponent(Root) && {
          as: Component,
          ownerState: _extends$1({}, ownerState, rootProps.ownerState)
        }, componentProps, {
          children
        })), children.pop()]
      }))
    });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext.Provider, {
    value: childContext,
    children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends$1({}, rootProps, {
      as: Component,
      ref: handleRef
    }, !isHostComponent(Root) && {
      ownerState: _extends$1({}, ownerState, rootProps.ownerState)
    }, componentProps, {
      children: [children, secondaryAction && /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemSecondaryAction, {
        children: secondaryAction
      })]
    }))
  });
});
const _excluded$4 = ["className"];
const useUtilityClasses$4 = (ownerState) => {
  const {
    alignItems,
    classes
  } = ownerState;
  const slots = {
    root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
  };
  return composeClasses(slots, getListItemIconUtilityClass, classes);
};
const ListItemIconRoot = styled$1("div", {
  name: "MuiListItemIcon",
  slot: "Root",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, ownerState.alignItems === "flex-start" && styles2.alignItemsFlexStart];
  }
})(({
  theme,
  ownerState
}) => _extends$1({
  minWidth: 56,
  color: (theme.vars || theme).palette.action.active,
  flexShrink: 0,
  display: "inline-flex"
}, ownerState.alignItems === "flex-start" && {
  marginTop: 8
}));
const ListItemIcon = /* @__PURE__ */ reactExports.forwardRef(function ListItemIcon2(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: "MuiListItemIcon"
  });
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded$4);
  const context = reactExports.useContext(ListContext);
  const ownerState = _extends$1({}, props, {
    alignItems: context.alignItems
  });
  const classes = useUtilityClasses$4(ownerState);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemIconRoot, _extends$1({
    className: clsx(classes.root, className),
    ownerState,
    ref
  }, other));
});
const paginationItemClasses = generateUtilityClasses("MuiPaginationItem", ["root", "page", "sizeSmall", "sizeLarge", "text", "textPrimary", "textSecondary", "outlined", "outlinedPrimary", "outlinedSecondary", "rounded", "ellipsis", "firstLast", "previousNext", "focusVisible", "disabled", "selected", "icon", "colorPrimary", "colorSecondary"]);
const ratingClasses = generateUtilityClasses("MuiRating", ["root", "sizeSmall", "sizeMedium", "sizeLarge", "readOnly", "disabled", "focusVisible", "visuallyHidden", "pristine", "label", "labelEmptyValueActive", "icon", "iconEmpty", "iconFilled", "iconHover", "iconFocus", "iconActive", "decimal"]);
function getSliderUtilityClass(slot) {
  return generateUtilityClass("MuiSlider", slot);
}
const sliderClasses = generateUtilityClasses("MuiSlider", ["root", "active", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "disabled", "dragging", "focusVisible", "mark", "markActive", "marked", "markLabel", "markLabelActive", "rail", "sizeSmall", "thumb", "thumbColorPrimary", "thumbColorSecondary", "thumbColorError", "thumbColorSuccess", "thumbColorInfo", "thumbColorWarning", "track", "trackInverted", "trackFalse", "thumbSizeSmall", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel", "vertical"]);
function useSnackbar(parameters = {}) {
  const {
    autoHideDuration = null,
    disableWindowBlurListener = false,
    onClose,
    open,
    resumeHideDuration
  } = parameters;
  const timerAutoHide = useTimeout();
  reactExports.useEffect(() => {
    if (!open) {
      return void 0;
    }
    function handleKeyDown(nativeEvent) {
      if (!nativeEvent.defaultPrevented) {
        if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
          onClose == null || onClose(nativeEvent, "escapeKeyDown");
        }
      }
    }
    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [open, onClose]);
  const handleClose = useEventCallback((event, reason) => {
    onClose == null || onClose(event, reason);
  });
  const setAutoHideTimer = useEventCallback((autoHideDurationParam) => {
    if (!onClose || autoHideDurationParam == null) {
      return;
    }
    timerAutoHide.start(autoHideDurationParam, () => {
      handleClose(null, "timeout");
    });
  });
  reactExports.useEffect(() => {
    if (open) {
      setAutoHideTimer(autoHideDuration);
    }
    return timerAutoHide.clear;
  }, [open, autoHideDuration, setAutoHideTimer, timerAutoHide]);
  const handleClickAway = (event) => {
    onClose == null || onClose(event, "clickaway");
  };
  const handlePause = timerAutoHide.clear;
  const handleResume = reactExports.useCallback(() => {
    if (autoHideDuration != null) {
      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
    }
  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
  const createHandleBlur = (otherHandlers) => (event) => {
    const onBlurCallback = otherHandlers.onBlur;
    onBlurCallback == null || onBlurCallback(event);
    handleResume();
  };
  const createHandleFocus = (otherHandlers) => (event) => {
    const onFocusCallback = otherHandlers.onFocus;
    onFocusCallback == null || onFocusCallback(event);
    handlePause();
  };
  const createMouseEnter = (otherHandlers) => (event) => {
    const onMouseEnterCallback = otherHandlers.onMouseEnter;
    onMouseEnterCallback == null || onMouseEnterCallback(event);
    handlePause();
  };
  const createMouseLeave = (otherHandlers) => (event) => {
    const onMouseLeaveCallback = otherHandlers.onMouseLeave;
    onMouseLeaveCallback == null || onMouseLeaveCallback(event);
    handleResume();
  };
  reactExports.useEffect(() => {
    if (!disableWindowBlurListener && open) {
      window.addEventListener("focus", handleResume);
      window.addEventListener("blur", handlePause);
      return () => {
        window.removeEventListener("focus", handleResume);
        window.removeEventListener("blur", handlePause);
      };
    }
    return void 0;
  }, [disableWindowBlurListener, open, handleResume, handlePause]);
  const getRootProps = (externalProps = {}) => {
    const externalEventHandlers = _extends$1({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));
    return _extends$1({
      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.
      // See https://github.com/mui/material-ui/issues/29080
      role: "presentation"
    }, externalProps, externalEventHandlers, {
      onBlur: createHandleBlur(externalEventHandlers),
      onFocus: createHandleFocus(externalEventHandlers),
      onMouseEnter: createMouseEnter(externalEventHandlers),
      onMouseLeave: createMouseLeave(externalEventHandlers)
    });
  };
  return {
    getRootProps,
    onClickAway: handleClickAway
  };
}
function getSnackbarContentUtilityClass(slot) {
  return generateUtilityClass("MuiSnackbarContent", slot);
}
generateUtilityClasses("MuiSnackbarContent", ["root", "message", "action"]);
const _excluded$3 = ["action", "className", "message", "role"];
const useUtilityClasses$3 = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ["root"],
    action: ["action"],
    message: ["message"]
  };
  return composeClasses(slots, getSnackbarContentUtilityClass, classes);
};
const SnackbarContentRoot = styled$1(Paper, {
  name: "MuiSnackbarContent",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme
}) => {
  const emphasis = theme.palette.mode === "light" ? 0.8 : 0.98;
  const backgroundColor = emphasize_1(theme.palette.background.default, emphasis);
  return _extends$1({}, theme.typography.body2, {
    color: theme.vars ? theme.vars.palette.SnackbarContent.color : theme.palette.getContrastText(backgroundColor),
    backgroundColor: theme.vars ? theme.vars.palette.SnackbarContent.bg : backgroundColor,
    display: "flex",
    alignItems: "center",
    flexWrap: "wrap",
    padding: "6px 16px",
    borderRadius: (theme.vars || theme).shape.borderRadius,
    flexGrow: 1,
    [theme.breakpoints.up("sm")]: {
      flexGrow: "initial",
      minWidth: 288
    }
  });
});
const SnackbarContentMessage = styled$1("div", {
  name: "MuiSnackbarContent",
  slot: "Message",
  overridesResolver: (props, styles2) => styles2.message
})({
  padding: "8px 0"
});
const SnackbarContentAction = styled$1("div", {
  name: "MuiSnackbarContent",
  slot: "Action",
  overridesResolver: (props, styles2) => styles2.action
})({
  display: "flex",
  alignItems: "center",
  marginLeft: "auto",
  paddingLeft: 16,
  marginRight: -8
});
const SnackbarContent = /* @__PURE__ */ reactExports.forwardRef(function SnackbarContent2(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: "MuiSnackbarContent"
  });
  const {
    action: action2,
    className,
    message,
    role = "alert"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded$3);
  const ownerState = props;
  const classes = useUtilityClasses$3(ownerState);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(SnackbarContentRoot, _extends$1({
    role,
    square: true,
    elevation: 6,
    className: clsx(classes.root, className),
    ownerState,
    ref
  }, other, {
    children: [/* @__PURE__ */ jsxRuntimeExports.jsx(SnackbarContentMessage, {
      className: classes.message,
      ownerState,
      children: message
    }), action2 ? /* @__PURE__ */ jsxRuntimeExports.jsx(SnackbarContentAction, {
      className: classes.action,
      ownerState,
      children: action2
    }) : null]
  }));
});
function getSnackbarUtilityClass(slot) {
  return generateUtilityClass("MuiSnackbar", slot);
}
generateUtilityClasses("MuiSnackbar", ["root", "anchorOriginTopCenter", "anchorOriginBottomCenter", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft"]);
const _excluded$2 = ["onEnter", "onExited"], _excluded2 = ["action", "anchorOrigin", "autoHideDuration", "children", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"];
const useUtilityClasses$2 = (ownerState) => {
  const {
    classes,
    anchorOrigin
  } = ownerState;
  const slots = {
    root: ["root", "anchorOrigin".concat(capitalize(anchorOrigin.vertical)).concat(capitalize(anchorOrigin.horizontal))]
  };
  return composeClasses(slots, getSnackbarUtilityClass, classes);
};
const SnackbarRoot = styled$1("div", {
  name: "MuiSnackbar",
  slot: "Root",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, styles2["anchorOrigin".concat(capitalize(ownerState.anchorOrigin.vertical)).concat(capitalize(ownerState.anchorOrigin.horizontal))]];
  }
})(({
  theme,
  ownerState
}) => {
  const center = {
    left: "50%",
    right: "auto",
    transform: "translateX(-50%)"
  };
  return _extends$1({
    zIndex: (theme.vars || theme).zIndex.snackbar,
    position: "fixed",
    display: "flex",
    left: 8,
    right: 8,
    justifyContent: "center",
    alignItems: "center"
  }, ownerState.anchorOrigin.vertical === "top" ? {
    top: 8
  } : {
    bottom: 8
  }, ownerState.anchorOrigin.horizontal === "left" && {
    justifyContent: "flex-start"
  }, ownerState.anchorOrigin.horizontal === "right" && {
    justifyContent: "flex-end"
  }, {
    [theme.breakpoints.up("sm")]: _extends$1({}, ownerState.anchorOrigin.vertical === "top" ? {
      top: 24
    } : {
      bottom: 24
    }, ownerState.anchorOrigin.horizontal === "center" && center, ownerState.anchorOrigin.horizontal === "left" && {
      left: 24,
      right: "auto"
    }, ownerState.anchorOrigin.horizontal === "right" && {
      right: 24,
      left: "auto"
    })
  });
});
const Snackbar = /* @__PURE__ */ reactExports.forwardRef(function Snackbar2(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: "MuiSnackbar"
  });
  const theme = useTheme$1();
  const defaultTransitionDuration = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
    action: action2,
    anchorOrigin: {
      vertical,
      horizontal
    } = {
      vertical: "bottom",
      horizontal: "left"
    },
    autoHideDuration = null,
    children,
    className,
    ClickAwayListenerProps,
    ContentProps,
    disableWindowBlurListener = false,
    message,
    open,
    TransitionComponent = Grow,
    transitionDuration = defaultTransitionDuration,
    TransitionProps: {
      onEnter,
      onExited
    } = {}
  } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$2), other = _objectWithoutPropertiesLoose(props, _excluded2);
  const ownerState = _extends$1({}, props, {
    anchorOrigin: {
      vertical,
      horizontal
    },
    autoHideDuration,
    disableWindowBlurListener,
    TransitionComponent,
    transitionDuration
  });
  const classes = useUtilityClasses$2(ownerState);
  const {
    getRootProps,
    onClickAway
  } = useSnackbar(_extends$1({}, ownerState));
  const [exited, setExited] = reactExports.useState(true);
  const rootProps = useSlotProps({
    elementType: SnackbarRoot,
    getSlotProps: getRootProps,
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      ref
    },
    className: [classes.root, className]
  });
  const handleExited = (node) => {
    setExited(true);
    if (onExited) {
      onExited(node);
    }
  };
  const handleEnter = (node, isAppearing) => {
    setExited(false);
    if (onEnter) {
      onEnter(node, isAppearing);
    }
  };
  if (!open && exited) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ClickAwayListener, _extends$1({
    onClickAway
  }, ClickAwayListenerProps, {
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(SnackbarRoot, _extends$1({}, rootProps, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$1({
        appear: true,
        in: open,
        timeout: transitionDuration,
        direction: vertical === "top" ? "down" : "up",
        onEnter: handleEnter,
        onExited: handleExited
      }, TransitionProps, {
        children: children || /* @__PURE__ */ jsxRuntimeExports.jsx(SnackbarContent, _extends$1({
          message,
          action: action2
        }, ContentProps))
      }))
    }))
  }));
});
function getTooltipUtilityClass(slot) {
  return generateUtilityClass("MuiTooltip", slot);
}
const tooltipClasses = generateUtilityClasses("MuiTooltip", ["popper", "popperInteractive", "popperArrow", "popperClose", "tooltip", "tooltipArrow", "touch", "tooltipPlacementLeft", "tooltipPlacementRight", "tooltipPlacementTop", "tooltipPlacementBottom", "arrow"]);
const _excluded$1 = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "slotProps", "slots", "title", "TransitionComponent", "TransitionProps"];
function round(value2) {
  return Math.round(value2 * 1e5) / 1e5;
}
const useUtilityClasses$1 = (ownerState) => {
  const {
    classes,
    disableInteractive,
    arrow,
    touch,
    placement
  } = ownerState;
  const slots = {
    popper: ["popper", !disableInteractive && "popperInteractive", arrow && "popperArrow"],
    tooltip: ["tooltip", arrow && "tooltipArrow", touch && "touch", "tooltipPlacement".concat(capitalize(placement.split("-")[0]))],
    arrow: ["arrow"]
  };
  return composeClasses(slots, getTooltipUtilityClass, classes);
};
const TooltipPopper = styled$1(Popper, {
  name: "MuiTooltip",
  slot: "Popper",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.popper, !ownerState.disableInteractive && styles2.popperInteractive, ownerState.arrow && styles2.popperArrow, !ownerState.open && styles2.popperClose];
  }
})(({
  theme,
  ownerState,
  open
}) => _extends$1({
  zIndex: (theme.vars || theme).zIndex.tooltip,
  pointerEvents: "none"
}, !ownerState.disableInteractive && {
  pointerEvents: "auto"
}, !open && {
  pointerEvents: "none"
}, ownerState.arrow && {
  ['&[data-popper-placement*="bottom"] .'.concat(tooltipClasses.arrow)]: {
    top: 0,
    marginTop: "-0.71em",
    "&::before": {
      transformOrigin: "0 100%"
    }
  },
  ['&[data-popper-placement*="top"] .'.concat(tooltipClasses.arrow)]: {
    bottom: 0,
    marginBottom: "-0.71em",
    "&::before": {
      transformOrigin: "100% 0"
    }
  },
  ['&[data-popper-placement*="right"] .'.concat(tooltipClasses.arrow)]: _extends$1({}, !ownerState.isRtl ? {
    left: 0,
    marginLeft: "-0.71em"
  } : {
    right: 0,
    marginRight: "-0.71em"
  }, {
    height: "1em",
    width: "0.71em",
    "&::before": {
      transformOrigin: "100% 100%"
    }
  }),
  ['&[data-popper-placement*="left"] .'.concat(tooltipClasses.arrow)]: _extends$1({}, !ownerState.isRtl ? {
    right: 0,
    marginRight: "-0.71em"
  } : {
    left: 0,
    marginLeft: "-0.71em"
  }, {
    height: "1em",
    width: "0.71em",
    "&::before": {
      transformOrigin: "0 0"
    }
  })
}));
const TooltipTooltip = styled$1("div", {
  name: "MuiTooltip",
  slot: "Tooltip",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.tooltip, ownerState.touch && styles2.touch, ownerState.arrow && styles2.tooltipArrow, styles2["tooltipPlacement".concat(capitalize(ownerState.placement.split("-")[0]))]];
  }
})(({
  theme,
  ownerState
}) => _extends$1({
  backgroundColor: theme.vars ? theme.vars.palette.Tooltip.bg : alpha_1(theme.palette.grey[700], 0.92),
  borderRadius: (theme.vars || theme).shape.borderRadius,
  color: (theme.vars || theme).palette.common.white,
  fontFamily: theme.typography.fontFamily,
  padding: "4px 8px",
  fontSize: theme.typography.pxToRem(11),
  maxWidth: 300,
  margin: 2,
  wordWrap: "break-word",
  fontWeight: theme.typography.fontWeightMedium
}, ownerState.arrow && {
  position: "relative",
  margin: 0
}, ownerState.touch && {
  padding: "8px 16px",
  fontSize: theme.typography.pxToRem(14),
  lineHeight: "".concat(round(16 / 14), "em"),
  fontWeight: theme.typography.fontWeightRegular
}, {
  [".".concat(tooltipClasses.popper, '[data-popper-placement*="left"] &')]: _extends$1({
    transformOrigin: "right center"
  }, !ownerState.isRtl ? _extends$1({
    marginRight: "14px"
  }, ownerState.touch && {
    marginRight: "24px"
  }) : _extends$1({
    marginLeft: "14px"
  }, ownerState.touch && {
    marginLeft: "24px"
  })),
  [".".concat(tooltipClasses.popper, '[data-popper-placement*="right"] &')]: _extends$1({
    transformOrigin: "left center"
  }, !ownerState.isRtl ? _extends$1({
    marginLeft: "14px"
  }, ownerState.touch && {
    marginLeft: "24px"
  }) : _extends$1({
    marginRight: "14px"
  }, ownerState.touch && {
    marginRight: "24px"
  })),
  [".".concat(tooltipClasses.popper, '[data-popper-placement*="top"] &')]: _extends$1({
    transformOrigin: "center bottom",
    marginBottom: "14px"
  }, ownerState.touch && {
    marginBottom: "24px"
  }),
  [".".concat(tooltipClasses.popper, '[data-popper-placement*="bottom"] &')]: _extends$1({
    transformOrigin: "center top",
    marginTop: "14px"
  }, ownerState.touch && {
    marginTop: "24px"
  })
}));
const TooltipArrow = styled$1("span", {
  name: "MuiTooltip",
  slot: "Arrow",
  overridesResolver: (props, styles2) => styles2.arrow
})(({
  theme
}) => ({
  overflow: "hidden",
  position: "absolute",
  width: "1em",
  height: "0.71em",
  boxSizing: "border-box",
  color: theme.vars ? theme.vars.palette.Tooltip.bg : alpha_1(theme.palette.grey[700], 0.9),
  "&::before": {
    content: '""',
    margin: "auto",
    display: "block",
    width: "100%",
    height: "100%",
    backgroundColor: "currentColor",
    transform: "rotate(45deg)"
  }
}));
let hystersisOpen = false;
const hystersisTimer = new Timeout();
let cursorPosition = {
  x: 0,
  y: 0
};
function composeEventHandler(handler, eventHandler) {
  return (event, ...params) => {
    if (eventHandler) {
      eventHandler(event, ...params);
    }
    handler(event, ...params);
  };
}
const Tooltip = /* @__PURE__ */ reactExports.forwardRef(function Tooltip2(inProps, ref) {
  var _ref, _slots$popper, _ref2, _ref3, _slots$transition, _ref4, _slots$tooltip, _ref5, _slots$arrow, _slotProps$popper, _ref6, _slotProps$popper2, _slotProps$transition, _slotProps$tooltip, _ref7, _slotProps$tooltip2, _slotProps$arrow, _ref8, _slotProps$arrow2;
  const props = useDefaultProps({
    props: inProps,
    name: "MuiTooltip"
  });
  const {
    arrow = false,
    children: childrenProp,
    components = {},
    componentsProps = {},
    describeChild = false,
    disableFocusListener = false,
    disableHoverListener = false,
    disableInteractive: disableInteractiveProp = false,
    disableTouchListener = false,
    enterDelay = 100,
    enterNextDelay = 0,
    enterTouchDelay = 700,
    followCursor = false,
    id: idProp,
    leaveDelay = 0,
    leaveTouchDelay = 1500,
    onClose,
    onOpen,
    open: openProp,
    placement = "bottom",
    PopperComponent: PopperComponentProp,
    PopperProps = {},
    slotProps = {},
    slots = {},
    title,
    TransitionComponent: TransitionComponentProp = Grow,
    TransitionProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1);
  const children = /* @__PURE__ */ reactExports.isValidElement(childrenProp) ? childrenProp : /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
    children: childrenProp
  });
  const theme = useTheme$1();
  const isRtl = useRtl();
  const [childNode, setChildNode] = reactExports.useState();
  const [arrowRef, setArrowRef] = reactExports.useState(null);
  const ignoreNonTouchEvents = reactExports.useRef(false);
  const disableInteractive = disableInteractiveProp || followCursor;
  const closeTimer = useTimeout();
  const enterTimer = useTimeout();
  const leaveTimer = useTimeout();
  const touchTimer = useTimeout();
  const [openState, setOpenState] = useControlled({
    controlled: openProp,
    default: false,
    name: "Tooltip",
    state: "open"
  });
  let open = openState;
  const id2 = useId(idProp);
  const prevUserSelect = reactExports.useRef();
  const stopTouchInteraction = useEventCallback(() => {
    if (prevUserSelect.current !== void 0) {
      document.body.style.WebkitUserSelect = prevUserSelect.current;
      prevUserSelect.current = void 0;
    }
    touchTimer.clear();
  });
  reactExports.useEffect(() => stopTouchInteraction, [stopTouchInteraction]);
  const handleOpen = (event) => {
    hystersisTimer.clear();
    hystersisOpen = true;
    setOpenState(true);
    if (onOpen && !open) {
      onOpen(event);
    }
  };
  const handleClose = useEventCallback(
    /**
     * @param {React.SyntheticEvent | Event} event
     */
    (event) => {
      hystersisTimer.start(800 + leaveDelay, () => {
        hystersisOpen = false;
      });
      setOpenState(false);
      if (onClose && open) {
        onClose(event);
      }
      closeTimer.start(theme.transitions.duration.shortest, () => {
        ignoreNonTouchEvents.current = false;
      });
    }
  );
  const handleMouseOver = (event) => {
    if (ignoreNonTouchEvents.current && event.type !== "touchstart") {
      return;
    }
    if (childNode) {
      childNode.removeAttribute("title");
    }
    enterTimer.clear();
    leaveTimer.clear();
    if (enterDelay || hystersisOpen && enterNextDelay) {
      enterTimer.start(hystersisOpen ? enterNextDelay : enterDelay, () => {
        handleOpen(event);
      });
    } else {
      handleOpen(event);
    }
  };
  const handleMouseLeave = (event) => {
    enterTimer.clear();
    leaveTimer.start(leaveDelay, () => {
      handleClose(event);
    });
  };
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible();
  const [, setChildIsFocusVisible] = reactExports.useState(false);
  const handleBlur = (event) => {
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setChildIsFocusVisible(false);
      handleMouseLeave(event);
    }
  };
  const handleFocus = (event) => {
    if (!childNode) {
      setChildNode(event.currentTarget);
    }
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setChildIsFocusVisible(true);
      handleMouseOver(event);
    }
  };
  const detectTouchStart = (event) => {
    ignoreNonTouchEvents.current = true;
    const childrenProps2 = children.props;
    if (childrenProps2.onTouchStart) {
      childrenProps2.onTouchStart(event);
    }
  };
  const handleTouchStart = (event) => {
    detectTouchStart(event);
    leaveTimer.clear();
    closeTimer.clear();
    stopTouchInteraction();
    prevUserSelect.current = document.body.style.WebkitUserSelect;
    document.body.style.WebkitUserSelect = "none";
    touchTimer.start(enterTouchDelay, () => {
      document.body.style.WebkitUserSelect = prevUserSelect.current;
      handleMouseOver(event);
    });
  };
  const handleTouchEnd = (event) => {
    if (children.props.onTouchEnd) {
      children.props.onTouchEnd(event);
    }
    stopTouchInteraction();
    leaveTimer.start(leaveTouchDelay, () => {
      handleClose(event);
    });
  };
  reactExports.useEffect(() => {
    if (!open) {
      return void 0;
    }
    function handleKeyDown(nativeEvent) {
      if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
        handleClose(nativeEvent);
      }
    }
    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [handleClose, open]);
  const handleRef = useForkRef(children.ref, focusVisibleRef, setChildNode, ref);
  if (!title && title !== 0) {
    open = false;
  }
  const popperRef = reactExports.useRef();
  const handleMouseMove = (event) => {
    const childrenProps2 = children.props;
    if (childrenProps2.onMouseMove) {
      childrenProps2.onMouseMove(event);
    }
    cursorPosition = {
      x: event.clientX,
      y: event.clientY
    };
    if (popperRef.current) {
      popperRef.current.update();
    }
  };
  const nameOrDescProps = {};
  const titleIsString = typeof title === "string";
  if (describeChild) {
    nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
    nameOrDescProps["aria-describedby"] = open ? id2 : null;
  } else {
    nameOrDescProps["aria-label"] = titleIsString ? title : null;
    nameOrDescProps["aria-labelledby"] = open && !titleIsString ? id2 : null;
  }
  const childrenProps = _extends$1({}, nameOrDescProps, other, children.props, {
    className: clsx(other.className, children.props.className),
    onTouchStart: detectTouchStart,
    ref: handleRef
  }, followCursor ? {
    onMouseMove: handleMouseMove
  } : {});
  const interactiveWrapperListeners = {};
  if (!disableTouchListener) {
    childrenProps.onTouchStart = handleTouchStart;
    childrenProps.onTouchEnd = handleTouchEnd;
  }
  if (!disableHoverListener) {
    childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
    childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
    if (!disableInteractive) {
      interactiveWrapperListeners.onMouseOver = handleMouseOver;
      interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
    }
  }
  if (!disableFocusListener) {
    childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
    childrenProps.onBlur = composeEventHandler(handleBlur, childrenProps.onBlur);
    if (!disableInteractive) {
      interactiveWrapperListeners.onFocus = handleFocus;
      interactiveWrapperListeners.onBlur = handleBlur;
    }
  }
  const popperOptions = reactExports.useMemo(() => {
    var _PopperProps$popperOp;
    let tooltipModifiers = [{
      name: "arrow",
      enabled: Boolean(arrowRef),
      options: {
        element: arrowRef,
        padding: 4
      }
    }];
    if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
      tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
    }
    return _extends$1({}, PopperProps.popperOptions, {
      modifiers: tooltipModifiers
    });
  }, [arrowRef, PopperProps]);
  const ownerState = _extends$1({}, props, {
    isRtl,
    arrow,
    disableInteractive,
    placement,
    PopperComponentProp,
    touch: ignoreNonTouchEvents.current
  });
  const classes = useUtilityClasses$1(ownerState);
  const PopperComponent = (_ref = (_slots$popper = slots.popper) != null ? _slots$popper : components.Popper) != null ? _ref : TooltipPopper;
  const TransitionComponent = (_ref2 = (_ref3 = (_slots$transition = slots.transition) != null ? _slots$transition : components.Transition) != null ? _ref3 : TransitionComponentProp) != null ? _ref2 : Grow;
  const TooltipComponent = (_ref4 = (_slots$tooltip = slots.tooltip) != null ? _slots$tooltip : components.Tooltip) != null ? _ref4 : TooltipTooltip;
  const ArrowComponent = (_ref5 = (_slots$arrow = slots.arrow) != null ? _slots$arrow : components.Arrow) != null ? _ref5 : TooltipArrow;
  const popperProps = appendOwnerState(PopperComponent, _extends$1({}, PopperProps, (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper, {
    className: clsx(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_ref6 = (_slotProps$popper2 = slotProps.popper) != null ? _slotProps$popper2 : componentsProps.popper) == null ? void 0 : _ref6.className)
  }), ownerState);
  const transitionProps = appendOwnerState(TransitionComponent, _extends$1({}, TransitionProps, (_slotProps$transition = slotProps.transition) != null ? _slotProps$transition : componentsProps.transition), ownerState);
  const tooltipProps = appendOwnerState(TooltipComponent, _extends$1({}, (_slotProps$tooltip = slotProps.tooltip) != null ? _slotProps$tooltip : componentsProps.tooltip, {
    className: clsx(classes.tooltip, (_ref7 = (_slotProps$tooltip2 = slotProps.tooltip) != null ? _slotProps$tooltip2 : componentsProps.tooltip) == null ? void 0 : _ref7.className)
  }), ownerState);
  const tooltipArrowProps = appendOwnerState(ArrowComponent, _extends$1({}, (_slotProps$arrow = slotProps.arrow) != null ? _slotProps$arrow : componentsProps.arrow, {
    className: clsx(classes.arrow, (_ref8 = (_slotProps$arrow2 = slotProps.arrow) != null ? _slotProps$arrow2 : componentsProps.arrow) == null ? void 0 : _ref8.className)
  }), ownerState);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
    children: [/* @__PURE__ */ reactExports.cloneElement(children, childrenProps), /* @__PURE__ */ jsxRuntimeExports.jsx(PopperComponent, _extends$1({
      as: PopperComponentProp != null ? PopperComponentProp : Popper,
      placement,
      anchorEl: followCursor ? {
        getBoundingClientRect: () => ({
          top: cursorPosition.y,
          left: cursorPosition.x,
          right: cursorPosition.x,
          bottom: cursorPosition.y,
          width: 0,
          height: 0
        })
      } : childNode,
      popperRef,
      open: childNode ? open : false,
      id: id2,
      transition: true
    }, interactiveWrapperListeners, popperProps, {
      popperOptions,
      children: ({
        TransitionProps: TransitionPropsInner
      }) => /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$1({
        timeout: theme.transitions.duration.shorter
      }, TransitionPropsInner, transitionProps, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, _extends$1({}, tooltipProps, {
          children: [title, arrow ? /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowComponent, _extends$1({}, tooltipArrowProps, {
            ref: setArrowRef
          })) : null]
        }))
      }))
    }))]
  });
});
function getSwitchUtilityClass(slot) {
  return generateUtilityClass("MuiSwitch", slot);
}
const switchClasses = generateUtilityClasses("MuiSwitch", ["root", "edgeStart", "edgeEnd", "switchBase", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium", "checked", "disabled", "input", "thumb", "track"]);
const _excluded = ["className", "color", "edge", "size", "sx"];
const useUtilityClasses = (ownerState) => {
  const {
    classes,
    edge,
    size,
    color,
    checked,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", edge && "edge".concat(capitalize(edge)), "size".concat(capitalize(size))],
    switchBase: ["switchBase", "color".concat(capitalize(color)), checked && "checked", disabled && "disabled"],
    thumb: ["thumb"],
    track: ["track"],
    input: ["input"]
  };
  const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);
  return _extends$1({}, classes, composedClasses);
};
const SwitchRoot = styled$1("span", {
  name: "MuiSwitch",
  slot: "Root",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, ownerState.edge && styles2["edge".concat(capitalize(ownerState.edge))], styles2["size".concat(capitalize(ownerState.size))]];
  }
})({
  display: "inline-flex",
  width: 34 + 12 * 2,
  height: 14 + 12 * 2,
  overflow: "hidden",
  padding: 12,
  boxSizing: "border-box",
  position: "relative",
  flexShrink: 0,
  zIndex: 0,
  // Reset the stacking context.
  verticalAlign: "middle",
  // For correct alignment with the text.
  "@media print": {
    colorAdjust: "exact"
  },
  variants: [{
    props: {
      edge: "start"
    },
    style: {
      marginLeft: -8
    }
  }, {
    props: {
      edge: "end"
    },
    style: {
      marginRight: -8
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      width: 40,
      height: 24,
      padding: 7,
      ["& .".concat(switchClasses.thumb)]: {
        width: 16,
        height: 16
      },
      ["& .".concat(switchClasses.switchBase)]: {
        padding: 4,
        ["&.".concat(switchClasses.checked)]: {
          transform: "translateX(16px)"
        }
      }
    }
  }]
});
const SwitchSwitchBase = styled$1(SwitchBase, {
  name: "MuiSwitch",
  slot: "SwitchBase",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.switchBase, {
      ["& .".concat(switchClasses.input)]: styles2.input
    }, ownerState.color !== "default" && styles2["color".concat(capitalize(ownerState.color))]];
  }
})(({
  theme
}) => ({
  position: "absolute",
  top: 0,
  left: 0,
  zIndex: 1,
  // Render above the focus ripple.
  color: theme.vars ? theme.vars.palette.Switch.defaultColor : "".concat(theme.palette.mode === "light" ? theme.palette.common.white : theme.palette.grey[300]),
  transition: theme.transitions.create(["left", "transform"], {
    duration: theme.transitions.duration.shortest
  }),
  ["&.".concat(switchClasses.checked)]: {
    transform: "translateX(20px)"
  },
  ["&.".concat(switchClasses.disabled)]: {
    color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : "".concat(theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[600])
  },
  ["&.".concat(switchClasses.checked, " + .").concat(switchClasses.track)]: {
    opacity: 0.5
  },
  ["&.".concat(switchClasses.disabled, " + .").concat(switchClasses.track)]: {
    opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : "".concat(theme.palette.mode === "light" ? 0.12 : 0.2)
  },
  ["& .".concat(switchClasses.input)]: {
    left: "-100%",
    width: "300%"
  }
}), ({
  theme
}) => ({
  "&:hover": {
    backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette.action.activeChannel, " / ").concat(theme.vars.palette.action.hoverOpacity, ")") : alpha_1(theme.palette.action.active, theme.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  variants: [...Object.entries(theme.palette).filter(([, value2]) => value2.main && value2.light).map(([color]) => ({
    props: {
      color
    },
    style: {
      ["&.".concat(switchClasses.checked)]: {
        color: (theme.vars || theme).palette[color].main,
        "&:hover": {
          backgroundColor: theme.vars ? "rgba(".concat(theme.vars.palette[color].mainChannel, " / ").concat(theme.vars.palette.action.hoverOpacity, ")") : alpha_1(theme.palette[color].main, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        ["&.".concat(switchClasses.disabled)]: {
          color: theme.vars ? theme.vars.palette.Switch["".concat(color, "DisabledColor")] : "".concat(theme.palette.mode === "light" ? lighten_1(theme.palette[color].main, 0.62) : darken_1(theme.palette[color].main, 0.55))
        }
      },
      ["&.".concat(switchClasses.checked, " + .").concat(switchClasses.track)]: {
        backgroundColor: (theme.vars || theme).palette[color].main
      }
    }
  }))]
}));
const SwitchTrack = styled$1("span", {
  name: "MuiSwitch",
  slot: "Track",
  overridesResolver: (props, styles2) => styles2.track
})(({
  theme
}) => ({
  height: "100%",
  width: "100%",
  borderRadius: 14 / 2,
  zIndex: -1,
  transition: theme.transitions.create(["opacity", "background-color"], {
    duration: theme.transitions.duration.shortest
  }),
  backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : "".concat(theme.palette.mode === "light" ? theme.palette.common.black : theme.palette.common.white),
  opacity: theme.vars ? theme.vars.opacity.switchTrack : "".concat(theme.palette.mode === "light" ? 0.38 : 0.3)
}));
const SwitchThumb = styled$1("span", {
  name: "MuiSwitch",
  slot: "Thumb",
  overridesResolver: (props, styles2) => styles2.thumb
})(({
  theme
}) => ({
  boxShadow: (theme.vars || theme).shadows[1],
  backgroundColor: "currentColor",
  width: 20,
  height: 20,
  borderRadius: "50%"
}));
const Switch = /* @__PURE__ */ reactExports.forwardRef(function Switch2(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: "MuiSwitch"
  });
  const {
    className,
    color = "primary",
    edge = false,
    size = "medium",
    sx
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const ownerState = _extends$1({}, props, {
    color,
    edge,
    size
  });
  const classes = useUtilityClasses(ownerState);
  const icon2 = /* @__PURE__ */ jsxRuntimeExports.jsx(SwitchThumb, {
    className: classes.thumb,
    ownerState
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(SwitchRoot, {
    className: clsx(classes.root, className),
    sx,
    ownerState,
    children: [/* @__PURE__ */ jsxRuntimeExports.jsx(SwitchSwitchBase, _extends$1({
      type: "checkbox",
      icon: icon2,
      checkedIcon: icon2,
      ref,
      ownerState
    }, other, {
      classes: _extends$1({}, classes, {
        root: classes.switchBase
      })
    })), /* @__PURE__ */ jsxRuntimeExports.jsx(SwitchTrack, {
      className: classes.track,
      ownerState
    })]
  });
});
const toggleButtonClasses = generateUtilityClasses("MuiToggleButton", ["root", "disabled", "selected", "standard", "primary", "secondary", "sizeSmall", "sizeMedium", "sizeLarge", "fullWidth"]);
const Edit = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z"
}), "Edit");
const FileUpload = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z"
}), "FileUpload");
const KeyboardArrowDown = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6z"
}), "KeyboardArrowDown");
const KeyboardArrowUp = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"
}), "KeyboardArrowUp");
const LogoutOutlined = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "m17 8-1.41 1.41L17.17 11H9v2h8.17l-1.58 1.58L17 16l4-4zM5 5h7V3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h7v-2H5z"
}), "LogoutOutlined");
const Person = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4m0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4"
}), "Person");
const Settings = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6"
}), "Settings");
const Visibility = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3"
}), "Visibility");
var dist = {};
var _extends = {};
var _global = { exports: {} };
var global$4 = _global.exports = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
if (typeof __g == "number") __g = global$4;
var _globalExports = _global.exports;
var _core = { exports: {} };
var core$4 = _core.exports = { version: "2.6.12" };
if (typeof __e == "number") __e = core$4;
var _coreExports = _core.exports;
var _aFunction = function(it) {
  if (typeof it != "function") throw TypeError(it + " is not a function!");
  return it;
};
var aFunction = _aFunction;
var _ctx = function(fn, that, length2) {
  aFunction(fn);
  if (that === void 0) return fn;
  switch (length2) {
    case 1:
      return function(a) {
        return fn.call(that, a);
      };
    case 2:
      return function(a, b) {
        return fn.call(that, a, b);
      };
    case 3:
      return function(a, b, c) {
        return fn.call(that, a, b, c);
      };
  }
  return function() {
    return fn.apply(that, arguments);
  };
};
var _objectDp = {};
var _isObject = function(it) {
  return typeof it === "object" ? it !== null : typeof it === "function";
};
var isObject$4 = _isObject;
var _anObject = function(it) {
  if (!isObject$4(it)) throw TypeError(it + " is not an object!");
  return it;
};
var _fails = function(exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};
var _descriptors = !_fails(function() {
  return Object.defineProperty({}, "a", { get: function() {
    return 7;
  } }).a != 7;
});
var _domCreate;
var hasRequired_domCreate;
function require_domCreate() {
  if (hasRequired_domCreate) return _domCreate;
  hasRequired_domCreate = 1;
  var isObject2 = _isObject;
  var document2 = _globalExports.document;
  var is = isObject2(document2) && isObject2(document2.createElement);
  _domCreate = function(it) {
    return is ? document2.createElement(it) : {};
  };
  return _domCreate;
}
var _ie8DomDefine = !_descriptors && !_fails(function() {
  return Object.defineProperty(require_domCreate()("div"), "a", { get: function() {
    return 7;
  } }).a != 7;
});
var isObject$3 = _isObject;
var _toPrimitive = function(it, S) {
  if (!isObject$3(it)) return it;
  var fn, val2;
  if (S && typeof (fn = it.toString) == "function" && !isObject$3(val2 = fn.call(it))) return val2;
  if (typeof (fn = it.valueOf) == "function" && !isObject$3(val2 = fn.call(it))) return val2;
  if (!S && typeof (fn = it.toString) == "function" && !isObject$3(val2 = fn.call(it))) return val2;
  throw TypeError("Can't convert object to primitive value");
};
var anObject$3 = _anObject;
var IE8_DOM_DEFINE$1 = _ie8DomDefine;
var toPrimitive$2 = _toPrimitive;
var dP$3 = Object.defineProperty;
_objectDp.f = _descriptors ? Object.defineProperty : function defineProperty2(O, P2, Attributes) {
  anObject$3(O);
  P2 = toPrimitive$2(P2, true);
  anObject$3(Attributes);
  if (IE8_DOM_DEFINE$1) try {
    return dP$3(O, P2, Attributes);
  } catch (e) {
  }
  if ("get" in Attributes || "set" in Attributes) throw TypeError("Accessors not supported!");
  if ("value" in Attributes) O[P2] = Attributes.value;
  return O;
};
var _propertyDesc = function(bitmap, value2) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value2
  };
};
var dP$2 = _objectDp;
var createDesc$2 = _propertyDesc;
var _hide = _descriptors ? function(object, key2, value2) {
  return dP$2.f(object, key2, createDesc$2(1, value2));
} : function(object, key2, value2) {
  object[key2] = value2;
  return object;
};
var hasOwnProperty = {}.hasOwnProperty;
var _has = function(it, key2) {
  return hasOwnProperty.call(it, key2);
};
var global$3 = _globalExports;
var core$3 = _coreExports;
var ctx = _ctx;
var hide$2 = _hide;
var has$6 = _has;
var PROTOTYPE$2 = "prototype";
var $export$7 = function(type, name2, source) {
  var IS_FORCED = type & $export$7.F;
  var IS_GLOBAL = type & $export$7.G;
  var IS_STATIC = type & $export$7.S;
  var IS_PROTO = type & $export$7.P;
  var IS_BIND = type & $export$7.B;
  var IS_WRAP = type & $export$7.W;
  var exports2 = IS_GLOBAL ? core$3 : core$3[name2] || (core$3[name2] = {});
  var expProto = exports2[PROTOTYPE$2];
  var target = IS_GLOBAL ? global$3 : IS_STATIC ? global$3[name2] : (global$3[name2] || {})[PROTOTYPE$2];
  var key2, own, out;
  if (IS_GLOBAL) source = name2;
  for (key2 in source) {
    own = !IS_FORCED && target && target[key2] !== void 0;
    if (own && has$6(exports2, key2)) continue;
    out = own ? target[key2] : source[key2];
    exports2[key2] = IS_GLOBAL && typeof target[key2] != "function" ? source[key2] : IS_BIND && own ? ctx(out, global$3) : IS_WRAP && target[key2] == out ? function(C) {
      var F = function(a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0:
              return new C();
            case 1:
              return new C(a);
            case 2:
              return new C(a, b);
          }
          return new C(a, b, c);
        }
        return C.apply(this, arguments);
      };
      F[PROTOTYPE$2] = C[PROTOTYPE$2];
      return F;
    }(out) : IS_PROTO && typeof out == "function" ? ctx(Function.call, out) : out;
    if (IS_PROTO) {
      (exports2.virtual || (exports2.virtual = {}))[key2] = out;
      if (type & $export$7.R && expProto && !expProto[key2]) hide$2(expProto, key2, out);
    }
  }
};
$export$7.F = 1;
$export$7.G = 2;
$export$7.S = 4;
$export$7.P = 8;
$export$7.B = 16;
$export$7.W = 32;
$export$7.U = 64;
$export$7.R = 128;
var _export = $export$7;
var toString$1 = {}.toString;
var _cof = function(it) {
  return toString$1.call(it).slice(8, -1);
};
var _iobject;
var hasRequired_iobject;
function require_iobject() {
  if (hasRequired_iobject) return _iobject;
  hasRequired_iobject = 1;
  var cof2 = _cof;
  _iobject = Object("z").propertyIsEnumerable(0) ? Object : function(it) {
    return cof2(it) == "String" ? it.split("") : Object(it);
  };
  return _iobject;
}
var _defined = function(it) {
  if (it == void 0) throw TypeError("Can't call method on  " + it);
  return it;
};
var IObject = require_iobject();
var defined$2 = _defined;
var _toIobject = function(it) {
  return IObject(defined$2(it));
};
var ceil = Math.ceil;
var floor = Math.floor;
var _toInteger = function(it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
var toInteger$2 = _toInteger;
var min$1 = Math.min;
var _toLength = function(it) {
  return it > 0 ? min$1(toInteger$2(it), 9007199254740991) : 0;
};
var toInteger$1 = _toInteger;
var max = Math.max;
var min = Math.min;
var _toAbsoluteIndex = function(index2, length2) {
  index2 = toInteger$1(index2);
  return index2 < 0 ? max(index2 + length2, 0) : min(index2, length2);
};
var toIObject$5 = _toIobject;
var toLength = _toLength;
var toAbsoluteIndex = _toAbsoluteIndex;
var _arrayIncludes = function(IS_INCLUDES) {
  return function($this, el, fromIndex) {
    var O = toIObject$5($this);
    var length2 = toLength(O.length);
    var index2 = toAbsoluteIndex(fromIndex, length2);
    var value2;
    if (IS_INCLUDES && el != el) while (length2 > index2) {
      value2 = O[index2++];
      if (value2 != value2) return true;
    }
    else for (; length2 > index2; index2++) if (IS_INCLUDES || index2 in O) {
      if (O[index2] === el) return IS_INCLUDES || index2 || 0;
    }
    return !IS_INCLUDES && -1;
  };
};
var _shared = { exports: {} };
var _library = true;
var core$2 = _coreExports;
var global$2 = _globalExports;
var SHARED = "__core-js_shared__";
var store$1 = global$2[SHARED] || (global$2[SHARED] = {});
(_shared.exports = function(key2, value2) {
  return store$1[key2] || (store$1[key2] = value2 !== void 0 ? value2 : {});
})("versions", []).push({
  version: core$2.version,
  mode: "pure",
  copyright: "© 2020 Denis Pushkarev (zloirock.ru)"
});
var _sharedExports = _shared.exports;
var id$1 = 0;
var px = Math.random();
var _uid = function(key2) {
  return "Symbol(".concat(key2 === void 0 ? "" : key2, ")_", (++id$1 + px).toString(36));
};
var shared$1 = _sharedExports("keys");
var uid$2 = _uid;
var _sharedKey = function(key2) {
  return shared$1[key2] || (shared$1[key2] = uid$2(key2));
};
var has$5 = _has;
var toIObject$4 = _toIobject;
var arrayIndexOf = _arrayIncludes(false);
var IE_PROTO$2 = _sharedKey("IE_PROTO");
var _objectKeysInternal = function(object, names) {
  var O = toIObject$4(object);
  var i2 = 0;
  var result = [];
  var key2;
  for (key2 in O) if (key2 != IE_PROTO$2) has$5(O, key2) && result.push(key2);
  while (names.length > i2) if (has$5(O, key2 = names[i2++])) {
    ~arrayIndexOf(result, key2) || result.push(key2);
  }
  return result;
};
var _enumBugKeys = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
var $keys$2 = _objectKeysInternal;
var enumBugKeys$1 = _enumBugKeys;
var _objectKeys = Object.keys || function keys(O) {
  return $keys$2(O, enumBugKeys$1);
};
var _objectGops = {};
_objectGops.f = Object.getOwnPropertySymbols;
var _objectPie = {};
var hasRequired_objectPie;
function require_objectPie() {
  if (hasRequired_objectPie) return _objectPie;
  hasRequired_objectPie = 1;
  _objectPie.f = {}.propertyIsEnumerable;
  return _objectPie;
}
var defined$1 = _defined;
var _toObject = function(it) {
  return Object(defined$1(it));
};
var _objectAssign;
var hasRequired_objectAssign;
function require_objectAssign() {
  if (hasRequired_objectAssign) return _objectAssign;
  hasRequired_objectAssign = 1;
  var DESCRIPTORS2 = _descriptors;
  var getKeys2 = _objectKeys;
  var gOPS2 = _objectGops;
  var pIE2 = require_objectPie();
  var toObject2 = _toObject;
  var IObject2 = require_iobject();
  var $assign = Object.assign;
  _objectAssign = !$assign || _fails(function() {
    var A = {};
    var B2 = {};
    var S = Symbol();
    var K = "abcdefghijklmnopqrst";
    A[S] = 7;
    K.split("").forEach(function(k2) {
      B2[k2] = k2;
    });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B2)).join("") != K;
  }) ? function assign2(target, source) {
    var T = toObject2(target);
    var aLen = arguments.length;
    var index2 = 1;
    var getSymbols = gOPS2.f;
    var isEnum2 = pIE2.f;
    while (aLen > index2) {
      var S = IObject2(arguments[index2++]);
      var keys2 = getSymbols ? getKeys2(S).concat(getSymbols(S)) : getKeys2(S);
      var length2 = keys2.length;
      var j2 = 0;
      var key2;
      while (length2 > j2) {
        key2 = keys2[j2++];
        if (!DESCRIPTORS2 || isEnum2.call(S, key2)) T[key2] = S[key2];
      }
    }
    return T;
  } : $assign;
  return _objectAssign;
}
var $export$6 = _export;
$export$6($export$6.S + $export$6.F, "Object", { assign: require_objectAssign() });
var assign$1 = _coreExports.Object.assign;
var assign = { "default": assign$1, __esModule: true };
_extends.__esModule = true;
var _assign = assign;
var _assign2 = _interopRequireDefault$a(_assign);
function _interopRequireDefault$a(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
_extends.default = _assign2.default || function(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2];
    for (var key2 in source) {
      if (Object.prototype.hasOwnProperty.call(source, key2)) {
        target[key2] = source[key2];
      }
    }
  }
  return target;
};
var has$4 = _has;
var toObject$2 = _toObject;
var IE_PROTO$1 = _sharedKey("IE_PROTO");
var ObjectProto$1 = Object.prototype;
var _objectGpo = Object.getPrototypeOf || function(O) {
  O = toObject$2(O);
  if (has$4(O, IE_PROTO$1)) return O[IE_PROTO$1];
  if (typeof O.constructor == "function" && O instanceof O.constructor) {
    return O.constructor.prototype;
  }
  return O instanceof Object ? ObjectProto$1 : null;
};
var $export$5 = _export;
var core$1 = _coreExports;
var fails = _fails;
var _objectSap = function(KEY, exec) {
  var fn = (core$1.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export$5($export$5.S + $export$5.F * fails(function() {
    fn(1);
  }), "Object", exp);
};
var toObject$1 = _toObject;
var $getPrototypeOf = _objectGpo;
_objectSap("getPrototypeOf", function() {
  return function getPrototypeOf2(it) {
    return $getPrototypeOf(toObject$1(it));
  };
});
var getPrototypeOf$2 = _coreExports.Object.getPrototypeOf;
var getPrototypeOf$1 = { "default": getPrototypeOf$2, __esModule: true };
var classCallCheck = {};
classCallCheck.__esModule = true;
classCallCheck.default = function(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
var createClass = {};
var $export$4 = _export;
$export$4($export$4.S + $export$4.F * !_descriptors, "Object", { defineProperty: _objectDp.f });
var $Object$1 = _coreExports.Object;
var defineProperty$2 = function defineProperty3(it, key2, desc) {
  return $Object$1.defineProperty(it, key2, desc);
};
var defineProperty$1 = { "default": defineProperty$2, __esModule: true };
createClass.__esModule = true;
var _defineProperty = defineProperty$1;
var _defineProperty2 = _interopRequireDefault$9(_defineProperty);
function _interopRequireDefault$9(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
createClass.default = /* @__PURE__ */ function() {
  function defineProperties3(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor2 = props[i2];
      descriptor2.enumerable = descriptor2.enumerable || false;
      descriptor2.configurable = true;
      if ("value" in descriptor2) descriptor2.writable = true;
      (0, _defineProperty2.default)(target, descriptor2.key, descriptor2);
    }
  }
  return function(Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties3(Constructor.prototype, protoProps);
    if (staticProps) defineProperties3(Constructor, staticProps);
    return Constructor;
  };
}();
var possibleConstructorReturn = {};
var _typeof$1 = {};
var toInteger = _toInteger;
var defined = _defined;
var _stringAt = function(TO_STRING) {
  return function(that, pos) {
    var s = String(defined(that));
    var i2 = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i2 < 0 || i2 >= l) return TO_STRING ? "" : void 0;
    a = s.charCodeAt(i2);
    return a < 55296 || a > 56319 || i2 + 1 === l || (b = s.charCodeAt(i2 + 1)) < 56320 || b > 57343 ? TO_STRING ? s.charAt(i2) : a : TO_STRING ? s.slice(i2, i2 + 2) : (a - 55296 << 10) + (b - 56320) + 65536;
  };
};
var _redefine = _hide;
var _iterators = {};
var dP$1 = _objectDp;
var anObject$2 = _anObject;
var getKeys$1 = _objectKeys;
var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject$2(O);
  var keys2 = getKeys$1(Properties);
  var length2 = keys2.length;
  var i2 = 0;
  var P2;
  while (length2 > i2) dP$1.f(O, P2 = keys2[i2++], Properties[P2]);
  return O;
};
var _html;
var hasRequired_html;
function require_html() {
  if (hasRequired_html) return _html;
  hasRequired_html = 1;
  var document2 = _globalExports.document;
  _html = document2 && document2.documentElement;
  return _html;
}
var anObject$1 = _anObject;
var dPs = _objectDps;
var enumBugKeys = _enumBugKeys;
var IE_PROTO = _sharedKey("IE_PROTO");
var Empty = function() {
};
var PROTOTYPE$1 = "prototype";
var createDict = function() {
  var iframe = require_domCreate()("iframe");
  var i2 = enumBugKeys.length;
  var lt = "<";
  var gt = ">";
  var iframeDocument;
  iframe.style.display = "none";
  require_html().appendChild(iframe);
  iframe.src = "javascript:";
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + "script" + gt + "document.F=Object" + lt + "/script" + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i2--) delete createDict[PROTOTYPE$1][enumBugKeys[i2]];
  return createDict();
};
var _objectCreate = Object.create || function create2(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE$1] = anObject$1(O);
    result = new Empty();
    Empty[PROTOTYPE$1] = null;
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === void 0 ? result : dPs(result, Properties);
};
var _wks = { exports: {} };
var store = _sharedExports("wks");
var uid$1 = _uid;
var Symbol$1 = _globalExports.Symbol;
var USE_SYMBOL = typeof Symbol$1 == "function";
var $exports = _wks.exports = function(name2) {
  return store[name2] || (store[name2] = USE_SYMBOL && Symbol$1[name2] || (USE_SYMBOL ? Symbol$1 : uid$1)("Symbol." + name2));
};
$exports.store = store;
var _wksExports = _wks.exports;
var def = _objectDp.f;
var has$3 = _has;
var TAG = _wksExports("toStringTag");
var _setToStringTag = function(it, tag, stat) {
  if (it && !has$3(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};
var create$2 = _objectCreate;
var descriptor = _propertyDesc;
var setToStringTag$2 = _setToStringTag;
var IteratorPrototype = {};
_hide(IteratorPrototype, _wksExports("iterator"), function() {
  return this;
});
var _iterCreate = function(Constructor, NAME2, next) {
  Constructor.prototype = create$2(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag$2(Constructor, NAME2 + " Iterator");
};
var $export$3 = _export;
var redefine$1 = _redefine;
var hide$1 = _hide;
var Iterators$2 = _iterators;
var $iterCreate = _iterCreate;
var setToStringTag$1 = _setToStringTag;
var getPrototypeOf = _objectGpo;
var ITERATOR = _wksExports("iterator");
var BUGGY = !([].keys && "next" in [].keys());
var FF_ITERATOR = "@@iterator";
var KEYS = "keys";
var VALUES = "values";
var returnThis = function() {
  return this;
};
var _iterDefine = function(Base, NAME2, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME2, next);
  var getMethod = function(kind) {
    if (!BUGGY && kind in proto2) return proto2[kind];
    switch (kind) {
      case KEYS:
        return function keys2() {
          return new Constructor(this, kind);
        };
      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }
    return function entries() {
      return new Constructor(this, kind);
    };
  };
  var TAG2 = NAME2 + " Iterator";
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto2 = Base.prototype;
  var $native = proto2[ITERATOR] || proto2[FF_ITERATOR] || DEFAULT && proto2[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod("entries") : void 0;
  var $anyNative = NAME2 == "Array" ? proto2.entries || $native : $native;
  var methods, key2, IteratorPrototype2;
  if ($anyNative) {
    IteratorPrototype2 = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype2 !== Object.prototype && IteratorPrototype2.next) {
      setToStringTag$1(IteratorPrototype2, TAG2, true);
    }
  }
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() {
      return $native.call(this);
    };
  }
  if (FORCED && (BUGGY || VALUES_BUG || !proto2[ITERATOR])) {
    hide$1(proto2, ITERATOR, $default);
  }
  Iterators$2[NAME2] = $default;
  Iterators$2[TAG2] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key2 in methods) {
      if (!(key2 in proto2)) redefine$1(proto2, key2, methods[key2]);
    }
    else $export$3($export$3.P + $export$3.F * (BUGGY || VALUES_BUG), NAME2, methods);
  }
  return methods;
};
var $at = _stringAt(true);
_iterDefine(String, "String", function(iterated) {
  this._t = String(iterated);
  this._i = 0;
}, function() {
  var O = this._t;
  var index2 = this._i;
  var point;
  if (index2 >= O.length) return { value: void 0, done: true };
  point = $at(O, index2);
  this._i += point.length;
  return { value: point, done: false };
});
var _iterStep = function(done, value2) {
  return { value: value2, done: !!done };
};
var step = _iterStep;
var Iterators$1 = _iterators;
var toIObject$3 = _toIobject;
_iterDefine(Array, "Array", function(iterated, kind) {
  this._t = toIObject$3(iterated);
  this._i = 0;
  this._k = kind;
}, function() {
  var O = this._t;
  var kind = this._k;
  var index2 = this._i++;
  if (!O || index2 >= O.length) {
    this._t = void 0;
    return step(1);
  }
  if (kind == "keys") return step(0, index2);
  if (kind == "values") return step(0, O[index2]);
  return step(0, [index2, O[index2]]);
}, "values");
Iterators$1.Arguments = Iterators$1.Array;
var global$1 = _globalExports;
var hide = _hide;
var Iterators = _iterators;
var TO_STRING_TAG = _wksExports("toStringTag");
var DOMIterables = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(",");
for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global$1[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}
var _wksExt = {};
_wksExt.f = _wksExports;
var iterator$1 = _wksExt.f("iterator");
var iterator = { "default": iterator$1, __esModule: true };
var _meta = { exports: {} };
var META$1 = _uid("meta");
var isObject$2 = _isObject;
var has$2 = _has;
var setDesc = _objectDp.f;
var id = 0;
var isExtensible = Object.isExtensible || function() {
  return true;
};
var FREEZE = !_fails(function() {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it) {
  setDesc(it, META$1, { value: {
    i: "O" + ++id,
    // object ID
    w: {}
    // weak collections IDs
  } });
};
var fastKey = function(it, create5) {
  if (!isObject$2(it)) return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
  if (!has$2(it, META$1)) {
    if (!isExtensible(it)) return "F";
    if (!create5) return "E";
    setMeta(it);
  }
  return it[META$1].i;
};
var getWeak = function(it, create5) {
  if (!has$2(it, META$1)) {
    if (!isExtensible(it)) return true;
    if (!create5) return false;
    setMeta(it);
  }
  return it[META$1].w;
};
var onFreeze = function(it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has$2(it, META$1)) setMeta(it);
  return it;
};
var meta = _meta.exports = {
  KEY: META$1,
  NEED: false,
  fastKey,
  getWeak,
  onFreeze
};
var _metaExports = _meta.exports;
var core = _coreExports;
var wksExt$1 = _wksExt;
var defineProperty = _objectDp.f;
var _wksDefine = function(name2) {
  var $Symbol2 = core.Symbol || (core.Symbol = {});
  if (name2.charAt(0) != "_" && !(name2 in $Symbol2)) defineProperty($Symbol2, name2, { value: wksExt$1.f(name2) });
};
var getKeys = _objectKeys;
var gOPS = _objectGops;
var pIE$1 = require_objectPie();
var _enumKeys = function(it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum2 = pIE$1.f;
    var i2 = 0;
    var key2;
    while (symbols.length > i2) if (isEnum2.call(it, key2 = symbols[i2++])) result.push(key2);
  }
  return result;
};
var cof = _cof;
var _isArray = Array.isArray || function isArray2(arg) {
  return cof(arg) == "Array";
};
var _objectGopnExt = {};
var _objectGopn = {};
var $keys$1 = _objectKeysInternal;
var hiddenKeys = _enumBugKeys.concat("length", "prototype");
_objectGopn.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys$1(O, hiddenKeys);
};
var toIObject$2 = _toIobject;
var gOPN$1 = _objectGopn.f;
var toString = {}.toString;
var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames = function(it) {
  try {
    return gOPN$1(it);
  } catch (e) {
    return windowNames.slice();
  }
};
_objectGopnExt.f = function getOwnPropertyNames2(it) {
  return windowNames && toString.call(it) == "[object Window]" ? getWindowNames(it) : gOPN$1(toIObject$2(it));
};
var _objectGopd = {};
var pIE = require_objectPie();
var createDesc$1 = _propertyDesc;
var toIObject$1 = _toIobject;
var toPrimitive$1 = _toPrimitive;
var has$1 = _has;
var IE8_DOM_DEFINE = _ie8DomDefine;
var gOPD$1 = Object.getOwnPropertyDescriptor;
_objectGopd.f = _descriptors ? gOPD$1 : function getOwnPropertyDescriptor(O, P2) {
  O = toIObject$1(O);
  P2 = toPrimitive$1(P2, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD$1(O, P2);
  } catch (e) {
  }
  if (has$1(O, P2)) return createDesc$1(!pIE.f.call(O, P2), O[P2]);
};
var global = _globalExports;
var has = _has;
var DESCRIPTORS = _descriptors;
var $export$2 = _export;
var redefine = _redefine;
var META = _metaExports.KEY;
var $fails = _fails;
var shared = _sharedExports;
var setToStringTag = _setToStringTag;
var uid = _uid;
var wks = _wksExports;
var wksExt = _wksExt;
var wksDefine = _wksDefine;
var enumKeys = _enumKeys;
var isArray = _isArray;
var anObject = _anObject;
var isObject$1 = _isObject;
var toObject = _toObject;
var toIObject = _toIobject;
var toPrimitive = _toPrimitive;
var createDesc = _propertyDesc;
var _create$1 = _objectCreate;
var gOPNExt = _objectGopnExt;
var $GOPD = _objectGopd;
var $GOPS = _objectGops;
var $DP = _objectDp;
var $keys = _objectKeys;
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = "prototype";
var HIDDEN = wks("_hidden");
var TO_PRIMITIVE = wks("toPrimitive");
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared("symbol-registry");
var AllSymbols = shared("symbols");
var OPSymbols = shared("op-symbols");
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == "function" && !!$GOPS.f;
var QObject = global.QObject;
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
var setSymbolDesc = DESCRIPTORS && $fails(function() {
  return _create$1(dP({}, "a", {
    get: function() {
      return dP(this, "a", { value: 7 }).a;
    }
  })).a != 7;
}) ? function(it, key2, D) {
  var protoDesc = gOPD(ObjectProto, key2);
  if (protoDesc) delete ObjectProto[key2];
  dP(it, key2, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key2, protoDesc);
} : dP;
var wrap = function(tag) {
  var sym = AllSymbols[tag] = _create$1($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};
var isSymbol = USE_NATIVE && typeof $Symbol.iterator == "symbol" ? function(it) {
  return typeof it == "symbol";
} : function(it) {
  return it instanceof $Symbol;
};
var $defineProperty = function defineProperty4(it, key2, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key2, D);
  anObject(it);
  key2 = toPrimitive(key2, true);
  anObject(D);
  if (has(AllSymbols, key2)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key2] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key2]) it[HIDDEN][key2] = false;
      D = _create$1(D, { enumerable: createDesc(0, false) });
    }
    return setSymbolDesc(it, key2, D);
  }
  return dP(it, key2, D);
};
var $defineProperties = function defineProperties2(it, P2) {
  anObject(it);
  var keys2 = enumKeys(P2 = toIObject(P2));
  var i2 = 0;
  var l = keys2.length;
  var key2;
  while (l > i2) $defineProperty(it, key2 = keys2[i2++], P2[key2]);
  return it;
};
var $create = function create3(it, P2) {
  return P2 === void 0 ? _create$1(it) : $defineProperties(_create$1(it), P2);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key2) {
  var E = isEnum.call(this, key2 = toPrimitive(key2, true));
  if (this === ObjectProto && has(AllSymbols, key2) && !has(OPSymbols, key2)) return false;
  return E || !has(this, key2) || !has(AllSymbols, key2) || has(this, HIDDEN) && this[HIDDEN][key2] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor2(it, key2) {
  it = toIObject(it);
  key2 = toPrimitive(key2, true);
  if (it === ObjectProto && has(AllSymbols, key2) && !has(OPSymbols, key2)) return;
  var D = gOPD(it, key2);
  if (D && has(AllSymbols, key2) && !(has(it, HIDDEN) && it[HIDDEN][key2])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames3(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i2 = 0;
  var key2;
  while (names.length > i2) {
    if (!has(AllSymbols, key2 = names[i2++]) && key2 != HIDDEN && key2 != META) result.push(key2);
  }
  return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i2 = 0;
  var key2;
  while (names.length > i2) {
    if (has(AllSymbols, key2 = names[i2++]) && (IS_OP ? has(ObjectProto, key2) : true)) result.push(AllSymbols[key2]);
  }
  return result;
};
if (!USE_NATIVE) {
  $Symbol = function Symbol2() {
    if (this instanceof $Symbol) throw TypeError("Symbol is not a constructor!");
    var tag = uid(arguments.length > 0 ? arguments[0] : void 0);
    var $set = function(value2) {
      if (this === ObjectProto) $set.call(OPSymbols, value2);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value2));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], "toString", function toString2() {
    return this._k;
  });
  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  _objectGopn.f = gOPNExt.f = $getOwnPropertyNames;
  require_objectPie().f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;
  if (DESCRIPTORS && !_library) {
    redefine(ObjectProto, "propertyIsEnumerable", $propertyIsEnumerable);
  }
  wksExt.f = function(name2) {
    return wrap(wks(name2));
  };
}
$export$2($export$2.G + $export$2.W + $export$2.F * !USE_NATIVE, { Symbol: $Symbol });
for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(",")
), j = 0; es6Symbols.length > j; ) wks(es6Symbols[j++]);
for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k; ) wksDefine(wellKnownSymbols[k++]);
$export$2($export$2.S + $export$2.F * !USE_NATIVE, "Symbol", {
  // 19.4.2.1 Symbol.for(key)
  "for": function(key2) {
    return has(SymbolRegistry, key2 += "") ? SymbolRegistry[key2] : SymbolRegistry[key2] = $Symbol(key2);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + " is not a symbol!");
    for (var key2 in SymbolRegistry) if (SymbolRegistry[key2] === sym) return key2;
  },
  useSetter: function() {
    setter = true;
  },
  useSimple: function() {
    setter = false;
  }
});
$export$2($export$2.S + $export$2.F * !USE_NATIVE, "Object", {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});
var FAILS_ON_PRIMITIVES = $fails(function() {
  $GOPS.f(1);
});
$export$2($export$2.S + $export$2.F * FAILS_ON_PRIMITIVES, "Object", {
  getOwnPropertySymbols: function getOwnPropertySymbols2(it) {
    return $GOPS.f(toObject(it));
  }
});
$JSON && $export$2($export$2.S + $export$2.F * (!USE_NATIVE || $fails(function() {
  var S = $Symbol();
  return _stringify([S]) != "[null]" || _stringify({ a: S }) != "{}" || _stringify(Object(S)) != "{}";
})), "JSON", {
  stringify: function stringify(it) {
    var args = [it];
    var i2 = 1;
    var replacer, $replacer;
    while (arguments.length > i2) args.push(arguments[i2++]);
    $replacer = replacer = args[1];
    if (!isObject$1(replacer) && it === void 0 || isSymbol(it)) return;
    if (!isArray(replacer)) replacer = function(key2, value2) {
      if (typeof $replacer == "function") value2 = $replacer.call(this, key2, value2);
      if (!isSymbol(value2)) return value2;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});
$Symbol[PROTOTYPE][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
setToStringTag($Symbol, "Symbol");
setToStringTag(Math, "Math", true);
setToStringTag(global.JSON, "JSON", true);
_wksDefine("asyncIterator");
_wksDefine("observable");
var symbol$1 = _coreExports.Symbol;
var symbol = { "default": symbol$1, __esModule: true };
_typeof$1.__esModule = true;
var _iterator = iterator;
var _iterator2 = _interopRequireDefault$8(_iterator);
var _symbol = symbol;
var _symbol2 = _interopRequireDefault$8(_symbol);
var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
};
function _interopRequireDefault$8(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
_typeof$1.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function(obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function(obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
possibleConstructorReturn.__esModule = true;
var _typeof2$1 = _typeof$1;
var _typeof3$1 = _interopRequireDefault$7(_typeof2$1);
function _interopRequireDefault$7(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
possibleConstructorReturn.default = function(self2, call) {
  if (!self2) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3$1.default)(call)) === "object" || typeof call === "function") ? call : self2;
};
var inherits = {};
var _setProto;
var hasRequired_setProto;
function require_setProto() {
  if (hasRequired_setProto) return _setProto;
  hasRequired_setProto = 1;
  var isObject2 = _isObject;
  var anObject2 = _anObject;
  var check = function(O, proto2) {
    anObject2(O);
    if (!isObject2(proto2) && proto2 !== null) throw TypeError(proto2 + ": can't set as prototype!");
  };
  _setProto = {
    set: Object.setPrototypeOf || ("__proto__" in {} ? (
      // eslint-disable-line
      function(test, buggy, set2) {
        try {
          set2 = _ctx(Function.call, _objectGopd.f(Object.prototype, "__proto__").set, 2);
          set2(test, []);
          buggy = !(test instanceof Array);
        } catch (e) {
          buggy = true;
        }
        return function setPrototypeOf2(O, proto2) {
          check(O, proto2);
          if (buggy) O.__proto__ = proto2;
          else set2(O, proto2);
          return O;
        };
      }({}, false)
    ) : void 0),
    check
  };
  return _setProto;
}
var $export$1 = _export;
$export$1($export$1.S, "Object", { setPrototypeOf: require_setProto().set });
var setPrototypeOf$1 = _coreExports.Object.setPrototypeOf;
var setPrototypeOf = { "default": setPrototypeOf$1, __esModule: true };
var $export = _export;
$export($export.S, "Object", { create: _objectCreate });
var $Object = _coreExports.Object;
var create$1 = function create4(P2, D) {
  return $Object.create(P2, D);
};
var create = { "default": create$1, __esModule: true };
inherits.__esModule = true;
var _setPrototypeOf = setPrototypeOf;
var _setPrototypeOf2 = _interopRequireDefault$6(_setPrototypeOf);
var _create = create;
var _create2 = _interopRequireDefault$6(_create);
var _typeof2 = _typeof$1;
var _typeof3 = _interopRequireDefault$6(_typeof2);
function _interopRequireDefault$6(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
inherits.default = function(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }
  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};
var lottie = { exports: {} };
(function(module, exports) {
  typeof navigator !== "undefined" && function(global2, factory) {
    module.exports = factory();
  }(commonjsGlobal, function() {
    var svgNS = "http://www.w3.org/2000/svg";
    var locationHref = "";
    var _useWebWorker = false;
    var initialDefaultFrame = -999999;
    var setWebWorker = function setWebWorker2(flag) {
      _useWebWorker = !!flag;
    };
    var getWebWorker = function getWebWorker2() {
      return _useWebWorker;
    };
    var setLocationHref = function setLocationHref2(value2) {
      locationHref = value2;
    };
    var getLocationHref = function getLocationHref2() {
      return locationHref;
    };
    function createTag(type) {
      return document.createElement(type);
    }
    function extendPrototype(sources, destination) {
      var i2;
      var len = sources.length;
      var sourcePrototype;
      for (i2 = 0; i2 < len; i2 += 1) {
        sourcePrototype = sources[i2].prototype;
        for (var attr in sourcePrototype) {
          if (Object.prototype.hasOwnProperty.call(sourcePrototype, attr)) destination.prototype[attr] = sourcePrototype[attr];
        }
      }
    }
    function getDescriptor(object, prop) {
      return Object.getOwnPropertyDescriptor(object, prop);
    }
    function createProxyFunction(prototype) {
      function ProxyFunction() {
      }
      ProxyFunction.prototype = prototype;
      return ProxyFunction;
    }
    var audioControllerFactory = function() {
      function AudioController(audioFactory) {
        this.audios = [];
        this.audioFactory = audioFactory;
        this._volume = 1;
        this._isMuted = false;
      }
      AudioController.prototype = {
        addAudio: function addAudio(audio) {
          this.audios.push(audio);
        },
        pause: function pause() {
          var i2;
          var len = this.audios.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this.audios[i2].pause();
          }
        },
        resume: function resume() {
          var i2;
          var len = this.audios.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this.audios[i2].resume();
          }
        },
        setRate: function setRate(rateValue) {
          var i2;
          var len = this.audios.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this.audios[i2].setRate(rateValue);
          }
        },
        createAudio: function createAudio(assetPath) {
          if (this.audioFactory) {
            return this.audioFactory(assetPath);
          }
          if (window.Howl) {
            return new window.Howl({
              src: [assetPath]
            });
          }
          return {
            isPlaying: false,
            play: function play() {
              this.isPlaying = true;
            },
            seek: function seek() {
              this.isPlaying = false;
            },
            playing: function playing() {
            },
            rate: function rate() {
            },
            setVolume: function setVolume() {
            }
          };
        },
        setAudioFactory: function setAudioFactory(audioFactory) {
          this.audioFactory = audioFactory;
        },
        setVolume: function setVolume(value2) {
          this._volume = value2;
          this._updateVolume();
        },
        mute: function mute() {
          this._isMuted = true;
          this._updateVolume();
        },
        unmute: function unmute() {
          this._isMuted = false;
          this._updateVolume();
        },
        getVolume: function getVolume() {
          return this._volume;
        },
        _updateVolume: function _updateVolume() {
          var i2;
          var len = this.audios.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this.audios[i2].volume(this._volume * (this._isMuted ? 0 : 1));
          }
        }
      };
      return function() {
        return new AudioController();
      };
    }();
    var createTypedArray = function() {
      function createRegularArray(type, len) {
        var i2 = 0;
        var arr = [];
        var value2;
        switch (type) {
          case "int16":
          case "uint8c":
            value2 = 1;
            break;
          default:
            value2 = 1.1;
            break;
        }
        for (i2 = 0; i2 < len; i2 += 1) {
          arr.push(value2);
        }
        return arr;
      }
      function createTypedArrayFactory(type, len) {
        if (type === "float32") {
          return new Float32Array(len);
        }
        if (type === "int16") {
          return new Int16Array(len);
        }
        if (type === "uint8c") {
          return new Uint8ClampedArray(len);
        }
        return createRegularArray(type, len);
      }
      if (typeof Uint8ClampedArray === "function" && typeof Float32Array === "function") {
        return createTypedArrayFactory;
      }
      return createRegularArray;
    }();
    function createSizedArray(len) {
      return Array.apply(null, {
        length: len
      });
    }
    function _typeof$6(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$6 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$6 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$6(obj);
    }
    var subframeEnabled = true;
    var expressionsPlugin = null;
    var expressionsInterfaces = null;
    var idPrefix$1 = "";
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    var bmPow = Math.pow;
    var bmSqrt = Math.sqrt;
    var bmFloor = Math.floor;
    var bmMax = Math.max;
    var bmMin = Math.min;
    var BMMath = {};
    (function() {
      var propertyNames = ["abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2", "ceil", "cbrt", "expm1", "clz32", "cos", "cosh", "exp", "floor", "fround", "hypot", "imul", "log", "log1p", "log2", "log10", "max", "min", "pow", "random", "round", "sign", "sin", "sinh", "sqrt", "tan", "tanh", "trunc", "E", "LN10", "LN2", "LOG10E", "LOG2E", "PI", "SQRT1_2", "SQRT2"];
      var i2;
      var len = propertyNames.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        BMMath[propertyNames[i2]] = Math[propertyNames[i2]];
      }
    })();
    BMMath.random = Math.random;
    BMMath.abs = function(val2) {
      var tOfVal = _typeof$6(val2);
      if (tOfVal === "object" && val2.length) {
        var absArr = createSizedArray(val2.length);
        var i2;
        var len = val2.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          absArr[i2] = Math.abs(val2[i2]);
        }
        return absArr;
      }
      return Math.abs(val2);
    };
    var defaultCurveSegments = 150;
    var degToRads = Math.PI / 180;
    var roundCorner = 0.5519;
    function styleDiv(element) {
      element.style.position = "absolute";
      element.style.top = 0;
      element.style.left = 0;
      element.style.display = "block";
      element.style.transformOrigin = "0 0";
      element.style.webkitTransformOrigin = "0 0";
      element.style.backfaceVisibility = "visible";
      element.style.webkitBackfaceVisibility = "visible";
      element.style.transformStyle = "preserve-3d";
      element.style.webkitTransformStyle = "preserve-3d";
      element.style.mozTransformStyle = "preserve-3d";
    }
    function BMEnterFrameEvent(type, currentTime, totalTime, frameMultiplier) {
      this.type = type;
      this.currentTime = currentTime;
      this.totalTime = totalTime;
      this.direction = frameMultiplier < 0 ? -1 : 1;
    }
    function BMCompleteEvent(type, frameMultiplier) {
      this.type = type;
      this.direction = frameMultiplier < 0 ? -1 : 1;
    }
    function BMCompleteLoopEvent(type, totalLoops, currentLoop, frameMultiplier) {
      this.type = type;
      this.currentLoop = currentLoop;
      this.totalLoops = totalLoops;
      this.direction = frameMultiplier < 0 ? -1 : 1;
    }
    function BMSegmentStartEvent(type, firstFrame, totalFrames) {
      this.type = type;
      this.firstFrame = firstFrame;
      this.totalFrames = totalFrames;
    }
    function BMDestroyEvent(type, target) {
      this.type = type;
      this.target = target;
    }
    function BMRenderFrameErrorEvent(nativeError, currentTime) {
      this.type = "renderFrameError";
      this.nativeError = nativeError;
      this.currentTime = currentTime;
    }
    function BMConfigErrorEvent(nativeError) {
      this.type = "configError";
      this.nativeError = nativeError;
    }
    var createElementID = /* @__PURE__ */ function() {
      var _count = 0;
      return function createID() {
        _count += 1;
        return idPrefix$1 + "__lottie_element_" + _count;
      };
    }();
    function HSVtoRGB(h, s, v2) {
      var r;
      var g;
      var b;
      var i2;
      var f;
      var p;
      var q;
      var t;
      i2 = Math.floor(h * 6);
      f = h * 6 - i2;
      p = v2 * (1 - s);
      q = v2 * (1 - f * s);
      t = v2 * (1 - (1 - f) * s);
      switch (i2 % 6) {
        case 0:
          r = v2;
          g = t;
          b = p;
          break;
        case 1:
          r = q;
          g = v2;
          b = p;
          break;
        case 2:
          r = p;
          g = v2;
          b = t;
          break;
        case 3:
          r = p;
          g = q;
          b = v2;
          break;
        case 4:
          r = t;
          g = p;
          b = v2;
          break;
        case 5:
          r = v2;
          g = p;
          b = q;
          break;
      }
      return [r, g, b];
    }
    function RGBtoHSV(r, g, b) {
      var max2 = Math.max(r, g, b);
      var min2 = Math.min(r, g, b);
      var d = max2 - min2;
      var h;
      var s = max2 === 0 ? 0 : d / max2;
      var v2 = max2 / 255;
      switch (max2) {
        case min2:
          h = 0;
          break;
        case r:
          h = g - b + d * (g < b ? 6 : 0);
          h /= 6 * d;
          break;
        case g:
          h = b - r + d * 2;
          h /= 6 * d;
          break;
        case b:
          h = r - g + d * 4;
          h /= 6 * d;
          break;
      }
      return [h, s, v2];
    }
    function addSaturationToRGB(color, offset) {
      var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
      hsv[1] += offset;
      if (hsv[1] > 1) {
        hsv[1] = 1;
      } else if (hsv[1] <= 0) {
        hsv[1] = 0;
      }
      return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }
    function addBrightnessToRGB(color, offset) {
      var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
      hsv[2] += offset;
      if (hsv[2] > 1) {
        hsv[2] = 1;
      } else if (hsv[2] < 0) {
        hsv[2] = 0;
      }
      return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }
    function addHueToRGB(color, offset) {
      var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
      hsv[0] += offset / 360;
      if (hsv[0] > 1) {
        hsv[0] -= 1;
      } else if (hsv[0] < 0) {
        hsv[0] += 1;
      }
      return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }
    var rgbToHex = function() {
      var colorMap = [];
      var i2;
      var hex;
      for (i2 = 0; i2 < 256; i2 += 1) {
        hex = i2.toString(16);
        colorMap[i2] = hex.length === 1 ? "0" + hex : hex;
      }
      return function(r, g, b) {
        if (r < 0) {
          r = 0;
        }
        if (g < 0) {
          g = 0;
        }
        if (b < 0) {
          b = 0;
        }
        return "#" + colorMap[r] + colorMap[g] + colorMap[b];
      };
    }();
    var setSubframeEnabled = function setSubframeEnabled2(flag) {
      subframeEnabled = !!flag;
    };
    var getSubframeEnabled = function getSubframeEnabled2() {
      return subframeEnabled;
    };
    var setExpressionsPlugin = function setExpressionsPlugin2(value2) {
      expressionsPlugin = value2;
    };
    var getExpressionsPlugin = function getExpressionsPlugin2() {
      return expressionsPlugin;
    };
    var setExpressionInterfaces = function setExpressionInterfaces2(value2) {
      expressionsInterfaces = value2;
    };
    var getExpressionInterfaces = function getExpressionInterfaces2() {
      return expressionsInterfaces;
    };
    var setDefaultCurveSegments = function setDefaultCurveSegments2(value2) {
      defaultCurveSegments = value2;
    };
    var getDefaultCurveSegments = function getDefaultCurveSegments2() {
      return defaultCurveSegments;
    };
    var setIdPrefix = function setIdPrefix2(value2) {
      idPrefix$1 = value2;
    };
    function createNS(type) {
      return document.createElementNS(svgNS, type);
    }
    function _typeof$5(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$5 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$5 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$5(obj);
    }
    var dataManager = /* @__PURE__ */ function() {
      var _counterId = 1;
      var processes = [];
      var workerFn;
      var workerInstance;
      var workerProxy = {
        onmessage: function onmessage() {
        },
        postMessage: function postMessage(path) {
          workerFn({
            data: path
          });
        }
      };
      var _workerSelf = {
        postMessage: function postMessage(data2) {
          workerProxy.onmessage({
            data: data2
          });
        }
      };
      function createWorker(fn) {
        if (window.Worker && window.Blob && getWebWorker()) {
          var blob = new Blob(["var _workerSelf = self; self.onmessage = ", fn.toString()], {
            type: "text/javascript"
          });
          var url = URL.createObjectURL(blob);
          return new Worker(url);
        }
        workerFn = fn;
        return workerProxy;
      }
      function setupWorker() {
        if (!workerInstance) {
          workerInstance = createWorker(function workerStart(e) {
            function dataFunctionManager() {
              function completeLayers(layers, comps) {
                var layerData;
                var i2;
                var len = layers.length;
                var j2;
                var jLen;
                var k2;
                var kLen;
                for (i2 = 0; i2 < len; i2 += 1) {
                  layerData = layers[i2];
                  if ("ks" in layerData && !layerData.completed) {
                    layerData.completed = true;
                    if (layerData.hasMask) {
                      var maskProps = layerData.masksProperties;
                      jLen = maskProps.length;
                      for (j2 = 0; j2 < jLen; j2 += 1) {
                        if (maskProps[j2].pt.k.i) {
                          convertPathsToAbsoluteValues(maskProps[j2].pt.k);
                        } else {
                          kLen = maskProps[j2].pt.k.length;
                          for (k2 = 0; k2 < kLen; k2 += 1) {
                            if (maskProps[j2].pt.k[k2].s) {
                              convertPathsToAbsoluteValues(maskProps[j2].pt.k[k2].s[0]);
                            }
                            if (maskProps[j2].pt.k[k2].e) {
                              convertPathsToAbsoluteValues(maskProps[j2].pt.k[k2].e[0]);
                            }
                          }
                        }
                      }
                    }
                    if (layerData.ty === 0) {
                      layerData.layers = findCompLayers(layerData.refId, comps);
                      completeLayers(layerData.layers, comps);
                    } else if (layerData.ty === 4) {
                      completeShapes(layerData.shapes);
                    } else if (layerData.ty === 5) {
                      completeText(layerData);
                    }
                  }
                }
              }
              function completeChars(chars, assets) {
                if (chars) {
                  var i2 = 0;
                  var len = chars.length;
                  for (i2 = 0; i2 < len; i2 += 1) {
                    if (chars[i2].t === 1) {
                      chars[i2].data.layers = findCompLayers(chars[i2].data.refId, assets);
                      completeLayers(chars[i2].data.layers, assets);
                    }
                  }
                }
              }
              function findComp(id2, comps) {
                var i2 = 0;
                var len = comps.length;
                while (i2 < len) {
                  if (comps[i2].id === id2) {
                    return comps[i2];
                  }
                  i2 += 1;
                }
                return null;
              }
              function findCompLayers(id2, comps) {
                var comp2 = findComp(id2, comps);
                if (comp2) {
                  if (!comp2.layers.__used) {
                    comp2.layers.__used = true;
                    return comp2.layers;
                  }
                  return JSON.parse(JSON.stringify(comp2.layers));
                }
                return null;
              }
              function completeShapes(arr) {
                var i2;
                var len = arr.length;
                var j2;
                var jLen;
                for (i2 = len - 1; i2 >= 0; i2 -= 1) {
                  if (arr[i2].ty === "sh") {
                    if (arr[i2].ks.k.i) {
                      convertPathsToAbsoluteValues(arr[i2].ks.k);
                    } else {
                      jLen = arr[i2].ks.k.length;
                      for (j2 = 0; j2 < jLen; j2 += 1) {
                        if (arr[i2].ks.k[j2].s) {
                          convertPathsToAbsoluteValues(arr[i2].ks.k[j2].s[0]);
                        }
                        if (arr[i2].ks.k[j2].e) {
                          convertPathsToAbsoluteValues(arr[i2].ks.k[j2].e[0]);
                        }
                      }
                    }
                  } else if (arr[i2].ty === "gr") {
                    completeShapes(arr[i2].it);
                  }
                }
              }
              function convertPathsToAbsoluteValues(path) {
                var i2;
                var len = path.i.length;
                for (i2 = 0; i2 < len; i2 += 1) {
                  path.i[i2][0] += path.v[i2][0];
                  path.i[i2][1] += path.v[i2][1];
                  path.o[i2][0] += path.v[i2][0];
                  path.o[i2][1] += path.v[i2][1];
                }
              }
              function checkVersion(minimum, animVersionString) {
                var animVersion = animVersionString ? animVersionString.split(".") : [100, 100, 100];
                if (minimum[0] > animVersion[0]) {
                  return true;
                }
                if (animVersion[0] > minimum[0]) {
                  return false;
                }
                if (minimum[1] > animVersion[1]) {
                  return true;
                }
                if (animVersion[1] > minimum[1]) {
                  return false;
                }
                if (minimum[2] > animVersion[2]) {
                  return true;
                }
                if (animVersion[2] > minimum[2]) {
                  return false;
                }
                return null;
              }
              var checkText = /* @__PURE__ */ function() {
                var minimumVersion = [4, 4, 14];
                function updateTextLayer(textLayer) {
                  var documentData = textLayer.t.d;
                  textLayer.t.d = {
                    k: [{
                      s: documentData,
                      t: 0
                    }]
                  };
                }
                function iterateLayers(layers) {
                  var i2;
                  var len = layers.length;
                  for (i2 = 0; i2 < len; i2 += 1) {
                    if (layers[i2].ty === 5) {
                      updateTextLayer(layers[i2]);
                    }
                  }
                }
                return function(animationData) {
                  if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                      var i2;
                      var len = animationData.assets.length;
                      for (i2 = 0; i2 < len; i2 += 1) {
                        if (animationData.assets[i2].layers) {
                          iterateLayers(animationData.assets[i2].layers);
                        }
                      }
                    }
                  }
                };
              }();
              var checkChars = /* @__PURE__ */ function() {
                var minimumVersion = [4, 7, 99];
                return function(animationData) {
                  if (animationData.chars && !checkVersion(minimumVersion, animationData.v)) {
                    var i2;
                    var len = animationData.chars.length;
                    for (i2 = 0; i2 < len; i2 += 1) {
                      var charData = animationData.chars[i2];
                      if (charData.data && charData.data.shapes) {
                        completeShapes(charData.data.shapes);
                        charData.data.ip = 0;
                        charData.data.op = 99999;
                        charData.data.st = 0;
                        charData.data.sr = 1;
                        charData.data.ks = {
                          p: {
                            k: [0, 0],
                            a: 0
                          },
                          s: {
                            k: [100, 100],
                            a: 0
                          },
                          a: {
                            k: [0, 0],
                            a: 0
                          },
                          r: {
                            k: 0,
                            a: 0
                          },
                          o: {
                            k: 100,
                            a: 0
                          }
                        };
                        if (!animationData.chars[i2].t) {
                          charData.data.shapes.push({
                            ty: "no"
                          });
                          charData.data.shapes[0].it.push({
                            p: {
                              k: [0, 0],
                              a: 0
                            },
                            s: {
                              k: [100, 100],
                              a: 0
                            },
                            a: {
                              k: [0, 0],
                              a: 0
                            },
                            r: {
                              k: 0,
                              a: 0
                            },
                            o: {
                              k: 100,
                              a: 0
                            },
                            sk: {
                              k: 0,
                              a: 0
                            },
                            sa: {
                              k: 0,
                              a: 0
                            },
                            ty: "tr"
                          });
                        }
                      }
                    }
                  }
                };
              }();
              var checkPathProperties = /* @__PURE__ */ function() {
                var minimumVersion = [5, 7, 15];
                function updateTextLayer(textLayer) {
                  var pathData = textLayer.t.p;
                  if (typeof pathData.a === "number") {
                    pathData.a = {
                      a: 0,
                      k: pathData.a
                    };
                  }
                  if (typeof pathData.p === "number") {
                    pathData.p = {
                      a: 0,
                      k: pathData.p
                    };
                  }
                  if (typeof pathData.r === "number") {
                    pathData.r = {
                      a: 0,
                      k: pathData.r
                    };
                  }
                }
                function iterateLayers(layers) {
                  var i2;
                  var len = layers.length;
                  for (i2 = 0; i2 < len; i2 += 1) {
                    if (layers[i2].ty === 5) {
                      updateTextLayer(layers[i2]);
                    }
                  }
                }
                return function(animationData) {
                  if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                      var i2;
                      var len = animationData.assets.length;
                      for (i2 = 0; i2 < len; i2 += 1) {
                        if (animationData.assets[i2].layers) {
                          iterateLayers(animationData.assets[i2].layers);
                        }
                      }
                    }
                  }
                };
              }();
              var checkColors = /* @__PURE__ */ function() {
                var minimumVersion = [4, 1, 9];
                function iterateShapes(shapes) {
                  var i2;
                  var len = shapes.length;
                  var j2;
                  var jLen;
                  for (i2 = 0; i2 < len; i2 += 1) {
                    if (shapes[i2].ty === "gr") {
                      iterateShapes(shapes[i2].it);
                    } else if (shapes[i2].ty === "fl" || shapes[i2].ty === "st") {
                      if (shapes[i2].c.k && shapes[i2].c.k[0].i) {
                        jLen = shapes[i2].c.k.length;
                        for (j2 = 0; j2 < jLen; j2 += 1) {
                          if (shapes[i2].c.k[j2].s) {
                            shapes[i2].c.k[j2].s[0] /= 255;
                            shapes[i2].c.k[j2].s[1] /= 255;
                            shapes[i2].c.k[j2].s[2] /= 255;
                            shapes[i2].c.k[j2].s[3] /= 255;
                          }
                          if (shapes[i2].c.k[j2].e) {
                            shapes[i2].c.k[j2].e[0] /= 255;
                            shapes[i2].c.k[j2].e[1] /= 255;
                            shapes[i2].c.k[j2].e[2] /= 255;
                            shapes[i2].c.k[j2].e[3] /= 255;
                          }
                        }
                      } else {
                        shapes[i2].c.k[0] /= 255;
                        shapes[i2].c.k[1] /= 255;
                        shapes[i2].c.k[2] /= 255;
                        shapes[i2].c.k[3] /= 255;
                      }
                    }
                  }
                }
                function iterateLayers(layers) {
                  var i2;
                  var len = layers.length;
                  for (i2 = 0; i2 < len; i2 += 1) {
                    if (layers[i2].ty === 4) {
                      iterateShapes(layers[i2].shapes);
                    }
                  }
                }
                return function(animationData) {
                  if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                      var i2;
                      var len = animationData.assets.length;
                      for (i2 = 0; i2 < len; i2 += 1) {
                        if (animationData.assets[i2].layers) {
                          iterateLayers(animationData.assets[i2].layers);
                        }
                      }
                    }
                  }
                };
              }();
              var checkShapes = /* @__PURE__ */ function() {
                var minimumVersion = [4, 4, 18];
                function completeClosingShapes(arr) {
                  var i2;
                  var len = arr.length;
                  var j2;
                  var jLen;
                  for (i2 = len - 1; i2 >= 0; i2 -= 1) {
                    if (arr[i2].ty === "sh") {
                      if (arr[i2].ks.k.i) {
                        arr[i2].ks.k.c = arr[i2].closed;
                      } else {
                        jLen = arr[i2].ks.k.length;
                        for (j2 = 0; j2 < jLen; j2 += 1) {
                          if (arr[i2].ks.k[j2].s) {
                            arr[i2].ks.k[j2].s[0].c = arr[i2].closed;
                          }
                          if (arr[i2].ks.k[j2].e) {
                            arr[i2].ks.k[j2].e[0].c = arr[i2].closed;
                          }
                        }
                      }
                    } else if (arr[i2].ty === "gr") {
                      completeClosingShapes(arr[i2].it);
                    }
                  }
                }
                function iterateLayers(layers) {
                  var layerData;
                  var i2;
                  var len = layers.length;
                  var j2;
                  var jLen;
                  var k2;
                  var kLen;
                  for (i2 = 0; i2 < len; i2 += 1) {
                    layerData = layers[i2];
                    if (layerData.hasMask) {
                      var maskProps = layerData.masksProperties;
                      jLen = maskProps.length;
                      for (j2 = 0; j2 < jLen; j2 += 1) {
                        if (maskProps[j2].pt.k.i) {
                          maskProps[j2].pt.k.c = maskProps[j2].cl;
                        } else {
                          kLen = maskProps[j2].pt.k.length;
                          for (k2 = 0; k2 < kLen; k2 += 1) {
                            if (maskProps[j2].pt.k[k2].s) {
                              maskProps[j2].pt.k[k2].s[0].c = maskProps[j2].cl;
                            }
                            if (maskProps[j2].pt.k[k2].e) {
                              maskProps[j2].pt.k[k2].e[0].c = maskProps[j2].cl;
                            }
                          }
                        }
                      }
                    }
                    if (layerData.ty === 4) {
                      completeClosingShapes(layerData.shapes);
                    }
                  }
                }
                return function(animationData) {
                  if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                      var i2;
                      var len = animationData.assets.length;
                      for (i2 = 0; i2 < len; i2 += 1) {
                        if (animationData.assets[i2].layers) {
                          iterateLayers(animationData.assets[i2].layers);
                        }
                      }
                    }
                  }
                };
              }();
              function completeData(animationData) {
                if (animationData.__complete) {
                  return;
                }
                checkColors(animationData);
                checkText(animationData);
                checkChars(animationData);
                checkPathProperties(animationData);
                checkShapes(animationData);
                completeLayers(animationData.layers, animationData.assets);
                completeChars(animationData.chars, animationData.assets);
                animationData.__complete = true;
              }
              function completeText(data2) {
                if (data2.t.a.length === 0 && !("m" in data2.t.p)) ;
              }
              var moduleOb = {};
              moduleOb.completeData = completeData;
              moduleOb.checkColors = checkColors;
              moduleOb.checkChars = checkChars;
              moduleOb.checkPathProperties = checkPathProperties;
              moduleOb.checkShapes = checkShapes;
              moduleOb.completeLayers = completeLayers;
              return moduleOb;
            }
            if (!_workerSelf.dataManager) {
              _workerSelf.dataManager = dataFunctionManager();
            }
            if (!_workerSelf.assetLoader) {
              _workerSelf.assetLoader = /* @__PURE__ */ function() {
                function formatResponse(xhr) {
                  var contentTypeHeader = xhr.getResponseHeader("content-type");
                  if (contentTypeHeader && xhr.responseType === "json" && contentTypeHeader.indexOf("json") !== -1) {
                    return xhr.response;
                  }
                  if (xhr.response && _typeof$5(xhr.response) === "object") {
                    return xhr.response;
                  }
                  if (xhr.response && typeof xhr.response === "string") {
                    return JSON.parse(xhr.response);
                  }
                  if (xhr.responseText) {
                    return JSON.parse(xhr.responseText);
                  }
                  return null;
                }
                function loadAsset(path, fullPath, callback, errorCallback) {
                  var response;
                  var xhr = new XMLHttpRequest();
                  try {
                    xhr.responseType = "json";
                  } catch (err) {
                  }
                  xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                      if (xhr.status === 200) {
                        response = formatResponse(xhr);
                        callback(response);
                      } else {
                        try {
                          response = formatResponse(xhr);
                          callback(response);
                        } catch (err) {
                          if (errorCallback) {
                            errorCallback(err);
                          }
                        }
                      }
                    }
                  };
                  try {
                    xhr.open(["G", "E", "T"].join(""), path, true);
                  } catch (error2) {
                    xhr.open(["G", "E", "T"].join(""), fullPath + "/" + path, true);
                  }
                  xhr.send();
                }
                return {
                  load: loadAsset
                };
              }();
            }
            if (e.data.type === "loadAnimation") {
              _workerSelf.assetLoader.load(e.data.path, e.data.fullPath, function(data2) {
                _workerSelf.dataManager.completeData(data2);
                _workerSelf.postMessage({
                  id: e.data.id,
                  payload: data2,
                  status: "success"
                });
              }, function() {
                _workerSelf.postMessage({
                  id: e.data.id,
                  status: "error"
                });
              });
            } else if (e.data.type === "complete") {
              var animation = e.data.animation;
              _workerSelf.dataManager.completeData(animation);
              _workerSelf.postMessage({
                id: e.data.id,
                payload: animation,
                status: "success"
              });
            } else if (e.data.type === "loadData") {
              _workerSelf.assetLoader.load(e.data.path, e.data.fullPath, function(data2) {
                _workerSelf.postMessage({
                  id: e.data.id,
                  payload: data2,
                  status: "success"
                });
              }, function() {
                _workerSelf.postMessage({
                  id: e.data.id,
                  status: "error"
                });
              });
            }
          });
          workerInstance.onmessage = function(event) {
            var data2 = event.data;
            var id2 = data2.id;
            var process = processes[id2];
            processes[id2] = null;
            if (data2.status === "success") {
              process.onComplete(data2.payload);
            } else if (process.onError) {
              process.onError();
            }
          };
        }
      }
      function createProcess(onComplete, onError) {
        _counterId += 1;
        var id2 = "processId_" + _counterId;
        processes[id2] = {
          onComplete,
          onError
        };
        return id2;
      }
      function loadAnimation2(path, onComplete, onError) {
        setupWorker();
        var processId = createProcess(onComplete, onError);
        workerInstance.postMessage({
          type: "loadAnimation",
          path,
          fullPath: window.location.origin + window.location.pathname,
          id: processId
        });
      }
      function loadData(path, onComplete, onError) {
        setupWorker();
        var processId = createProcess(onComplete, onError);
        workerInstance.postMessage({
          type: "loadData",
          path,
          fullPath: window.location.origin + window.location.pathname,
          id: processId
        });
      }
      function completeAnimation(anim, onComplete, onError) {
        setupWorker();
        var processId = createProcess(onComplete, onError);
        workerInstance.postMessage({
          type: "complete",
          animation: anim,
          id: processId
        });
      }
      return {
        loadAnimation: loadAnimation2,
        loadData,
        completeAnimation
      };
    }();
    var ImagePreloader = function() {
      var proxyImage = function() {
        var canvas = createTag("canvas");
        canvas.width = 1;
        canvas.height = 1;
        var ctx2 = canvas.getContext("2d");
        ctx2.fillStyle = "rgba(0,0,0,0)";
        ctx2.fillRect(0, 0, 1, 1);
        return canvas;
      }();
      function imageLoaded() {
        this.loadedAssets += 1;
        if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
          if (this.imagesLoadedCb) {
            this.imagesLoadedCb(null);
          }
        }
      }
      function footageLoaded() {
        this.loadedFootagesCount += 1;
        if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
          if (this.imagesLoadedCb) {
            this.imagesLoadedCb(null);
          }
        }
      }
      function getAssetsPath(assetData, assetsPath, originalPath) {
        var path = "";
        if (assetData.e) {
          path = assetData.p;
        } else if (assetsPath) {
          var imagePath = assetData.p;
          if (imagePath.indexOf("images/") !== -1) {
            imagePath = imagePath.split("/")[1];
          }
          path = assetsPath + imagePath;
        } else {
          path = originalPath;
          path += assetData.u ? assetData.u : "";
          path += assetData.p;
        }
        return path;
      }
      function testImageLoaded(img) {
        var _count = 0;
        var intervalId = setInterval((function() {
          var box = img.getBBox();
          if (box.width || _count > 500) {
            this._imageLoaded();
            clearInterval(intervalId);
          }
          _count += 1;
        }).bind(this), 50);
      }
      function createImageData(assetData) {
        var path = getAssetsPath(assetData, this.assetsPath, this.path);
        var img = createNS("image");
        if (isSafari) {
          this.testImageLoaded(img);
        } else {
          img.addEventListener("load", this._imageLoaded, false);
        }
        img.addEventListener("error", (function() {
          ob2.img = proxyImage;
          this._imageLoaded();
        }).bind(this), false);
        img.setAttributeNS("http://www.w3.org/1999/xlink", "href", path);
        if (this._elementHelper.append) {
          this._elementHelper.append(img);
        } else {
          this._elementHelper.appendChild(img);
        }
        var ob2 = {
          img,
          assetData
        };
        return ob2;
      }
      function createImgData(assetData) {
        var path = getAssetsPath(assetData, this.assetsPath, this.path);
        var img = createTag("img");
        img.crossOrigin = "anonymous";
        img.addEventListener("load", this._imageLoaded, false);
        img.addEventListener("error", (function() {
          ob2.img = proxyImage;
          this._imageLoaded();
        }).bind(this), false);
        img.src = path;
        var ob2 = {
          img,
          assetData
        };
        return ob2;
      }
      function createFootageData(data2) {
        var ob2 = {
          assetData: data2
        };
        var path = getAssetsPath(data2, this.assetsPath, this.path);
        dataManager.loadData(path, (function(footageData) {
          ob2.img = footageData;
          this._footageLoaded();
        }).bind(this), (function() {
          ob2.img = {};
          this._footageLoaded();
        }).bind(this));
        return ob2;
      }
      function loadAssets(assets, cb) {
        this.imagesLoadedCb = cb;
        var i2;
        var len = assets.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (!assets[i2].layers) {
            if (!assets[i2].t || assets[i2].t === "seq") {
              this.totalImages += 1;
              this.images.push(this._createImageData(assets[i2]));
            } else if (assets[i2].t === 3) {
              this.totalFootages += 1;
              this.images.push(this.createFootageData(assets[i2]));
            }
          }
        }
      }
      function setPath(path) {
        this.path = path || "";
      }
      function setAssetsPath(path) {
        this.assetsPath = path || "";
      }
      function getAsset(assetData) {
        var i2 = 0;
        var len = this.images.length;
        while (i2 < len) {
          if (this.images[i2].assetData === assetData) {
            return this.images[i2].img;
          }
          i2 += 1;
        }
        return null;
      }
      function destroy() {
        this.imagesLoadedCb = null;
        this.images.length = 0;
      }
      function loadedImages() {
        return this.totalImages === this.loadedAssets;
      }
      function loadedFootages() {
        return this.totalFootages === this.loadedFootagesCount;
      }
      function setCacheType(type, elementHelper) {
        if (type === "svg") {
          this._elementHelper = elementHelper;
          this._createImageData = this.createImageData.bind(this);
        } else {
          this._createImageData = this.createImgData.bind(this);
        }
      }
      function ImagePreloaderFactory() {
        this._imageLoaded = imageLoaded.bind(this);
        this._footageLoaded = footageLoaded.bind(this);
        this.testImageLoaded = testImageLoaded.bind(this);
        this.createFootageData = createFootageData.bind(this);
        this.assetsPath = "";
        this.path = "";
        this.totalImages = 0;
        this.totalFootages = 0;
        this.loadedAssets = 0;
        this.loadedFootagesCount = 0;
        this.imagesLoadedCb = null;
        this.images = [];
      }
      ImagePreloaderFactory.prototype = {
        loadAssets,
        setAssetsPath,
        setPath,
        loadedImages,
        loadedFootages,
        destroy,
        getAsset,
        createImgData,
        createImageData,
        imageLoaded,
        footageLoaded,
        setCacheType
      };
      return ImagePreloaderFactory;
    }();
    function BaseEvent() {
    }
    BaseEvent.prototype = {
      triggerEvent: function triggerEvent(eventName, args) {
        if (this._cbs[eventName]) {
          var callbacks = this._cbs[eventName];
          for (var i2 = 0; i2 < callbacks.length; i2 += 1) {
            callbacks[i2](args);
          }
        }
      },
      addEventListener: function addEventListener(eventName, callback) {
        if (!this._cbs[eventName]) {
          this._cbs[eventName] = [];
        }
        this._cbs[eventName].push(callback);
        return (function() {
          this.removeEventListener(eventName, callback);
        }).bind(this);
      },
      removeEventListener: function removeEventListener(eventName, callback) {
        if (!callback) {
          this._cbs[eventName] = null;
        } else if (this._cbs[eventName]) {
          var i2 = 0;
          var len = this._cbs[eventName].length;
          while (i2 < len) {
            if (this._cbs[eventName][i2] === callback) {
              this._cbs[eventName].splice(i2, 1);
              i2 -= 1;
              len -= 1;
            }
            i2 += 1;
          }
          if (!this._cbs[eventName].length) {
            this._cbs[eventName] = null;
          }
        }
      }
    };
    var markerParser = /* @__PURE__ */ function() {
      function parsePayloadLines(payload) {
        var lines = payload.split("\r\n");
        var keys2 = {};
        var line;
        var keysCount = 0;
        for (var i2 = 0; i2 < lines.length; i2 += 1) {
          line = lines[i2].split(":");
          if (line.length === 2) {
            keys2[line[0]] = line[1].trim();
            keysCount += 1;
          }
        }
        if (keysCount === 0) {
          throw new Error();
        }
        return keys2;
      }
      return function(_markers) {
        var markers = [];
        for (var i2 = 0; i2 < _markers.length; i2 += 1) {
          var _marker = _markers[i2];
          var markerData = {
            time: _marker.tm,
            duration: _marker.dr
          };
          try {
            markerData.payload = JSON.parse(_markers[i2].cm);
          } catch (_2) {
            try {
              markerData.payload = parsePayloadLines(_markers[i2].cm);
            } catch (__) {
              markerData.payload = {
                name: _markers[i2].cm
              };
            }
          }
          markers.push(markerData);
        }
        return markers;
      };
    }();
    var ProjectInterface = /* @__PURE__ */ function() {
      function registerComposition(comp2) {
        this.compositions.push(comp2);
      }
      return function() {
        function _thisProjectFunction(name2) {
          var i2 = 0;
          var len = this.compositions.length;
          while (i2 < len) {
            if (this.compositions[i2].data && this.compositions[i2].data.nm === name2) {
              if (this.compositions[i2].prepareFrame && this.compositions[i2].data.xt) {
                this.compositions[i2].prepareFrame(this.currentFrame);
              }
              return this.compositions[i2].compInterface;
            }
            i2 += 1;
          }
          return null;
        }
        _thisProjectFunction.compositions = [];
        _thisProjectFunction.currentFrame = 0;
        _thisProjectFunction.registerComposition = registerComposition;
        return _thisProjectFunction;
      };
    }();
    var renderers = {};
    var registerRenderer = function registerRenderer2(key2, value2) {
      renderers[key2] = value2;
    };
    function getRenderer(key2) {
      return renderers[key2];
    }
    function getRegisteredRenderer() {
      if (renderers.canvas) {
        return "canvas";
      }
      for (var key2 in renderers) {
        if (renderers[key2]) {
          return key2;
        }
      }
      return "";
    }
    function _typeof$4(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$4 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$4 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$4(obj);
    }
    var AnimationItem = function AnimationItem2() {
      this._cbs = [];
      this.name = "";
      this.path = "";
      this.isLoaded = false;
      this.currentFrame = 0;
      this.currentRawFrame = 0;
      this.firstFrame = 0;
      this.totalFrames = 0;
      this.frameRate = 0;
      this.frameMult = 0;
      this.playSpeed = 1;
      this.playDirection = 1;
      this.playCount = 0;
      this.animationData = {};
      this.assets = [];
      this.isPaused = true;
      this.autoplay = false;
      this.loop = true;
      this.renderer = null;
      this.animationID = createElementID();
      this.assetsPath = "";
      this.timeCompleted = 0;
      this.segmentPos = 0;
      this.isSubframeEnabled = getSubframeEnabled();
      this.segments = [];
      this._idle = true;
      this._completedLoop = false;
      this.projectInterface = ProjectInterface();
      this.imagePreloader = new ImagePreloader();
      this.audioController = audioControllerFactory();
      this.markers = [];
      this.configAnimation = this.configAnimation.bind(this);
      this.onSetupError = this.onSetupError.bind(this);
      this.onSegmentComplete = this.onSegmentComplete.bind(this);
      this.drawnFrameEvent = new BMEnterFrameEvent("drawnFrame", 0, 0, 0);
      this.expressionsPlugin = getExpressionsPlugin();
    };
    extendPrototype([BaseEvent], AnimationItem);
    AnimationItem.prototype.setParams = function(params) {
      if (params.wrapper || params.container) {
        this.wrapper = params.wrapper || params.container;
      }
      var animType = "svg";
      if (params.animType) {
        animType = params.animType;
      } else if (params.renderer) {
        animType = params.renderer;
      }
      var RendererClass = getRenderer(animType);
      this.renderer = new RendererClass(this, params.rendererSettings);
      this.imagePreloader.setCacheType(animType, this.renderer.globalData.defs);
      this.renderer.setProjectInterface(this.projectInterface);
      this.animType = animType;
      if (params.loop === "" || params.loop === null || params.loop === void 0 || params.loop === true) {
        this.loop = true;
      } else if (params.loop === false) {
        this.loop = false;
      } else {
        this.loop = parseInt(params.loop, 10);
      }
      this.autoplay = "autoplay" in params ? params.autoplay : true;
      this.name = params.name ? params.name : "";
      this.autoloadSegments = Object.prototype.hasOwnProperty.call(params, "autoloadSegments") ? params.autoloadSegments : true;
      this.assetsPath = params.assetsPath;
      this.initialSegment = params.initialSegment;
      if (params.audioFactory) {
        this.audioController.setAudioFactory(params.audioFactory);
      }
      if (params.animationData) {
        this.setupAnimation(params.animationData);
      } else if (params.path) {
        if (params.path.lastIndexOf("\\") !== -1) {
          this.path = params.path.substr(0, params.path.lastIndexOf("\\") + 1);
        } else {
          this.path = params.path.substr(0, params.path.lastIndexOf("/") + 1);
        }
        this.fileName = params.path.substr(params.path.lastIndexOf("/") + 1);
        this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf(".json"));
        dataManager.loadAnimation(params.path, this.configAnimation, this.onSetupError);
      }
    };
    AnimationItem.prototype.onSetupError = function() {
      this.trigger("data_failed");
    };
    AnimationItem.prototype.setupAnimation = function(data2) {
      dataManager.completeAnimation(data2, this.configAnimation);
    };
    AnimationItem.prototype.setData = function(wrapper2, animationData) {
      if (animationData) {
        if (_typeof$4(animationData) !== "object") {
          animationData = JSON.parse(animationData);
        }
      }
      var params = {
        wrapper: wrapper2,
        animationData
      };
      var wrapperAttributes = wrapper2.attributes;
      params.path = wrapperAttributes.getNamedItem("data-animation-path") ? wrapperAttributes.getNamedItem("data-animation-path").value : wrapperAttributes.getNamedItem("data-bm-path") ? wrapperAttributes.getNamedItem("data-bm-path").value : wrapperAttributes.getNamedItem("bm-path") ? wrapperAttributes.getNamedItem("bm-path").value : "";
      params.animType = wrapperAttributes.getNamedItem("data-anim-type") ? wrapperAttributes.getNamedItem("data-anim-type").value : wrapperAttributes.getNamedItem("data-bm-type") ? wrapperAttributes.getNamedItem("data-bm-type").value : wrapperAttributes.getNamedItem("bm-type") ? wrapperAttributes.getNamedItem("bm-type").value : wrapperAttributes.getNamedItem("data-bm-renderer") ? wrapperAttributes.getNamedItem("data-bm-renderer").value : wrapperAttributes.getNamedItem("bm-renderer") ? wrapperAttributes.getNamedItem("bm-renderer").value : getRegisteredRenderer() || "canvas";
      var loop = wrapperAttributes.getNamedItem("data-anim-loop") ? wrapperAttributes.getNamedItem("data-anim-loop").value : wrapperAttributes.getNamedItem("data-bm-loop") ? wrapperAttributes.getNamedItem("data-bm-loop").value : wrapperAttributes.getNamedItem("bm-loop") ? wrapperAttributes.getNamedItem("bm-loop").value : "";
      if (loop === "false") {
        params.loop = false;
      } else if (loop === "true") {
        params.loop = true;
      } else if (loop !== "") {
        params.loop = parseInt(loop, 10);
      }
      var autoplay = wrapperAttributes.getNamedItem("data-anim-autoplay") ? wrapperAttributes.getNamedItem("data-anim-autoplay").value : wrapperAttributes.getNamedItem("data-bm-autoplay") ? wrapperAttributes.getNamedItem("data-bm-autoplay").value : wrapperAttributes.getNamedItem("bm-autoplay") ? wrapperAttributes.getNamedItem("bm-autoplay").value : true;
      params.autoplay = autoplay !== "false";
      params.name = wrapperAttributes.getNamedItem("data-name") ? wrapperAttributes.getNamedItem("data-name").value : wrapperAttributes.getNamedItem("data-bm-name") ? wrapperAttributes.getNamedItem("data-bm-name").value : wrapperAttributes.getNamedItem("bm-name") ? wrapperAttributes.getNamedItem("bm-name").value : "";
      var prerender = wrapperAttributes.getNamedItem("data-anim-prerender") ? wrapperAttributes.getNamedItem("data-anim-prerender").value : wrapperAttributes.getNamedItem("data-bm-prerender") ? wrapperAttributes.getNamedItem("data-bm-prerender").value : wrapperAttributes.getNamedItem("bm-prerender") ? wrapperAttributes.getNamedItem("bm-prerender").value : "";
      if (prerender === "false") {
        params.prerender = false;
      }
      if (!params.path) {
        this.trigger("destroy");
      } else {
        this.setParams(params);
      }
    };
    AnimationItem.prototype.includeLayers = function(data2) {
      if (data2.op > this.animationData.op) {
        this.animationData.op = data2.op;
        this.totalFrames = Math.floor(data2.op - this.animationData.ip);
      }
      var layers = this.animationData.layers;
      var i2;
      var len = layers.length;
      var newLayers = data2.layers;
      var j2;
      var jLen = newLayers.length;
      for (j2 = 0; j2 < jLen; j2 += 1) {
        i2 = 0;
        while (i2 < len) {
          if (layers[i2].id === newLayers[j2].id) {
            layers[i2] = newLayers[j2];
            break;
          }
          i2 += 1;
        }
      }
      if (data2.chars || data2.fonts) {
        this.renderer.globalData.fontManager.addChars(data2.chars);
        this.renderer.globalData.fontManager.addFonts(data2.fonts, this.renderer.globalData.defs);
      }
      if (data2.assets) {
        len = data2.assets.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.animationData.assets.push(data2.assets[i2]);
        }
      }
      this.animationData.__complete = false;
      dataManager.completeAnimation(this.animationData, this.onSegmentComplete);
    };
    AnimationItem.prototype.onSegmentComplete = function(data2) {
      this.animationData = data2;
      var expressionsPlugin2 = getExpressionsPlugin();
      if (expressionsPlugin2) {
        expressionsPlugin2.initExpressions(this);
      }
      this.loadNextSegment();
    };
    AnimationItem.prototype.loadNextSegment = function() {
      var segments = this.animationData.segments;
      if (!segments || segments.length === 0 || !this.autoloadSegments) {
        this.trigger("data_ready");
        this.timeCompleted = this.totalFrames;
        return;
      }
      var segment = segments.shift();
      this.timeCompleted = segment.time * this.frameRate;
      var segmentPath = this.path + this.fileName + "_" + this.segmentPos + ".json";
      this.segmentPos += 1;
      dataManager.loadData(segmentPath, this.includeLayers.bind(this), (function() {
        this.trigger("data_failed");
      }).bind(this));
    };
    AnimationItem.prototype.loadSegments = function() {
      var segments = this.animationData.segments;
      if (!segments) {
        this.timeCompleted = this.totalFrames;
      }
      this.loadNextSegment();
    };
    AnimationItem.prototype.imagesLoaded = function() {
      this.trigger("loaded_images");
      this.checkLoaded();
    };
    AnimationItem.prototype.preloadImages = function() {
      this.imagePreloader.setAssetsPath(this.assetsPath);
      this.imagePreloader.setPath(this.path);
      this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));
    };
    AnimationItem.prototype.configAnimation = function(animData) {
      if (!this.renderer) {
        return;
      }
      try {
        this.animationData = animData;
        if (this.initialSegment) {
          this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]);
          this.firstFrame = Math.round(this.initialSegment[0]);
        } else {
          this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
          this.firstFrame = Math.round(this.animationData.ip);
        }
        this.renderer.configAnimation(animData);
        if (!animData.assets) {
          animData.assets = [];
        }
        this.assets = this.animationData.assets;
        this.frameRate = this.animationData.fr;
        this.frameMult = this.animationData.fr / 1e3;
        this.renderer.searchExtraCompositions(animData.assets);
        this.markers = markerParser(animData.markers || []);
        this.trigger("config_ready");
        this.preloadImages();
        this.loadSegments();
        this.updaFrameModifier();
        this.waitForFontsLoaded();
        if (this.isPaused) {
          this.audioController.pause();
        }
      } catch (error2) {
        this.triggerConfigError(error2);
      }
    };
    AnimationItem.prototype.waitForFontsLoaded = function() {
      if (!this.renderer) {
        return;
      }
      if (this.renderer.globalData.fontManager.isLoaded) {
        this.checkLoaded();
      } else {
        setTimeout(this.waitForFontsLoaded.bind(this), 20);
      }
    };
    AnimationItem.prototype.checkLoaded = function() {
      if (!this.isLoaded && this.renderer.globalData.fontManager.isLoaded && (this.imagePreloader.loadedImages() || this.renderer.rendererType !== "canvas") && this.imagePreloader.loadedFootages()) {
        this.isLoaded = true;
        var expressionsPlugin2 = getExpressionsPlugin();
        if (expressionsPlugin2) {
          expressionsPlugin2.initExpressions(this);
        }
        this.renderer.initItems();
        setTimeout((function() {
          this.trigger("DOMLoaded");
        }).bind(this), 0);
        this.gotoFrame();
        if (this.autoplay) {
          this.play();
        }
      }
    };
    AnimationItem.prototype.resize = function(width2, height2) {
      var _width = typeof width2 === "number" ? width2 : void 0;
      var _height = typeof height2 === "number" ? height2 : void 0;
      this.renderer.updateContainerSize(_width, _height);
    };
    AnimationItem.prototype.setSubframe = function(flag) {
      this.isSubframeEnabled = !!flag;
    };
    AnimationItem.prototype.gotoFrame = function() {
      this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame;
      if (this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted) {
        this.currentFrame = this.timeCompleted;
      }
      this.trigger("enterFrame");
      this.renderFrame();
      this.trigger("drawnFrame");
    };
    AnimationItem.prototype.renderFrame = function() {
      if (this.isLoaded === false || !this.renderer) {
        return;
      }
      try {
        if (this.expressionsPlugin) {
          this.expressionsPlugin.resetFrame();
        }
        this.renderer.renderFrame(this.currentFrame + this.firstFrame);
      } catch (error2) {
        this.triggerRenderFrameError(error2);
      }
    };
    AnimationItem.prototype.play = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      if (this.isPaused === true) {
        this.isPaused = false;
        this.trigger("_play");
        this.audioController.resume();
        if (this._idle) {
          this._idle = false;
          this.trigger("_active");
        }
      }
    };
    AnimationItem.prototype.pause = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      if (this.isPaused === false) {
        this.isPaused = true;
        this.trigger("_pause");
        this._idle = true;
        this.trigger("_idle");
        this.audioController.pause();
      }
    };
    AnimationItem.prototype.togglePause = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      if (this.isPaused === true) {
        this.play();
      } else {
        this.pause();
      }
    };
    AnimationItem.prototype.stop = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      this.pause();
      this.playCount = 0;
      this._completedLoop = false;
      this.setCurrentRawFrameValue(0);
    };
    AnimationItem.prototype.getMarkerData = function(markerName) {
      var marker;
      for (var i2 = 0; i2 < this.markers.length; i2 += 1) {
        marker = this.markers[i2];
        if (marker.payload && marker.payload.name === markerName) {
          return marker;
        }
      }
      return null;
    };
    AnimationItem.prototype.goToAndStop = function(value2, isFrame, name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      var numValue = Number(value2);
      if (isNaN(numValue)) {
        var marker = this.getMarkerData(value2);
        if (marker) {
          this.goToAndStop(marker.time, true);
        }
      } else if (isFrame) {
        this.setCurrentRawFrameValue(value2);
      } else {
        this.setCurrentRawFrameValue(value2 * this.frameModifier);
      }
      this.pause();
    };
    AnimationItem.prototype.goToAndPlay = function(value2, isFrame, name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      var numValue = Number(value2);
      if (isNaN(numValue)) {
        var marker = this.getMarkerData(value2);
        if (marker) {
          if (!marker.duration) {
            this.goToAndStop(marker.time, true);
          } else {
            this.playSegments([marker.time, marker.time + marker.duration], true);
          }
        }
      } else {
        this.goToAndStop(numValue, isFrame, name2);
      }
      this.play();
    };
    AnimationItem.prototype.advanceTime = function(value2) {
      if (this.isPaused === true || this.isLoaded === false) {
        return;
      }
      var nextValue = this.currentRawFrame + value2 * this.frameModifier;
      var _isComplete = false;
      if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
        if (!this.loop || this.playCount === this.loop) {
          if (!this.checkSegments(nextValue > this.totalFrames ? nextValue % this.totalFrames : 0)) {
            _isComplete = true;
            nextValue = this.totalFrames - 1;
          }
        } else if (nextValue >= this.totalFrames) {
          this.playCount += 1;
          if (!this.checkSegments(nextValue % this.totalFrames)) {
            this.setCurrentRawFrameValue(nextValue % this.totalFrames);
            this._completedLoop = true;
            this.trigger("loopComplete");
          }
        } else {
          this.setCurrentRawFrameValue(nextValue);
        }
      } else if (nextValue < 0) {
        if (!this.checkSegments(nextValue % this.totalFrames)) {
          if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
            this.setCurrentRawFrameValue(this.totalFrames + nextValue % this.totalFrames);
            if (!this._completedLoop) {
              this._completedLoop = true;
            } else {
              this.trigger("loopComplete");
            }
          } else {
            _isComplete = true;
            nextValue = 0;
          }
        }
      } else {
        this.setCurrentRawFrameValue(nextValue);
      }
      if (_isComplete) {
        this.setCurrentRawFrameValue(nextValue);
        this.pause();
        this.trigger("complete");
      }
    };
    AnimationItem.prototype.adjustSegment = function(arr, offset) {
      this.playCount = 0;
      if (arr[1] < arr[0]) {
        if (this.frameModifier > 0) {
          if (this.playSpeed < 0) {
            this.setSpeed(-this.playSpeed);
          } else {
            this.setDirection(-1);
          }
        }
        this.totalFrames = arr[0] - arr[1];
        this.timeCompleted = this.totalFrames;
        this.firstFrame = arr[1];
        this.setCurrentRawFrameValue(this.totalFrames - 1e-3 - offset);
      } else if (arr[1] > arr[0]) {
        if (this.frameModifier < 0) {
          if (this.playSpeed < 0) {
            this.setSpeed(-this.playSpeed);
          } else {
            this.setDirection(1);
          }
        }
        this.totalFrames = arr[1] - arr[0];
        this.timeCompleted = this.totalFrames;
        this.firstFrame = arr[0];
        this.setCurrentRawFrameValue(1e-3 + offset);
      }
      this.trigger("segmentStart");
    };
    AnimationItem.prototype.setSegment = function(init, end) {
      var pendingFrame = -1;
      if (this.isPaused) {
        if (this.currentRawFrame + this.firstFrame < init) {
          pendingFrame = init;
        } else if (this.currentRawFrame + this.firstFrame > end) {
          pendingFrame = end - init;
        }
      }
      this.firstFrame = init;
      this.totalFrames = end - init;
      this.timeCompleted = this.totalFrames;
      if (pendingFrame !== -1) {
        this.goToAndStop(pendingFrame, true);
      }
    };
    AnimationItem.prototype.playSegments = function(arr, forceFlag) {
      if (forceFlag) {
        this.segments.length = 0;
      }
      if (_typeof$4(arr[0]) === "object") {
        var i2;
        var len = arr.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.segments.push(arr[i2]);
        }
      } else {
        this.segments.push(arr);
      }
      if (this.segments.length && forceFlag) {
        this.adjustSegment(this.segments.shift(), 0);
      }
      if (this.isPaused) {
        this.play();
      }
    };
    AnimationItem.prototype.resetSegments = function(forceFlag) {
      this.segments.length = 0;
      this.segments.push([this.animationData.ip, this.animationData.op]);
      if (forceFlag) {
        this.checkSegments(0);
      }
    };
    AnimationItem.prototype.checkSegments = function(offset) {
      if (this.segments.length) {
        this.adjustSegment(this.segments.shift(), offset);
        return true;
      }
      return false;
    };
    AnimationItem.prototype.destroy = function(name2) {
      if (name2 && this.name !== name2 || !this.renderer) {
        return;
      }
      this.renderer.destroy();
      this.imagePreloader.destroy();
      this.trigger("destroy");
      this._cbs = null;
      this.onEnterFrame = null;
      this.onLoopComplete = null;
      this.onComplete = null;
      this.onSegmentStart = null;
      this.onDestroy = null;
      this.renderer = null;
      this.expressionsPlugin = null;
      this.imagePreloader = null;
      this.projectInterface = null;
    };
    AnimationItem.prototype.setCurrentRawFrameValue = function(value2) {
      this.currentRawFrame = value2;
      this.gotoFrame();
    };
    AnimationItem.prototype.setSpeed = function(val2) {
      this.playSpeed = val2;
      this.updaFrameModifier();
    };
    AnimationItem.prototype.setDirection = function(val2) {
      this.playDirection = val2 < 0 ? -1 : 1;
      this.updaFrameModifier();
    };
    AnimationItem.prototype.setLoop = function(isLooping) {
      this.loop = isLooping;
    };
    AnimationItem.prototype.setVolume = function(val2, name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      this.audioController.setVolume(val2);
    };
    AnimationItem.prototype.getVolume = function() {
      return this.audioController.getVolume();
    };
    AnimationItem.prototype.mute = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      this.audioController.mute();
    };
    AnimationItem.prototype.unmute = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      this.audioController.unmute();
    };
    AnimationItem.prototype.updaFrameModifier = function() {
      this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
      this.audioController.setRate(this.playSpeed * this.playDirection);
    };
    AnimationItem.prototype.getPath = function() {
      return this.path;
    };
    AnimationItem.prototype.getAssetsPath = function(assetData) {
      var path = "";
      if (assetData.e) {
        path = assetData.p;
      } else if (this.assetsPath) {
        var imagePath = assetData.p;
        if (imagePath.indexOf("images/") !== -1) {
          imagePath = imagePath.split("/")[1];
        }
        path = this.assetsPath + imagePath;
      } else {
        path = this.path;
        path += assetData.u ? assetData.u : "";
        path += assetData.p;
      }
      return path;
    };
    AnimationItem.prototype.getAssetData = function(id2) {
      var i2 = 0;
      var len = this.assets.length;
      while (i2 < len) {
        if (id2 === this.assets[i2].id) {
          return this.assets[i2];
        }
        i2 += 1;
      }
      return null;
    };
    AnimationItem.prototype.hide = function() {
      this.renderer.hide();
    };
    AnimationItem.prototype.show = function() {
      this.renderer.show();
    };
    AnimationItem.prototype.getDuration = function(isFrame) {
      return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
    };
    AnimationItem.prototype.updateDocumentData = function(path, documentData, index2) {
      try {
        var element = this.renderer.getElementByPath(path);
        element.updateDocumentData(documentData, index2);
      } catch (error2) {
      }
    };
    AnimationItem.prototype.trigger = function(name2) {
      if (this._cbs && this._cbs[name2]) {
        switch (name2) {
          case "enterFrame":
            this.triggerEvent(name2, new BMEnterFrameEvent(name2, this.currentFrame, this.totalFrames, this.frameModifier));
            break;
          case "drawnFrame":
            this.drawnFrameEvent.currentTime = this.currentFrame;
            this.drawnFrameEvent.totalTime = this.totalFrames;
            this.drawnFrameEvent.direction = this.frameModifier;
            this.triggerEvent(name2, this.drawnFrameEvent);
            break;
          case "loopComplete":
            this.triggerEvent(name2, new BMCompleteLoopEvent(name2, this.loop, this.playCount, this.frameMult));
            break;
          case "complete":
            this.triggerEvent(name2, new BMCompleteEvent(name2, this.frameMult));
            break;
          case "segmentStart":
            this.triggerEvent(name2, new BMSegmentStartEvent(name2, this.firstFrame, this.totalFrames));
            break;
          case "destroy":
            this.triggerEvent(name2, new BMDestroyEvent(name2, this));
            break;
          default:
            this.triggerEvent(name2);
        }
      }
      if (name2 === "enterFrame" && this.onEnterFrame) {
        this.onEnterFrame.call(this, new BMEnterFrameEvent(name2, this.currentFrame, this.totalFrames, this.frameMult));
      }
      if (name2 === "loopComplete" && this.onLoopComplete) {
        this.onLoopComplete.call(this, new BMCompleteLoopEvent(name2, this.loop, this.playCount, this.frameMult));
      }
      if (name2 === "complete" && this.onComplete) {
        this.onComplete.call(this, new BMCompleteEvent(name2, this.frameMult));
      }
      if (name2 === "segmentStart" && this.onSegmentStart) {
        this.onSegmentStart.call(this, new BMSegmentStartEvent(name2, this.firstFrame, this.totalFrames));
      }
      if (name2 === "destroy" && this.onDestroy) {
        this.onDestroy.call(this, new BMDestroyEvent(name2, this));
      }
    };
    AnimationItem.prototype.triggerRenderFrameError = function(nativeError) {
      var error2 = new BMRenderFrameErrorEvent(nativeError, this.currentFrame);
      this.triggerEvent("error", error2);
      if (this.onError) {
        this.onError.call(this, error2);
      }
    };
    AnimationItem.prototype.triggerConfigError = function(nativeError) {
      var error2 = new BMConfigErrorEvent(nativeError, this.currentFrame);
      this.triggerEvent("error", error2);
      if (this.onError) {
        this.onError.call(this, error2);
      }
    };
    var animationManager = function() {
      var moduleOb = {};
      var registeredAnimations = [];
      var initTime = 0;
      var len = 0;
      var playingAnimationsNum = 0;
      var _stopped = true;
      var _isFrozen = false;
      function removeElement(ev) {
        var i2 = 0;
        var animItem = ev.target;
        while (i2 < len) {
          if (registeredAnimations[i2].animation === animItem) {
            registeredAnimations.splice(i2, 1);
            i2 -= 1;
            len -= 1;
            if (!animItem.isPaused) {
              subtractPlayingCount();
            }
          }
          i2 += 1;
        }
      }
      function registerAnimation(element, animationData) {
        if (!element) {
          return null;
        }
        var i2 = 0;
        while (i2 < len) {
          if (registeredAnimations[i2].elem === element && registeredAnimations[i2].elem !== null) {
            return registeredAnimations[i2].animation;
          }
          i2 += 1;
        }
        var animItem = new AnimationItem();
        setupAnimation(animItem, element);
        animItem.setData(element, animationData);
        return animItem;
      }
      function getRegisteredAnimations() {
        var i2;
        var lenAnims = registeredAnimations.length;
        var animations = [];
        for (i2 = 0; i2 < lenAnims; i2 += 1) {
          animations.push(registeredAnimations[i2].animation);
        }
        return animations;
      }
      function addPlayingCount() {
        playingAnimationsNum += 1;
        activate();
      }
      function subtractPlayingCount() {
        playingAnimationsNum -= 1;
      }
      function setupAnimation(animItem, element) {
        animItem.addEventListener("destroy", removeElement);
        animItem.addEventListener("_active", addPlayingCount);
        animItem.addEventListener("_idle", subtractPlayingCount);
        registeredAnimations.push({
          elem: element,
          animation: animItem
        });
        len += 1;
      }
      function loadAnimation2(params) {
        var animItem = new AnimationItem();
        setupAnimation(animItem, null);
        animItem.setParams(params);
        return animItem;
      }
      function setSpeed(val2, animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.setSpeed(val2, animation);
        }
      }
      function setDirection(val2, animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.setDirection(val2, animation);
        }
      }
      function play(animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.play(animation);
        }
      }
      function resume(nowTime) {
        var elapsedTime = nowTime - initTime;
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.advanceTime(elapsedTime);
        }
        initTime = nowTime;
        if (playingAnimationsNum && !_isFrozen) {
          window.requestAnimationFrame(resume);
        } else {
          _stopped = true;
        }
      }
      function first(nowTime) {
        initTime = nowTime;
        window.requestAnimationFrame(resume);
      }
      function pause(animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.pause(animation);
        }
      }
      function goToAndStop(value2, isFrame, animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.goToAndStop(value2, isFrame, animation);
        }
      }
      function stop(animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.stop(animation);
        }
      }
      function togglePause(animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.togglePause(animation);
        }
      }
      function destroy(animation) {
        var i2;
        for (i2 = len - 1; i2 >= 0; i2 -= 1) {
          registeredAnimations[i2].animation.destroy(animation);
        }
      }
      function searchAnimations2(animationData, standalone, renderer) {
        var animElements = [].concat([].slice.call(document.getElementsByClassName("lottie")), [].slice.call(document.getElementsByClassName("bodymovin")));
        var i2;
        var lenAnims = animElements.length;
        for (i2 = 0; i2 < lenAnims; i2 += 1) {
          if (renderer) {
            animElements[i2].setAttribute("data-bm-type", renderer);
          }
          registerAnimation(animElements[i2], animationData);
        }
        if (standalone && lenAnims === 0) {
          if (!renderer) {
            renderer = "svg";
          }
          var body2 = document.getElementsByTagName("body")[0];
          body2.innerText = "";
          var div2 = createTag("div");
          div2.style.width = "100%";
          div2.style.height = "100%";
          div2.setAttribute("data-bm-type", renderer);
          body2.appendChild(div2);
          registerAnimation(div2, animationData);
        }
      }
      function resize() {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.resize();
        }
      }
      function activate() {
        if (!_isFrozen && playingAnimationsNum) {
          if (_stopped) {
            window.requestAnimationFrame(first);
            _stopped = false;
          }
        }
      }
      function freeze() {
        _isFrozen = true;
      }
      function unfreeze() {
        _isFrozen = false;
        activate();
      }
      function setVolume(val2, animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.setVolume(val2, animation);
        }
      }
      function mute(animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.mute(animation);
        }
      }
      function unmute(animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.unmute(animation);
        }
      }
      moduleOb.registerAnimation = registerAnimation;
      moduleOb.loadAnimation = loadAnimation2;
      moduleOb.setSpeed = setSpeed;
      moduleOb.setDirection = setDirection;
      moduleOb.play = play;
      moduleOb.pause = pause;
      moduleOb.stop = stop;
      moduleOb.togglePause = togglePause;
      moduleOb.searchAnimations = searchAnimations2;
      moduleOb.resize = resize;
      moduleOb.goToAndStop = goToAndStop;
      moduleOb.destroy = destroy;
      moduleOb.freeze = freeze;
      moduleOb.unfreeze = unfreeze;
      moduleOb.setVolume = setVolume;
      moduleOb.mute = mute;
      moduleOb.unmute = unmute;
      moduleOb.getRegisteredAnimations = getRegisteredAnimations;
      return moduleOb;
    }();
    var BezierFactory = function() {
      var ob2 = {};
      ob2.getBezierEasing = getBezierEasing;
      var beziers = {};
      function getBezierEasing(a, b, c, d, nm) {
        var str = nm || ("bez_" + a + "_" + b + "_" + c + "_" + d).replace(/\./g, "p");
        if (beziers[str]) {
          return beziers[str];
        }
        var bezEasing = new BezierEasing([a, b, c, d]);
        beziers[str] = bezEasing;
        return bezEasing;
      }
      var NEWTON_ITERATIONS = 4;
      var NEWTON_MIN_SLOPE = 1e-3;
      var SUBDIVISION_PRECISION = 1e-7;
      var SUBDIVISION_MAX_ITERATIONS = 10;
      var kSplineTableSize = 11;
      var kSampleStepSize = 1 / (kSplineTableSize - 1);
      var float32ArraySupported = typeof Float32Array === "function";
      function A(aA1, aA2) {
        return 1 - 3 * aA2 + 3 * aA1;
      }
      function B2(aA1, aA2) {
        return 3 * aA2 - 6 * aA1;
      }
      function C(aA1) {
        return 3 * aA1;
      }
      function calcBezier(aT, aA1, aA2) {
        return ((A(aA1, aA2) * aT + B2(aA1, aA2)) * aT + C(aA1)) * aT;
      }
      function getSlope(aT, aA1, aA2) {
        return 3 * A(aA1, aA2) * aT * aT + 2 * B2(aA1, aA2) * aT + C(aA1);
      }
      function binarySubdivide(aX, aA, aB, mX1, mX2) {
        var currentX, currentT, i2 = 0;
        do {
          currentT = aA + (aB - aA) / 2;
          currentX = calcBezier(currentT, mX1, mX2) - aX;
          if (currentX > 0) {
            aB = currentT;
          } else {
            aA = currentT;
          }
        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i2 < SUBDIVISION_MAX_ITERATIONS);
        return currentT;
      }
      function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
        for (var i2 = 0; i2 < NEWTON_ITERATIONS; ++i2) {
          var currentSlope = getSlope(aGuessT, mX1, mX2);
          if (currentSlope === 0) return aGuessT;
          var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
          aGuessT -= currentX / currentSlope;
        }
        return aGuessT;
      }
      function BezierEasing(points) {
        this._p = points;
        this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
        this._precomputed = false;
        this.get = this.get.bind(this);
      }
      BezierEasing.prototype = {
        get: function get2(x) {
          var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];
          if (!this._precomputed) this._precompute();
          if (mX1 === mY1 && mX2 === mY2) return x;
          if (x === 0) return 0;
          if (x === 1) return 1;
          return calcBezier(this._getTForX(x), mY1, mY2);
        },
        // Private part
        _precompute: function _precompute() {
          var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];
          this._precomputed = true;
          if (mX1 !== mY1 || mX2 !== mY2) {
            this._calcSampleValues();
          }
        },
        _calcSampleValues: function _calcSampleValues() {
          var mX1 = this._p[0], mX2 = this._p[2];
          for (var i2 = 0; i2 < kSplineTableSize; ++i2) {
            this._mSampleValues[i2] = calcBezier(i2 * kSampleStepSize, mX1, mX2);
          }
        },
        /**
             * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
             */
        _getTForX: function _getTForX(aX) {
          var mX1 = this._p[0], mX2 = this._p[2], mSampleValues = this._mSampleValues;
          var intervalStart = 0;
          var currentSample = 1;
          var lastSample = kSplineTableSize - 1;
          for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
            intervalStart += kSampleStepSize;
          }
          --currentSample;
          var dist2 = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]);
          var guessForT = intervalStart + dist2 * kSampleStepSize;
          var initialSlope = getSlope(guessForT, mX1, mX2);
          if (initialSlope >= NEWTON_MIN_SLOPE) {
            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
          }
          if (initialSlope === 0) {
            return guessForT;
          }
          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
        }
      };
      return ob2;
    }();
    var pooling = /* @__PURE__ */ function() {
      function _double(arr) {
        return arr.concat(createSizedArray(arr.length));
      }
      return {
        "double": _double
      };
    }();
    var poolFactory = /* @__PURE__ */ function() {
      return function(initialLength, _create3, _release) {
        var _length = 0;
        var _maxLength = initialLength;
        var pool = createSizedArray(_maxLength);
        var ob2 = {
          newElement,
          release
        };
        function newElement() {
          var element;
          if (_length) {
            _length -= 1;
            element = pool[_length];
          } else {
            element = _create3();
          }
          return element;
        }
        function release(element) {
          if (_length === _maxLength) {
            pool = pooling["double"](pool);
            _maxLength *= 2;
          }
          if (_release) {
            _release(element);
          }
          pool[_length] = element;
          _length += 1;
        }
        return ob2;
      };
    }();
    var bezierLengthPool = function() {
      function create5() {
        return {
          addedLength: 0,
          percents: createTypedArray("float32", getDefaultCurveSegments()),
          lengths: createTypedArray("float32", getDefaultCurveSegments())
        };
      }
      return poolFactory(8, create5);
    }();
    var segmentsLengthPool = function() {
      function create5() {
        return {
          lengths: [],
          totalLength: 0
        };
      }
      function release(element) {
        var i2;
        var len = element.lengths.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          bezierLengthPool.release(element.lengths[i2]);
        }
        element.lengths.length = 0;
      }
      return poolFactory(8, create5, release);
    }();
    function bezFunction() {
      var math = Math;
      function pointOnLine2D(x1, y1, x2, y2, x3, y3) {
        var det1 = x1 * y2 + y1 * x3 + x2 * y3 - x3 * y2 - y3 * x1 - x2 * y1;
        return det1 > -1e-3 && det1 < 1e-3;
      }
      function pointOnLine3D(x1, y1, z1, x2, y2, z2, x3, y3, z3) {
        if (z1 === 0 && z2 === 0 && z3 === 0) {
          return pointOnLine2D(x1, y1, x2, y2, x3, y3);
        }
        var dist1 = math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2) + math.pow(z2 - z1, 2));
        var dist2 = math.sqrt(math.pow(x3 - x1, 2) + math.pow(y3 - y1, 2) + math.pow(z3 - z1, 2));
        var dist3 = math.sqrt(math.pow(x3 - x2, 2) + math.pow(y3 - y2, 2) + math.pow(z3 - z2, 2));
        var diffDist;
        if (dist1 > dist2) {
          if (dist1 > dist3) {
            diffDist = dist1 - dist2 - dist3;
          } else {
            diffDist = dist3 - dist2 - dist1;
          }
        } else if (dist3 > dist2) {
          diffDist = dist3 - dist2 - dist1;
        } else {
          diffDist = dist2 - dist1 - dist3;
        }
        return diffDist > -1e-4 && diffDist < 1e-4;
      }
      var getBezierLength = /* @__PURE__ */ function() {
        return function(pt1, pt2, pt3, pt4) {
          var curveSegments = getDefaultCurveSegments();
          var k2;
          var i2;
          var len;
          var ptCoord;
          var perc;
          var addedLength = 0;
          var ptDistance;
          var point = [];
          var lastPoint = [];
          var lengthData = bezierLengthPool.newElement();
          len = pt3.length;
          for (k2 = 0; k2 < curveSegments; k2 += 1) {
            perc = k2 / (curveSegments - 1);
            ptDistance = 0;
            for (i2 = 0; i2 < len; i2 += 1) {
              ptCoord = bmPow(1 - perc, 3) * pt1[i2] + 3 * bmPow(1 - perc, 2) * perc * pt3[i2] + 3 * (1 - perc) * bmPow(perc, 2) * pt4[i2] + bmPow(perc, 3) * pt2[i2];
              point[i2] = ptCoord;
              if (lastPoint[i2] !== null) {
                ptDistance += bmPow(point[i2] - lastPoint[i2], 2);
              }
              lastPoint[i2] = point[i2];
            }
            if (ptDistance) {
              ptDistance = bmSqrt(ptDistance);
              addedLength += ptDistance;
            }
            lengthData.percents[k2] = perc;
            lengthData.lengths[k2] = addedLength;
          }
          lengthData.addedLength = addedLength;
          return lengthData;
        };
      }();
      function getSegmentsLength(shapeData) {
        var segmentsLength = segmentsLengthPool.newElement();
        var closed = shapeData.c;
        var pathV = shapeData.v;
        var pathO = shapeData.o;
        var pathI = shapeData.i;
        var i2;
        var len = shapeData._length;
        var lengths = segmentsLength.lengths;
        var totalLength = 0;
        for (i2 = 0; i2 < len - 1; i2 += 1) {
          lengths[i2] = getBezierLength(pathV[i2], pathV[i2 + 1], pathO[i2], pathI[i2 + 1]);
          totalLength += lengths[i2].addedLength;
        }
        if (closed && len) {
          lengths[i2] = getBezierLength(pathV[i2], pathV[0], pathO[i2], pathI[0]);
          totalLength += lengths[i2].addedLength;
        }
        segmentsLength.totalLength = totalLength;
        return segmentsLength;
      }
      function BezierData(length2) {
        this.segmentLength = 0;
        this.points = new Array(length2);
      }
      function PointData(partial, point) {
        this.partialLength = partial;
        this.point = point;
      }
      var buildBezierData = /* @__PURE__ */ function() {
        var storedData = {};
        return function(pt1, pt2, pt3, pt4) {
          var bezierName = (pt1[0] + "_" + pt1[1] + "_" + pt2[0] + "_" + pt2[1] + "_" + pt3[0] + "_" + pt3[1] + "_" + pt4[0] + "_" + pt4[1]).replace(/\./g, "p");
          if (!storedData[bezierName]) {
            var curveSegments = getDefaultCurveSegments();
            var k2;
            var i2;
            var len;
            var ptCoord;
            var perc;
            var addedLength = 0;
            var ptDistance;
            var point;
            var lastPoint = null;
            if (pt1.length === 2 && (pt1[0] !== pt2[0] || pt1[1] !== pt2[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt1[0] + pt3[0], pt1[1] + pt3[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt2[0] + pt4[0], pt2[1] + pt4[1])) {
              curveSegments = 2;
            }
            var bezierData = new BezierData(curveSegments);
            len = pt3.length;
            for (k2 = 0; k2 < curveSegments; k2 += 1) {
              point = createSizedArray(len);
              perc = k2 / (curveSegments - 1);
              ptDistance = 0;
              for (i2 = 0; i2 < len; i2 += 1) {
                ptCoord = bmPow(1 - perc, 3) * pt1[i2] + 3 * bmPow(1 - perc, 2) * perc * (pt1[i2] + pt3[i2]) + 3 * (1 - perc) * bmPow(perc, 2) * (pt2[i2] + pt4[i2]) + bmPow(perc, 3) * pt2[i2];
                point[i2] = ptCoord;
                if (lastPoint !== null) {
                  ptDistance += bmPow(point[i2] - lastPoint[i2], 2);
                }
              }
              ptDistance = bmSqrt(ptDistance);
              addedLength += ptDistance;
              bezierData.points[k2] = new PointData(ptDistance, point);
              lastPoint = point;
            }
            bezierData.segmentLength = addedLength;
            storedData[bezierName] = bezierData;
          }
          return storedData[bezierName];
        };
      }();
      function getDistancePerc(perc, bezierData) {
        var percents = bezierData.percents;
        var lengths = bezierData.lengths;
        var len = percents.length;
        var initPos = bmFloor((len - 1) * perc);
        var lengthPos = perc * bezierData.addedLength;
        var lPerc = 0;
        if (initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]) {
          return percents[initPos];
        }
        var dir = lengths[initPos] > lengthPos ? -1 : 1;
        var flag = true;
        while (flag) {
          if (lengths[initPos] <= lengthPos && lengths[initPos + 1] > lengthPos) {
            lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos + 1] - lengths[initPos]);
            flag = false;
          } else {
            initPos += dir;
          }
          if (initPos < 0 || initPos >= len - 1) {
            if (initPos === len - 1) {
              return percents[initPos];
            }
            flag = false;
          }
        }
        return percents[initPos] + (percents[initPos + 1] - percents[initPos]) * lPerc;
      }
      function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
        var t1 = getDistancePerc(percent, bezierData);
        var u1 = 1 - t1;
        var ptX = math.round((u1 * u1 * u1 * pt1[0] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[0] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[0] + t1 * t1 * t1 * pt2[0]) * 1e3) / 1e3;
        var ptY = math.round((u1 * u1 * u1 * pt1[1] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[1] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[1] + t1 * t1 * t1 * pt2[1]) * 1e3) / 1e3;
        return [ptX, ptY];
      }
      var bezierSegmentPoints = createTypedArray("float32", 8);
      function getNewSegment(pt1, pt2, pt3, pt4, startPerc, endPerc, bezierData) {
        if (startPerc < 0) {
          startPerc = 0;
        } else if (startPerc > 1) {
          startPerc = 1;
        }
        var t0 = getDistancePerc(startPerc, bezierData);
        endPerc = endPerc > 1 ? 1 : endPerc;
        var t1 = getDistancePerc(endPerc, bezierData);
        var i2;
        var len = pt1.length;
        var u0 = 1 - t0;
        var u1 = 1 - t1;
        var u0u0u0 = u0 * u0 * u0;
        var t0u0u0_3 = t0 * u0 * u0 * 3;
        var t0t0u0_3 = t0 * t0 * u0 * 3;
        var t0t0t0 = t0 * t0 * t0;
        var u0u0u1 = u0 * u0 * u1;
        var t0u0u1_3 = t0 * u0 * u1 + u0 * t0 * u1 + u0 * u0 * t1;
        var t0t0u1_3 = t0 * t0 * u1 + u0 * t0 * t1 + t0 * u0 * t1;
        var t0t0t1 = t0 * t0 * t1;
        var u0u1u1 = u0 * u1 * u1;
        var t0u1u1_3 = t0 * u1 * u1 + u0 * t1 * u1 + u0 * u1 * t1;
        var t0t1u1_3 = t0 * t1 * u1 + u0 * t1 * t1 + t0 * u1 * t1;
        var t0t1t1 = t0 * t1 * t1;
        var u1u1u1 = u1 * u1 * u1;
        var t1u1u1_3 = t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1;
        var t1t1u1_3 = t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1;
        var t1t1t1 = t1 * t1 * t1;
        for (i2 = 0; i2 < len; i2 += 1) {
          bezierSegmentPoints[i2 * 4] = math.round((u0u0u0 * pt1[i2] + t0u0u0_3 * pt3[i2] + t0t0u0_3 * pt4[i2] + t0t0t0 * pt2[i2]) * 1e3) / 1e3;
          bezierSegmentPoints[i2 * 4 + 1] = math.round((u0u0u1 * pt1[i2] + t0u0u1_3 * pt3[i2] + t0t0u1_3 * pt4[i2] + t0t0t1 * pt2[i2]) * 1e3) / 1e3;
          bezierSegmentPoints[i2 * 4 + 2] = math.round((u0u1u1 * pt1[i2] + t0u1u1_3 * pt3[i2] + t0t1u1_3 * pt4[i2] + t0t1t1 * pt2[i2]) * 1e3) / 1e3;
          bezierSegmentPoints[i2 * 4 + 3] = math.round((u1u1u1 * pt1[i2] + t1u1u1_3 * pt3[i2] + t1t1u1_3 * pt4[i2] + t1t1t1 * pt2[i2]) * 1e3) / 1e3;
        }
        return bezierSegmentPoints;
      }
      return {
        getSegmentsLength,
        getNewSegment,
        getPointInSegment,
        buildBezierData,
        pointOnLine2D,
        pointOnLine3D
      };
    }
    var bez = bezFunction();
    var initFrame = initialDefaultFrame;
    var mathAbs = Math.abs;
    function interpolateValue(frameNum, caching) {
      var offsetTime = this.offsetTime;
      var newValue;
      if (this.propType === "multidimensional") {
        newValue = createTypedArray("float32", this.pv.length);
      }
      var iterationIndex = caching.lastIndex;
      var i2 = iterationIndex;
      var len = this.keyframes.length - 1;
      var flag = true;
      var keyData;
      var nextKeyData;
      var keyframeMetadata;
      while (flag) {
        keyData = this.keyframes[i2];
        nextKeyData = this.keyframes[i2 + 1];
        if (i2 === len - 1 && frameNum >= nextKeyData.t - offsetTime) {
          if (keyData.h) {
            keyData = nextKeyData;
          }
          iterationIndex = 0;
          break;
        }
        if (nextKeyData.t - offsetTime > frameNum) {
          iterationIndex = i2;
          break;
        }
        if (i2 < len - 1) {
          i2 += 1;
        } else {
          iterationIndex = 0;
          flag = false;
        }
      }
      keyframeMetadata = this.keyframesMetadata[i2] || {};
      var k2;
      var kLen;
      var perc;
      var jLen;
      var j2;
      var fnc;
      var nextKeyTime = nextKeyData.t - offsetTime;
      var keyTime = keyData.t - offsetTime;
      var endValue;
      if (keyData.to) {
        if (!keyframeMetadata.bezierData) {
          keyframeMetadata.bezierData = bez.buildBezierData(keyData.s, nextKeyData.s || keyData.e, keyData.to, keyData.ti);
        }
        var bezierData = keyframeMetadata.bezierData;
        if (frameNum >= nextKeyTime || frameNum < keyTime) {
          var ind = frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;
          kLen = bezierData.points[ind].point.length;
          for (k2 = 0; k2 < kLen; k2 += 1) {
            newValue[k2] = bezierData.points[ind].point[k2];
          }
        } else {
          if (keyframeMetadata.__fnct) {
            fnc = keyframeMetadata.__fnct;
          } else {
            fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;
            keyframeMetadata.__fnct = fnc;
          }
          perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
          var distanceInLine = bezierData.segmentLength * perc;
          var segmentPerc;
          var addedLength = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i2 ? caching._lastAddedLength : 0;
          j2 = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i2 ? caching._lastPoint : 0;
          flag = true;
          jLen = bezierData.points.length;
          while (flag) {
            addedLength += bezierData.points[j2].partialLength;
            if (distanceInLine === 0 || perc === 0 || j2 === bezierData.points.length - 1) {
              kLen = bezierData.points[j2].point.length;
              for (k2 = 0; k2 < kLen; k2 += 1) {
                newValue[k2] = bezierData.points[j2].point[k2];
              }
              break;
            } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j2 + 1].partialLength) {
              segmentPerc = (distanceInLine - addedLength) / bezierData.points[j2 + 1].partialLength;
              kLen = bezierData.points[j2].point.length;
              for (k2 = 0; k2 < kLen; k2 += 1) {
                newValue[k2] = bezierData.points[j2].point[k2] + (bezierData.points[j2 + 1].point[k2] - bezierData.points[j2].point[k2]) * segmentPerc;
              }
              break;
            }
            if (j2 < jLen - 1) {
              j2 += 1;
            } else {
              flag = false;
            }
          }
          caching._lastPoint = j2;
          caching._lastAddedLength = addedLength - bezierData.points[j2].partialLength;
          caching._lastKeyframeIndex = i2;
        }
      } else {
        var outX;
        var outY;
        var inX;
        var inY;
        var keyValue;
        len = keyData.s.length;
        endValue = nextKeyData.s || keyData.e;
        if (this.sh && keyData.h !== 1) {
          if (frameNum >= nextKeyTime) {
            newValue[0] = endValue[0];
            newValue[1] = endValue[1];
            newValue[2] = endValue[2];
          } else if (frameNum <= keyTime) {
            newValue[0] = keyData.s[0];
            newValue[1] = keyData.s[1];
            newValue[2] = keyData.s[2];
          } else {
            var quatStart = createQuaternion(keyData.s);
            var quatEnd = createQuaternion(endValue);
            var time2 = (frameNum - keyTime) / (nextKeyTime - keyTime);
            quaternionToEuler(newValue, slerp(quatStart, quatEnd, time2));
          }
        } else {
          for (i2 = 0; i2 < len; i2 += 1) {
            if (keyData.h !== 1) {
              if (frameNum >= nextKeyTime) {
                perc = 1;
              } else if (frameNum < keyTime) {
                perc = 0;
              } else {
                if (keyData.o.x.constructor === Array) {
                  if (!keyframeMetadata.__fnct) {
                    keyframeMetadata.__fnct = [];
                  }
                  if (!keyframeMetadata.__fnct[i2]) {
                    outX = keyData.o.x[i2] === void 0 ? keyData.o.x[0] : keyData.o.x[i2];
                    outY = keyData.o.y[i2] === void 0 ? keyData.o.y[0] : keyData.o.y[i2];
                    inX = keyData.i.x[i2] === void 0 ? keyData.i.x[0] : keyData.i.x[i2];
                    inY = keyData.i.y[i2] === void 0 ? keyData.i.y[0] : keyData.i.y[i2];
                    fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                    keyframeMetadata.__fnct[i2] = fnc;
                  } else {
                    fnc = keyframeMetadata.__fnct[i2];
                  }
                } else if (!keyframeMetadata.__fnct) {
                  outX = keyData.o.x;
                  outY = keyData.o.y;
                  inX = keyData.i.x;
                  inY = keyData.i.y;
                  fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                  keyData.keyframeMetadata = fnc;
                } else {
                  fnc = keyframeMetadata.__fnct;
                }
                perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
              }
            }
            endValue = nextKeyData.s || keyData.e;
            keyValue = keyData.h === 1 ? keyData.s[i2] : keyData.s[i2] + (endValue[i2] - keyData.s[i2]) * perc;
            if (this.propType === "multidimensional") {
              newValue[i2] = keyValue;
            } else {
              newValue = keyValue;
            }
          }
        }
      }
      caching.lastIndex = iterationIndex;
      return newValue;
    }
    function slerp(a, b, t) {
      var out = [];
      var ax = a[0];
      var ay = a[1];
      var az = a[2];
      var aw = a[3];
      var bx = b[0];
      var by = b[1];
      var bz = b[2];
      var bw = b[3];
      var omega;
      var cosom;
      var sinom;
      var scale0;
      var scale1;
      cosom = ax * bx + ay * by + az * bz + aw * bw;
      if (cosom < 0) {
        cosom = -cosom;
        bx = -bx;
        by = -by;
        bz = -bz;
        bw = -bw;
      }
      if (1 - cosom > 1e-6) {
        omega = Math.acos(cosom);
        sinom = Math.sin(omega);
        scale0 = Math.sin((1 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
      } else {
        scale0 = 1 - t;
        scale1 = t;
      }
      out[0] = scale0 * ax + scale1 * bx;
      out[1] = scale0 * ay + scale1 * by;
      out[2] = scale0 * az + scale1 * bz;
      out[3] = scale0 * aw + scale1 * bw;
      return out;
    }
    function quaternionToEuler(out, quat) {
      var qx = quat[0];
      var qy = quat[1];
      var qz = quat[2];
      var qw = quat[3];
      var heading = Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy * qy - 2 * qz * qz);
      var attitude = Math.asin(2 * qx * qy + 2 * qz * qw);
      var bank = Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx * qx - 2 * qz * qz);
      out[0] = heading / degToRads;
      out[1] = attitude / degToRads;
      out[2] = bank / degToRads;
    }
    function createQuaternion(values) {
      var heading = values[0] * degToRads;
      var attitude = values[1] * degToRads;
      var bank = values[2] * degToRads;
      var c1 = Math.cos(heading / 2);
      var c2 = Math.cos(attitude / 2);
      var c3 = Math.cos(bank / 2);
      var s1 = Math.sin(heading / 2);
      var s2 = Math.sin(attitude / 2);
      var s3 = Math.sin(bank / 2);
      var w = c1 * c2 * c3 - s1 * s2 * s3;
      var x = s1 * s2 * c3 + c1 * c2 * s3;
      var y = s1 * c2 * c3 + c1 * s2 * s3;
      var z = c1 * s2 * c3 - s1 * c2 * s3;
      return [x, y, z, w];
    }
    function getValueAtCurrentTime() {
      var frameNum = this.comp.renderedFrame - this.offsetTime;
      var initTime = this.keyframes[0].t - this.offsetTime;
      var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
      if (!(frameNum === this._caching.lastFrame || this._caching.lastFrame !== initFrame && (this._caching.lastFrame >= endTime && frameNum >= endTime || this._caching.lastFrame < initTime && frameNum < initTime))) {
        if (this._caching.lastFrame >= frameNum) {
          this._caching._lastKeyframeIndex = -1;
          this._caching.lastIndex = 0;
        }
        var renderResult = this.interpolateValue(frameNum, this._caching);
        this.pv = renderResult;
      }
      this._caching.lastFrame = frameNum;
      return this.pv;
    }
    function setVValue(val2) {
      var multipliedValue;
      if (this.propType === "unidimensional") {
        multipliedValue = val2 * this.mult;
        if (mathAbs(this.v - multipliedValue) > 1e-5) {
          this.v = multipliedValue;
          this._mdf = true;
        }
      } else {
        var i2 = 0;
        var len = this.v.length;
        while (i2 < len) {
          multipliedValue = val2[i2] * this.mult;
          if (mathAbs(this.v[i2] - multipliedValue) > 1e-5) {
            this.v[i2] = multipliedValue;
            this._mdf = true;
          }
          i2 += 1;
        }
      }
    }
    function processEffectsSequence() {
      if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
        return;
      }
      if (this.lock) {
        this.setVValue(this.pv);
        return;
      }
      this.lock = true;
      this._mdf = this._isFirstFrame;
      var i2;
      var len = this.effectsSequence.length;
      var finalValue = this.kf ? this.pv : this.data.k;
      for (i2 = 0; i2 < len; i2 += 1) {
        finalValue = this.effectsSequence[i2](finalValue);
      }
      this.setVValue(finalValue);
      this._isFirstFrame = false;
      this.lock = false;
      this.frameId = this.elem.globalData.frameId;
    }
    function addEffect(effectFunction) {
      this.effectsSequence.push(effectFunction);
      this.container.addDynamicProperty(this);
    }
    function ValueProperty(elem2, data2, mult, container2) {
      this.propType = "unidimensional";
      this.mult = mult || 1;
      this.data = data2;
      this.v = mult ? data2.k * mult : data2.k;
      this.pv = data2.k;
      this._mdf = false;
      this.elem = elem2;
      this.container = container2;
      this.comp = elem2.comp;
      this.k = false;
      this.kf = false;
      this.vel = 0;
      this.effectsSequence = [];
      this._isFirstFrame = true;
      this.getValue = processEffectsSequence;
      this.setVValue = setVValue;
      this.addEffect = addEffect;
    }
    function MultiDimensionalProperty(elem2, data2, mult, container2) {
      this.propType = "multidimensional";
      this.mult = mult || 1;
      this.data = data2;
      this._mdf = false;
      this.elem = elem2;
      this.container = container2;
      this.comp = elem2.comp;
      this.k = false;
      this.kf = false;
      this.frameId = -1;
      var i2;
      var len = data2.k.length;
      this.v = createTypedArray("float32", len);
      this.pv = createTypedArray("float32", len);
      this.vel = createTypedArray("float32", len);
      for (i2 = 0; i2 < len; i2 += 1) {
        this.v[i2] = data2.k[i2] * this.mult;
        this.pv[i2] = data2.k[i2];
      }
      this._isFirstFrame = true;
      this.effectsSequence = [];
      this.getValue = processEffectsSequence;
      this.setVValue = setVValue;
      this.addEffect = addEffect;
    }
    function KeyframedValueProperty(elem2, data2, mult, container2) {
      this.propType = "unidimensional";
      this.keyframes = data2.k;
      this.keyframesMetadata = [];
      this.offsetTime = elem2.data.st;
      this.frameId = -1;
      this._caching = {
        lastFrame: initFrame,
        lastIndex: 0,
        value: 0,
        _lastKeyframeIndex: -1
      };
      this.k = true;
      this.kf = true;
      this.data = data2;
      this.mult = mult || 1;
      this.elem = elem2;
      this.container = container2;
      this.comp = elem2.comp;
      this.v = initFrame;
      this.pv = initFrame;
      this._isFirstFrame = true;
      this.getValue = processEffectsSequence;
      this.setVValue = setVValue;
      this.interpolateValue = interpolateValue;
      this.effectsSequence = [getValueAtCurrentTime.bind(this)];
      this.addEffect = addEffect;
    }
    function KeyframedMultidimensionalProperty(elem2, data2, mult, container2) {
      this.propType = "multidimensional";
      var i2;
      var len = data2.k.length;
      var s;
      var e;
      var to;
      var ti;
      for (i2 = 0; i2 < len - 1; i2 += 1) {
        if (data2.k[i2].to && data2.k[i2].s && data2.k[i2 + 1] && data2.k[i2 + 1].s) {
          s = data2.k[i2].s;
          e = data2.k[i2 + 1].s;
          to = data2.k[i2].to;
          ti = data2.k[i2].ti;
          if (s.length === 2 && !(s[0] === e[0] && s[1] === e[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], s[0] + to[0], s[1] + to[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], e[0] + ti[0], e[1] + ti[1]) || s.length === 3 && !(s[0] === e[0] && s[1] === e[1] && s[2] === e[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], s[0] + to[0], s[1] + to[1], s[2] + to[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], e[0] + ti[0], e[1] + ti[1], e[2] + ti[2])) {
            data2.k[i2].to = null;
            data2.k[i2].ti = null;
          }
          if (s[0] === e[0] && s[1] === e[1] && to[0] === 0 && to[1] === 0 && ti[0] === 0 && ti[1] === 0) {
            if (s.length === 2 || s[2] === e[2] && to[2] === 0 && ti[2] === 0) {
              data2.k[i2].to = null;
              data2.k[i2].ti = null;
            }
          }
        }
      }
      this.effectsSequence = [getValueAtCurrentTime.bind(this)];
      this.data = data2;
      this.keyframes = data2.k;
      this.keyframesMetadata = [];
      this.offsetTime = elem2.data.st;
      this.k = true;
      this.kf = true;
      this._isFirstFrame = true;
      this.mult = mult || 1;
      this.elem = elem2;
      this.container = container2;
      this.comp = elem2.comp;
      this.getValue = processEffectsSequence;
      this.setVValue = setVValue;
      this.interpolateValue = interpolateValue;
      this.frameId = -1;
      var arrLen = data2.k[0].s.length;
      this.v = createTypedArray("float32", arrLen);
      this.pv = createTypedArray("float32", arrLen);
      for (i2 = 0; i2 < arrLen; i2 += 1) {
        this.v[i2] = initFrame;
        this.pv[i2] = initFrame;
      }
      this._caching = {
        lastFrame: initFrame,
        lastIndex: 0,
        value: createTypedArray("float32", arrLen)
      };
      this.addEffect = addEffect;
    }
    var PropertyFactory = /* @__PURE__ */ function() {
      function getProp(elem2, data2, type, mult, container2) {
        if (data2.sid) {
          data2 = elem2.globalData.slotManager.getProp(data2);
        }
        var p;
        if (!data2.k.length) {
          p = new ValueProperty(elem2, data2, mult, container2);
        } else if (typeof data2.k[0] === "number") {
          p = new MultiDimensionalProperty(elem2, data2, mult, container2);
        } else {
          switch (type) {
            case 0:
              p = new KeyframedValueProperty(elem2, data2, mult, container2);
              break;
            case 1:
              p = new KeyframedMultidimensionalProperty(elem2, data2, mult, container2);
              break;
          }
        }
        if (p.effectsSequence.length) {
          container2.addDynamicProperty(p);
        }
        return p;
      }
      var ob2 = {
        getProp
      };
      return ob2;
    }();
    function DynamicPropertyContainer() {
    }
    DynamicPropertyContainer.prototype = {
      addDynamicProperty: function addDynamicProperty(prop) {
        if (this.dynamicProperties.indexOf(prop) === -1) {
          this.dynamicProperties.push(prop);
          this.container.addDynamicProperty(this);
          this._isAnimated = true;
        }
      },
      iterateDynamicProperties: function iterateDynamicProperties() {
        this._mdf = false;
        var i2;
        var len = this.dynamicProperties.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.dynamicProperties[i2].getValue();
          if (this.dynamicProperties[i2]._mdf) {
            this._mdf = true;
          }
        }
      },
      initDynamicPropertyContainer: function initDynamicPropertyContainer(container2) {
        this.container = container2;
        this.dynamicProperties = [];
        this._mdf = false;
        this._isAnimated = false;
      }
    };
    var pointPool = function() {
      function create5() {
        return createTypedArray("float32", 2);
      }
      return poolFactory(8, create5);
    }();
    function ShapePath() {
      this.c = false;
      this._length = 0;
      this._maxLength = 8;
      this.v = createSizedArray(this._maxLength);
      this.o = createSizedArray(this._maxLength);
      this.i = createSizedArray(this._maxLength);
    }
    ShapePath.prototype.setPathData = function(closed, len) {
      this.c = closed;
      this.setLength(len);
      var i2 = 0;
      while (i2 < len) {
        this.v[i2] = pointPool.newElement();
        this.o[i2] = pointPool.newElement();
        this.i[i2] = pointPool.newElement();
        i2 += 1;
      }
    };
    ShapePath.prototype.setLength = function(len) {
      while (this._maxLength < len) {
        this.doubleArrayLength();
      }
      this._length = len;
    };
    ShapePath.prototype.doubleArrayLength = function() {
      this.v = this.v.concat(createSizedArray(this._maxLength));
      this.i = this.i.concat(createSizedArray(this._maxLength));
      this.o = this.o.concat(createSizedArray(this._maxLength));
      this._maxLength *= 2;
    };
    ShapePath.prototype.setXYAt = function(x, y, type, pos, replace) {
      var arr;
      this._length = Math.max(this._length, pos + 1);
      if (this._length >= this._maxLength) {
        this.doubleArrayLength();
      }
      switch (type) {
        case "v":
          arr = this.v;
          break;
        case "i":
          arr = this.i;
          break;
        case "o":
          arr = this.o;
          break;
        default:
          arr = [];
          break;
      }
      if (!arr[pos] || arr[pos] && !replace) {
        arr[pos] = pointPool.newElement();
      }
      arr[pos][0] = x;
      arr[pos][1] = y;
    };
    ShapePath.prototype.setTripleAt = function(vX, vY, oX, oY, iX, iY, pos, replace) {
      this.setXYAt(vX, vY, "v", pos, replace);
      this.setXYAt(oX, oY, "o", pos, replace);
      this.setXYAt(iX, iY, "i", pos, replace);
    };
    ShapePath.prototype.reverse = function() {
      var newPath = new ShapePath();
      newPath.setPathData(this.c, this._length);
      var vertices = this.v;
      var outPoints = this.o;
      var inPoints = this.i;
      var init = 0;
      if (this.c) {
        newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
        init = 1;
      }
      var cnt = this._length - 1;
      var len = this._length;
      var i2;
      for (i2 = init; i2 < len; i2 += 1) {
        newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i2, false);
        cnt -= 1;
      }
      return newPath;
    };
    ShapePath.prototype.length = function() {
      return this._length;
    };
    var shapePool = function() {
      function create5() {
        return new ShapePath();
      }
      function release(shapePath) {
        var len = shapePath._length;
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          pointPool.release(shapePath.v[i2]);
          pointPool.release(shapePath.i[i2]);
          pointPool.release(shapePath.o[i2]);
          shapePath.v[i2] = null;
          shapePath.i[i2] = null;
          shapePath.o[i2] = null;
        }
        shapePath._length = 0;
        shapePath.c = false;
      }
      function clone(shape) {
        var cloned = factory.newElement();
        var i2;
        var len = shape._length === void 0 ? shape.v.length : shape._length;
        cloned.setLength(len);
        cloned.c = shape.c;
        for (i2 = 0; i2 < len; i2 += 1) {
          cloned.setTripleAt(shape.v[i2][0], shape.v[i2][1], shape.o[i2][0], shape.o[i2][1], shape.i[i2][0], shape.i[i2][1], i2);
        }
        return cloned;
      }
      var factory = poolFactory(4, create5, release);
      factory.clone = clone;
      return factory;
    }();
    function ShapeCollection() {
      this._length = 0;
      this._maxLength = 4;
      this.shapes = createSizedArray(this._maxLength);
    }
    ShapeCollection.prototype.addShape = function(shapeData) {
      if (this._length === this._maxLength) {
        this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
        this._maxLength *= 2;
      }
      this.shapes[this._length] = shapeData;
      this._length += 1;
    };
    ShapeCollection.prototype.releaseShapes = function() {
      var i2;
      for (i2 = 0; i2 < this._length; i2 += 1) {
        shapePool.release(this.shapes[i2]);
      }
      this._length = 0;
    };
    var shapeCollectionPool = function() {
      var ob2 = {
        newShapeCollection,
        release
      };
      var _length = 0;
      var _maxLength = 4;
      var pool = createSizedArray(_maxLength);
      function newShapeCollection() {
        var shapeCollection;
        if (_length) {
          _length -= 1;
          shapeCollection = pool[_length];
        } else {
          shapeCollection = new ShapeCollection();
        }
        return shapeCollection;
      }
      function release(shapeCollection) {
        var i2;
        var len = shapeCollection._length;
        for (i2 = 0; i2 < len; i2 += 1) {
          shapePool.release(shapeCollection.shapes[i2]);
        }
        shapeCollection._length = 0;
        if (_length === _maxLength) {
          pool = pooling["double"](pool);
          _maxLength *= 2;
        }
        pool[_length] = shapeCollection;
        _length += 1;
      }
      return ob2;
    }();
    var ShapePropertyFactory = function() {
      var initFrame2 = -999999;
      function interpolateShape(frameNum, previousValue, caching) {
        var iterationIndex = caching.lastIndex;
        var keyPropS;
        var keyPropE;
        var isHold;
        var j2;
        var k2;
        var jLen;
        var kLen;
        var perc;
        var vertexValue;
        var kf = this.keyframes;
        if (frameNum < kf[0].t - this.offsetTime) {
          keyPropS = kf[0].s[0];
          isHold = true;
          iterationIndex = 0;
        } else if (frameNum >= kf[kf.length - 1].t - this.offsetTime) {
          keyPropS = kf[kf.length - 1].s ? kf[kf.length - 1].s[0] : kf[kf.length - 2].e[0];
          isHold = true;
        } else {
          var i2 = iterationIndex;
          var len = kf.length - 1;
          var flag = true;
          var keyData;
          var nextKeyData;
          var keyframeMetadata;
          while (flag) {
            keyData = kf[i2];
            nextKeyData = kf[i2 + 1];
            if (nextKeyData.t - this.offsetTime > frameNum) {
              break;
            }
            if (i2 < len - 1) {
              i2 += 1;
            } else {
              flag = false;
            }
          }
          keyframeMetadata = this.keyframesMetadata[i2] || {};
          isHold = keyData.h === 1;
          iterationIndex = i2;
          if (!isHold) {
            if (frameNum >= nextKeyData.t - this.offsetTime) {
              perc = 1;
            } else if (frameNum < keyData.t - this.offsetTime) {
              perc = 0;
            } else {
              var fnc;
              if (keyframeMetadata.__fnct) {
                fnc = keyframeMetadata.__fnct;
              } else {
                fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y).get;
                keyframeMetadata.__fnct = fnc;
              }
              perc = fnc((frameNum - (keyData.t - this.offsetTime)) / (nextKeyData.t - this.offsetTime - (keyData.t - this.offsetTime)));
            }
            keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];
          }
          keyPropS = keyData.s[0];
        }
        jLen = previousValue._length;
        kLen = keyPropS.i[0].length;
        caching.lastIndex = iterationIndex;
        for (j2 = 0; j2 < jLen; j2 += 1) {
          for (k2 = 0; k2 < kLen; k2 += 1) {
            vertexValue = isHold ? keyPropS.i[j2][k2] : keyPropS.i[j2][k2] + (keyPropE.i[j2][k2] - keyPropS.i[j2][k2]) * perc;
            previousValue.i[j2][k2] = vertexValue;
            vertexValue = isHold ? keyPropS.o[j2][k2] : keyPropS.o[j2][k2] + (keyPropE.o[j2][k2] - keyPropS.o[j2][k2]) * perc;
            previousValue.o[j2][k2] = vertexValue;
            vertexValue = isHold ? keyPropS.v[j2][k2] : keyPropS.v[j2][k2] + (keyPropE.v[j2][k2] - keyPropS.v[j2][k2]) * perc;
            previousValue.v[j2][k2] = vertexValue;
          }
        }
      }
      function interpolateShapeCurrentTime() {
        var frameNum = this.comp.renderedFrame - this.offsetTime;
        var initTime = this.keyframes[0].t - this.offsetTime;
        var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
        var lastFrame = this._caching.lastFrame;
        if (!(lastFrame !== initFrame2 && (lastFrame < initTime && frameNum < initTime || lastFrame > endTime && frameNum > endTime))) {
          this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
          this.interpolateShape(frameNum, this.pv, this._caching);
        }
        this._caching.lastFrame = frameNum;
        return this.pv;
      }
      function resetShape() {
        this.paths = this.localShapeCollection;
      }
      function shapesEqual(shape1, shape2) {
        if (shape1._length !== shape2._length || shape1.c !== shape2.c) {
          return false;
        }
        var i2;
        var len = shape1._length;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (shape1.v[i2][0] !== shape2.v[i2][0] || shape1.v[i2][1] !== shape2.v[i2][1] || shape1.o[i2][0] !== shape2.o[i2][0] || shape1.o[i2][1] !== shape2.o[i2][1] || shape1.i[i2][0] !== shape2.i[i2][0] || shape1.i[i2][1] !== shape2.i[i2][1]) {
            return false;
          }
        }
        return true;
      }
      function setVValue2(newPath) {
        if (!shapesEqual(this.v, newPath)) {
          this.v = shapePool.clone(newPath);
          this.localShapeCollection.releaseShapes();
          this.localShapeCollection.addShape(this.v);
          this._mdf = true;
          this.paths = this.localShapeCollection;
        }
      }
      function processEffectsSequence2() {
        if (this.elem.globalData.frameId === this.frameId) {
          return;
        }
        if (!this.effectsSequence.length) {
          this._mdf = false;
          return;
        }
        if (this.lock) {
          this.setVValue(this.pv);
          return;
        }
        this.lock = true;
        this._mdf = false;
        var finalValue;
        if (this.kf) {
          finalValue = this.pv;
        } else if (this.data.ks) {
          finalValue = this.data.ks.k;
        } else {
          finalValue = this.data.pt.k;
        }
        var i2;
        var len = this.effectsSequence.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          finalValue = this.effectsSequence[i2](finalValue);
        }
        this.setVValue(finalValue);
        this.lock = false;
        this.frameId = this.elem.globalData.frameId;
      }
      function ShapeProperty(elem2, data2, type) {
        this.propType = "shape";
        this.comp = elem2.comp;
        this.container = elem2;
        this.elem = elem2;
        this.data = data2;
        this.k = false;
        this.kf = false;
        this._mdf = false;
        var pathData = type === 3 ? data2.pt.k : data2.ks.k;
        this.v = shapePool.clone(pathData);
        this.pv = shapePool.clone(this.v);
        this.localShapeCollection = shapeCollectionPool.newShapeCollection();
        this.paths = this.localShapeCollection;
        this.paths.addShape(this.v);
        this.reset = resetShape;
        this.effectsSequence = [];
      }
      function addEffect2(effectFunction) {
        this.effectsSequence.push(effectFunction);
        this.container.addDynamicProperty(this);
      }
      ShapeProperty.prototype.interpolateShape = interpolateShape;
      ShapeProperty.prototype.getValue = processEffectsSequence2;
      ShapeProperty.prototype.setVValue = setVValue2;
      ShapeProperty.prototype.addEffect = addEffect2;
      function KeyframedShapeProperty(elem2, data2, type) {
        this.propType = "shape";
        this.comp = elem2.comp;
        this.elem = elem2;
        this.container = elem2;
        this.offsetTime = elem2.data.st;
        this.keyframes = type === 3 ? data2.pt.k : data2.ks.k;
        this.keyframesMetadata = [];
        this.k = true;
        this.kf = true;
        var len = this.keyframes[0].s[0].i.length;
        this.v = shapePool.newElement();
        this.v.setPathData(this.keyframes[0].s[0].c, len);
        this.pv = shapePool.clone(this.v);
        this.localShapeCollection = shapeCollectionPool.newShapeCollection();
        this.paths = this.localShapeCollection;
        this.paths.addShape(this.v);
        this.lastFrame = initFrame2;
        this.reset = resetShape;
        this._caching = {
          lastFrame: initFrame2,
          lastIndex: 0
        };
        this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
      }
      KeyframedShapeProperty.prototype.getValue = processEffectsSequence2;
      KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
      KeyframedShapeProperty.prototype.setVValue = setVValue2;
      KeyframedShapeProperty.prototype.addEffect = addEffect2;
      var EllShapeProperty = function() {
        var cPoint = roundCorner;
        function EllShapePropertyFactory(elem2, data2) {
          this.v = shapePool.newElement();
          this.v.setPathData(true, 4);
          this.localShapeCollection = shapeCollectionPool.newShapeCollection();
          this.paths = this.localShapeCollection;
          this.localShapeCollection.addShape(this.v);
          this.d = data2.d;
          this.elem = elem2;
          this.comp = elem2.comp;
          this.frameId = -1;
          this.initDynamicPropertyContainer(elem2);
          this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
          this.s = PropertyFactory.getProp(elem2, data2.s, 1, 0, this);
          if (this.dynamicProperties.length) {
            this.k = true;
          } else {
            this.k = false;
            this.convertEllToPath();
          }
        }
        EllShapePropertyFactory.prototype = {
          reset: resetShape,
          getValue: function getValue() {
            if (this.elem.globalData.frameId === this.frameId) {
              return;
            }
            this.frameId = this.elem.globalData.frameId;
            this.iterateDynamicProperties();
            if (this._mdf) {
              this.convertEllToPath();
            }
          },
          convertEllToPath: function convertEllToPath() {
            var p0 = this.p.v[0];
            var p1 = this.p.v[1];
            var s0 = this.s.v[0] / 2;
            var s1 = this.s.v[1] / 2;
            var _cw = this.d !== 3;
            var _v = this.v;
            _v.v[0][0] = p0;
            _v.v[0][1] = p1 - s1;
            _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
            _v.v[1][1] = p1;
            _v.v[2][0] = p0;
            _v.v[2][1] = p1 + s1;
            _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
            _v.v[3][1] = p1;
            _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
            _v.i[0][1] = p1 - s1;
            _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
            _v.i[1][1] = p1 - s1 * cPoint;
            _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
            _v.i[2][1] = p1 + s1;
            _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
            _v.i[3][1] = p1 + s1 * cPoint;
            _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
            _v.o[0][1] = p1 - s1;
            _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
            _v.o[1][1] = p1 + s1 * cPoint;
            _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
            _v.o[2][1] = p1 + s1;
            _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
            _v.o[3][1] = p1 - s1 * cPoint;
          }
        };
        extendPrototype([DynamicPropertyContainer], EllShapePropertyFactory);
        return EllShapePropertyFactory;
      }();
      var StarShapeProperty = function() {
        function StarShapePropertyFactory(elem2, data2) {
          this.v = shapePool.newElement();
          this.v.setPathData(true, 0);
          this.elem = elem2;
          this.comp = elem2.comp;
          this.data = data2;
          this.frameId = -1;
          this.d = data2.d;
          this.initDynamicPropertyContainer(elem2);
          if (data2.sy === 1) {
            this.ir = PropertyFactory.getProp(elem2, data2.ir, 0, 0, this);
            this.is = PropertyFactory.getProp(elem2, data2.is, 0, 0.01, this);
            this.convertToPath = this.convertStarToPath;
          } else {
            this.convertToPath = this.convertPolygonToPath;
          }
          this.pt = PropertyFactory.getProp(elem2, data2.pt, 0, 0, this);
          this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
          this.r = PropertyFactory.getProp(elem2, data2.r, 0, degToRads, this);
          this.or = PropertyFactory.getProp(elem2, data2.or, 0, 0, this);
          this.os = PropertyFactory.getProp(elem2, data2.os, 0, 0.01, this);
          this.localShapeCollection = shapeCollectionPool.newShapeCollection();
          this.localShapeCollection.addShape(this.v);
          this.paths = this.localShapeCollection;
          if (this.dynamicProperties.length) {
            this.k = true;
          } else {
            this.k = false;
            this.convertToPath();
          }
        }
        StarShapePropertyFactory.prototype = {
          reset: resetShape,
          getValue: function getValue() {
            if (this.elem.globalData.frameId === this.frameId) {
              return;
            }
            this.frameId = this.elem.globalData.frameId;
            this.iterateDynamicProperties();
            if (this._mdf) {
              this.convertToPath();
            }
          },
          convertStarToPath: function convertStarToPath() {
            var numPts = Math.floor(this.pt.v) * 2;
            var angle = Math.PI * 2 / numPts;
            var longFlag = true;
            var longRad = this.or.v;
            var shortRad = this.ir.v;
            var longRound = this.os.v;
            var shortRound = this.is.v;
            var longPerimSegment = 2 * Math.PI * longRad / (numPts * 2);
            var shortPerimSegment = 2 * Math.PI * shortRad / (numPts * 2);
            var i2;
            var rad;
            var roundness;
            var perimSegment;
            var currentAng = -Math.PI / 2;
            currentAng += this.r.v;
            var dir = this.data.d === 3 ? -1 : 1;
            this.v._length = 0;
            for (i2 = 0; i2 < numPts; i2 += 1) {
              rad = longFlag ? longRad : shortRad;
              roundness = longFlag ? longRound : shortRound;
              perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
              var x = rad * Math.cos(currentAng);
              var y = rad * Math.sin(currentAng);
              var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
              var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
              x += +this.p.v[0];
              y += +this.p.v[1];
              this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i2, true);
              longFlag = !longFlag;
              currentAng += angle * dir;
            }
          },
          convertPolygonToPath: function convertPolygonToPath() {
            var numPts = Math.floor(this.pt.v);
            var angle = Math.PI * 2 / numPts;
            var rad = this.or.v;
            var roundness = this.os.v;
            var perimSegment = 2 * Math.PI * rad / (numPts * 4);
            var i2;
            var currentAng = -Math.PI * 0.5;
            var dir = this.data.d === 3 ? -1 : 1;
            currentAng += this.r.v;
            this.v._length = 0;
            for (i2 = 0; i2 < numPts; i2 += 1) {
              var x = rad * Math.cos(currentAng);
              var y = rad * Math.sin(currentAng);
              var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
              var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
              x += +this.p.v[0];
              y += +this.p.v[1];
              this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i2, true);
              currentAng += angle * dir;
            }
            this.paths.length = 0;
            this.paths[0] = this.v;
          }
        };
        extendPrototype([DynamicPropertyContainer], StarShapePropertyFactory);
        return StarShapePropertyFactory;
      }();
      var RectShapeProperty = function() {
        function RectShapePropertyFactory(elem2, data2) {
          this.v = shapePool.newElement();
          this.v.c = true;
          this.localShapeCollection = shapeCollectionPool.newShapeCollection();
          this.localShapeCollection.addShape(this.v);
          this.paths = this.localShapeCollection;
          this.elem = elem2;
          this.comp = elem2.comp;
          this.frameId = -1;
          this.d = data2.d;
          this.initDynamicPropertyContainer(elem2);
          this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
          this.s = PropertyFactory.getProp(elem2, data2.s, 1, 0, this);
          this.r = PropertyFactory.getProp(elem2, data2.r, 0, 0, this);
          if (this.dynamicProperties.length) {
            this.k = true;
          } else {
            this.k = false;
            this.convertRectToPath();
          }
        }
        RectShapePropertyFactory.prototype = {
          convertRectToPath: function convertRectToPath() {
            var p0 = this.p.v[0];
            var p1 = this.p.v[1];
            var v0 = this.s.v[0] / 2;
            var v1 = this.s.v[1] / 2;
            var round2 = bmMin(v0, v1, this.r.v);
            var cPoint = round2 * (1 - roundCorner);
            this.v._length = 0;
            if (this.d === 2 || this.d === 1) {
              this.v.setTripleAt(p0 + v0, p1 - v1 + round2, p0 + v0, p1 - v1 + round2, p0 + v0, p1 - v1 + cPoint, 0, true);
              this.v.setTripleAt(p0 + v0, p1 + v1 - round2, p0 + v0, p1 + v1 - cPoint, p0 + v0, p1 + v1 - round2, 1, true);
              if (round2 !== 0) {
                this.v.setTripleAt(p0 + v0 - round2, p1 + v1, p0 + v0 - round2, p1 + v1, p0 + v0 - cPoint, p1 + v1, 2, true);
                this.v.setTripleAt(p0 - v0 + round2, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0 + round2, p1 + v1, 3, true);
                this.v.setTripleAt(p0 - v0, p1 + v1 - round2, p0 - v0, p1 + v1 - round2, p0 - v0, p1 + v1 - cPoint, 4, true);
                this.v.setTripleAt(p0 - v0, p1 - v1 + round2, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1 + round2, 5, true);
                this.v.setTripleAt(p0 - v0 + round2, p1 - v1, p0 - v0 + round2, p1 - v1, p0 - v0 + cPoint, p1 - v1, 6, true);
                this.v.setTripleAt(p0 + v0 - round2, p1 - v1, p0 + v0 - cPoint, p1 - v1, p0 + v0 - round2, p1 - v1, 7, true);
              } else {
                this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0, p1 + v1, 2);
                this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1, 3);
              }
            } else {
              this.v.setTripleAt(p0 + v0, p1 - v1 + round2, p0 + v0, p1 - v1 + cPoint, p0 + v0, p1 - v1 + round2, 0, true);
              if (round2 !== 0) {
                this.v.setTripleAt(p0 + v0 - round2, p1 - v1, p0 + v0 - round2, p1 - v1, p0 + v0 - cPoint, p1 - v1, 1, true);
                this.v.setTripleAt(p0 - v0 + round2, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0 + round2, p1 - v1, 2, true);
                this.v.setTripleAt(p0 - v0, p1 - v1 + round2, p0 - v0, p1 - v1 + round2, p0 - v0, p1 - v1 + cPoint, 3, true);
                this.v.setTripleAt(p0 - v0, p1 + v1 - round2, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1 - round2, 4, true);
                this.v.setTripleAt(p0 - v0 + round2, p1 + v1, p0 - v0 + round2, p1 + v1, p0 - v0 + cPoint, p1 + v1, 5, true);
                this.v.setTripleAt(p0 + v0 - round2, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0 - round2, p1 + v1, 6, true);
                this.v.setTripleAt(p0 + v0, p1 + v1 - round2, p0 + v0, p1 + v1 - round2, p0 + v0, p1 + v1 - cPoint, 7, true);
              } else {
                this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0, p1 - v1, 1, true);
                this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1, 2, true);
                this.v.setTripleAt(p0 + v0, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0, p1 + v1, 3, true);
              }
            }
          },
          getValue: function getValue() {
            if (this.elem.globalData.frameId === this.frameId) {
              return;
            }
            this.frameId = this.elem.globalData.frameId;
            this.iterateDynamicProperties();
            if (this._mdf) {
              this.convertRectToPath();
            }
          },
          reset: resetShape
        };
        extendPrototype([DynamicPropertyContainer], RectShapePropertyFactory);
        return RectShapePropertyFactory;
      }();
      function getShapeProp(elem2, data2, type) {
        var prop;
        if (type === 3 || type === 4) {
          var dataProp = type === 3 ? data2.pt : data2.ks;
          var keys2 = dataProp.k;
          if (keys2.length) {
            prop = new KeyframedShapeProperty(elem2, data2, type);
          } else {
            prop = new ShapeProperty(elem2, data2, type);
          }
        } else if (type === 5) {
          prop = new RectShapeProperty(elem2, data2);
        } else if (type === 6) {
          prop = new EllShapeProperty(elem2, data2);
        } else if (type === 7) {
          prop = new StarShapeProperty(elem2, data2);
        }
        if (prop.k) {
          elem2.addDynamicProperty(prop);
        }
        return prop;
      }
      function getConstructorFunction() {
        return ShapeProperty;
      }
      function getKeyframedConstructorFunction() {
        return KeyframedShapeProperty;
      }
      var ob2 = {};
      ob2.getShapeProp = getShapeProp;
      ob2.getConstructorFunction = getConstructorFunction;
      ob2.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
      return ob2;
    }();
    /*!
     Transformation Matrix v2.0
     (c) Epistemex 2014-2015
     www.epistemex.com
     By Ken Fyrstenberg
     Contributions by leeoniya.
     License: MIT, header required.
     */
    var Matrix = /* @__PURE__ */ function() {
      var _cos = Math.cos;
      var _sin = Math.sin;
      var _tan = Math.tan;
      var _rnd = Math.round;
      function reset() {
        this.props[0] = 1;
        this.props[1] = 0;
        this.props[2] = 0;
        this.props[3] = 0;
        this.props[4] = 0;
        this.props[5] = 1;
        this.props[6] = 0;
        this.props[7] = 0;
        this.props[8] = 0;
        this.props[9] = 0;
        this.props[10] = 1;
        this.props[11] = 0;
        this.props[12] = 0;
        this.props[13] = 0;
        this.props[14] = 0;
        this.props[15] = 1;
        return this;
      }
      function rotate(angle) {
        if (angle === 0) {
          return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      }
      function rotateX(angle) {
        if (angle === 0) {
          return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1);
      }
      function rotateY(angle) {
        if (angle === 0) {
          return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, 0, mSin, 0, 0, 1, 0, 0, -mSin, 0, mCos, 0, 0, 0, 0, 1);
      }
      function rotateZ(angle) {
        if (angle === 0) {
          return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      }
      function shear(sx, sy) {
        return this._t(1, sy, sx, 1, 0, 0);
      }
      function skew(ax, ay) {
        return this.shear(_tan(ax), _tan(ay));
      }
      function skewFromAxis(ax, angle) {
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, mSin, 0, 0, -mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, _tan(ax), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      }
      function scale2(sx, sy, sz) {
        if (!sz && sz !== 0) {
          sz = 1;
        }
        if (sx === 1 && sy === 1 && sz === 1) {
          return this;
        }
        return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
      }
      function setTransform(a, b, c, d, e, f, g, h, i2, j2, k2, l, m, n, o, p) {
        this.props[0] = a;
        this.props[1] = b;
        this.props[2] = c;
        this.props[3] = d;
        this.props[4] = e;
        this.props[5] = f;
        this.props[6] = g;
        this.props[7] = h;
        this.props[8] = i2;
        this.props[9] = j2;
        this.props[10] = k2;
        this.props[11] = l;
        this.props[12] = m;
        this.props[13] = n;
        this.props[14] = o;
        this.props[15] = p;
        return this;
      }
      function translate(tx, ty, tz) {
        tz = tz || 0;
        if (tx !== 0 || ty !== 0 || tz !== 0) {
          return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1);
        }
        return this;
      }
      function transform2(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2) {
        var _p = this.props;
        if (a2 === 1 && b2 === 0 && c2 === 0 && d2 === 0 && e2 === 0 && f2 === 1 && g2 === 0 && h2 === 0 && i2 === 0 && j2 === 0 && k2 === 1 && l2 === 0) {
          _p[12] = _p[12] * a2 + _p[15] * m2;
          _p[13] = _p[13] * f2 + _p[15] * n2;
          _p[14] = _p[14] * k2 + _p[15] * o2;
          _p[15] *= p2;
          this._identityCalculated = false;
          return this;
        }
        var a1 = _p[0];
        var b1 = _p[1];
        var c1 = _p[2];
        var d1 = _p[3];
        var e1 = _p[4];
        var f1 = _p[5];
        var g1 = _p[6];
        var h1 = _p[7];
        var i1 = _p[8];
        var j1 = _p[9];
        var k1 = _p[10];
        var l1 = _p[11];
        var m1 = _p[12];
        var n1 = _p[13];
        var o1 = _p[14];
        var p1 = _p[15];
        _p[0] = a1 * a2 + b1 * e2 + c1 * i2 + d1 * m2;
        _p[1] = a1 * b2 + b1 * f2 + c1 * j2 + d1 * n2;
        _p[2] = a1 * c2 + b1 * g2 + c1 * k2 + d1 * o2;
        _p[3] = a1 * d2 + b1 * h2 + c1 * l2 + d1 * p2;
        _p[4] = e1 * a2 + f1 * e2 + g1 * i2 + h1 * m2;
        _p[5] = e1 * b2 + f1 * f2 + g1 * j2 + h1 * n2;
        _p[6] = e1 * c2 + f1 * g2 + g1 * k2 + h1 * o2;
        _p[7] = e1 * d2 + f1 * h2 + g1 * l2 + h1 * p2;
        _p[8] = i1 * a2 + j1 * e2 + k1 * i2 + l1 * m2;
        _p[9] = i1 * b2 + j1 * f2 + k1 * j2 + l1 * n2;
        _p[10] = i1 * c2 + j1 * g2 + k1 * k2 + l1 * o2;
        _p[11] = i1 * d2 + j1 * h2 + k1 * l2 + l1 * p2;
        _p[12] = m1 * a2 + n1 * e2 + o1 * i2 + p1 * m2;
        _p[13] = m1 * b2 + n1 * f2 + o1 * j2 + p1 * n2;
        _p[14] = m1 * c2 + n1 * g2 + o1 * k2 + p1 * o2;
        _p[15] = m1 * d2 + n1 * h2 + o1 * l2 + p1 * p2;
        this._identityCalculated = false;
        return this;
      }
      function multiply(matrix) {
        var matrixProps = matrix.props;
        return this.transform(matrixProps[0], matrixProps[1], matrixProps[2], matrixProps[3], matrixProps[4], matrixProps[5], matrixProps[6], matrixProps[7], matrixProps[8], matrixProps[9], matrixProps[10], matrixProps[11], matrixProps[12], matrixProps[13], matrixProps[14], matrixProps[15]);
      }
      function isIdentity() {
        if (!this._identityCalculated) {
          this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
          this._identityCalculated = true;
        }
        return this._identity;
      }
      function equals(matr) {
        var i2 = 0;
        while (i2 < 16) {
          if (matr.props[i2] !== this.props[i2]) {
            return false;
          }
          i2 += 1;
        }
        return true;
      }
      function clone(matr) {
        var i2;
        for (i2 = 0; i2 < 16; i2 += 1) {
          matr.props[i2] = this.props[i2];
        }
        return matr;
      }
      function cloneFromProps(props) {
        var i2;
        for (i2 = 0; i2 < 16; i2 += 1) {
          this.props[i2] = props[i2];
        }
      }
      function applyToPoint(x, y, z) {
        return {
          x: x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],
          y: x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],
          z: x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]
        };
      }
      function applyToX(x, y, z) {
        return x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12];
      }
      function applyToY(x, y, z) {
        return x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13];
      }
      function applyToZ(x, y, z) {
        return x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14];
      }
      function getInverseMatrix() {
        var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
        var a = this.props[5] / determinant;
        var b = -this.props[1] / determinant;
        var c = -this.props[4] / determinant;
        var d = this.props[0] / determinant;
        var e = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / determinant;
        var f = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / determinant;
        var inverseMatrix = new Matrix();
        inverseMatrix.props[0] = a;
        inverseMatrix.props[1] = b;
        inverseMatrix.props[4] = c;
        inverseMatrix.props[5] = d;
        inverseMatrix.props[12] = e;
        inverseMatrix.props[13] = f;
        return inverseMatrix;
      }
      function inversePoint(pt) {
        var inverseMatrix = this.getInverseMatrix();
        return inverseMatrix.applyToPointArray(pt[0], pt[1], pt[2] || 0);
      }
      function inversePoints(pts) {
        var i2;
        var len = pts.length;
        var retPts = [];
        for (i2 = 0; i2 < len; i2 += 1) {
          retPts[i2] = inversePoint(pts[i2]);
        }
        return retPts;
      }
      function applyToTriplePoints(pt1, pt2, pt3) {
        var arr = createTypedArray("float32", 6);
        if (this.isIdentity()) {
          arr[0] = pt1[0];
          arr[1] = pt1[1];
          arr[2] = pt2[0];
          arr[3] = pt2[1];
          arr[4] = pt3[0];
          arr[5] = pt3[1];
        } else {
          var p0 = this.props[0];
          var p1 = this.props[1];
          var p4 = this.props[4];
          var p5 = this.props[5];
          var p12 = this.props[12];
          var p13 = this.props[13];
          arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;
          arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
          arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;
          arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
          arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;
          arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
        }
        return arr;
      }
      function applyToPointArray(x, y, z) {
        var arr;
        if (this.isIdentity()) {
          arr = [x, y, z];
        } else {
          arr = [x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12], x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13], x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]];
        }
        return arr;
      }
      function applyToPointStringified(x, y) {
        if (this.isIdentity()) {
          return x + "," + y;
        }
        var _p = this.props;
        return Math.round((x * _p[0] + y * _p[4] + _p[12]) * 100) / 100 + "," + Math.round((x * _p[1] + y * _p[5] + _p[13]) * 100) / 100;
      }
      function toCSS() {
        var i2 = 0;
        var props = this.props;
        var cssValue = "matrix3d(";
        var v2 = 1e4;
        while (i2 < 16) {
          cssValue += _rnd(props[i2] * v2) / v2;
          cssValue += i2 === 15 ? ")" : ",";
          i2 += 1;
        }
        return cssValue;
      }
      function roundMatrixProperty(val2) {
        var v2 = 1e4;
        if (val2 < 1e-6 && val2 > 0 || val2 > -1e-6 && val2 < 0) {
          return _rnd(val2 * v2) / v2;
        }
        return val2;
      }
      function to2dCSS() {
        var props = this.props;
        var _a2 = roundMatrixProperty(props[0]);
        var _b2 = roundMatrixProperty(props[1]);
        var _c2 = roundMatrixProperty(props[4]);
        var _d2 = roundMatrixProperty(props[5]);
        var _e2 = roundMatrixProperty(props[12]);
        var _f = roundMatrixProperty(props[13]);
        return "matrix(" + _a2 + "," + _b2 + "," + _c2 + "," + _d2 + "," + _e2 + "," + _f + ")";
      }
      return function() {
        this.reset = reset;
        this.rotate = rotate;
        this.rotateX = rotateX;
        this.rotateY = rotateY;
        this.rotateZ = rotateZ;
        this.skew = skew;
        this.skewFromAxis = skewFromAxis;
        this.shear = shear;
        this.scale = scale2;
        this.setTransform = setTransform;
        this.translate = translate;
        this.transform = transform2;
        this.multiply = multiply;
        this.applyToPoint = applyToPoint;
        this.applyToX = applyToX;
        this.applyToY = applyToY;
        this.applyToZ = applyToZ;
        this.applyToPointArray = applyToPointArray;
        this.applyToTriplePoints = applyToTriplePoints;
        this.applyToPointStringified = applyToPointStringified;
        this.toCSS = toCSS;
        this.to2dCSS = to2dCSS;
        this.clone = clone;
        this.cloneFromProps = cloneFromProps;
        this.equals = equals;
        this.inversePoints = inversePoints;
        this.inversePoint = inversePoint;
        this.getInverseMatrix = getInverseMatrix;
        this._t = this.transform;
        this.isIdentity = isIdentity;
        this._identity = true;
        this._identityCalculated = false;
        this.props = createTypedArray("float32", 16);
        this.reset();
      };
    }();
    function _typeof$3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$3(obj);
    }
    var lottie = {};
    function setLocation(href) {
      setLocationHref(href);
    }
    function searchAnimations() {
      {
        animationManager.searchAnimations();
      }
    }
    function setSubframeRendering(flag) {
      setSubframeEnabled(flag);
    }
    function setPrefix(prefix) {
      setIdPrefix(prefix);
    }
    function loadAnimation(params) {
      return animationManager.loadAnimation(params);
    }
    function setQuality(value2) {
      if (typeof value2 === "string") {
        switch (value2) {
          case "high":
            setDefaultCurveSegments(200);
            break;
          default:
          case "medium":
            setDefaultCurveSegments(50);
            break;
          case "low":
            setDefaultCurveSegments(10);
            break;
        }
      } else if (!isNaN(value2) && value2 > 1) {
        setDefaultCurveSegments(value2);
      }
    }
    function inBrowser() {
      return typeof navigator !== "undefined";
    }
    function installPlugin(type, plugin) {
      if (type === "expressions") {
        setExpressionsPlugin(plugin);
      }
    }
    function getFactory(name2) {
      switch (name2) {
        case "propertyFactory":
          return PropertyFactory;
        case "shapePropertyFactory":
          return ShapePropertyFactory;
        case "matrix":
          return Matrix;
        default:
          return null;
      }
    }
    lottie.play = animationManager.play;
    lottie.pause = animationManager.pause;
    lottie.setLocationHref = setLocation;
    lottie.togglePause = animationManager.togglePause;
    lottie.setSpeed = animationManager.setSpeed;
    lottie.setDirection = animationManager.setDirection;
    lottie.stop = animationManager.stop;
    lottie.searchAnimations = searchAnimations;
    lottie.registerAnimation = animationManager.registerAnimation;
    lottie.loadAnimation = loadAnimation;
    lottie.setSubframeRendering = setSubframeRendering;
    lottie.resize = animationManager.resize;
    lottie.goToAndStop = animationManager.goToAndStop;
    lottie.destroy = animationManager.destroy;
    lottie.setQuality = setQuality;
    lottie.inBrowser = inBrowser;
    lottie.installPlugin = installPlugin;
    lottie.freeze = animationManager.freeze;
    lottie.unfreeze = animationManager.unfreeze;
    lottie.setVolume = animationManager.setVolume;
    lottie.mute = animationManager.mute;
    lottie.unmute = animationManager.unmute;
    lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations;
    lottie.useWebWorker = setWebWorker;
    lottie.setIDPrefix = setPrefix;
    lottie.__getFactory = getFactory;
    lottie.version = "5.12.2";
    function checkReady() {
      if (document.readyState === "complete") {
        clearInterval(readyStateCheckInterval);
        searchAnimations();
      }
    }
    function getQueryVariable(variable) {
      var vars = queryString.split("&");
      for (var i2 = 0; i2 < vars.length; i2 += 1) {
        var pair = vars[i2].split("=");
        if (decodeURIComponent(pair[0]) == variable) {
          return decodeURIComponent(pair[1]);
        }
      }
      return null;
    }
    var queryString = "";
    {
      var scripts = document.getElementsByTagName("script");
      var index = scripts.length - 1;
      var myScript = scripts[index] || {
        src: ""
      };
      queryString = myScript.src ? myScript.src.replace(/^[^\?]+\??/, "") : "";
      getQueryVariable("renderer");
    }
    var readyStateCheckInterval = setInterval(checkReady, 100);
    try {
      if (!((false ? "undefined" : _typeof$3(exports)) === "object" && true) && true) {
        window.bodymovin = lottie;
      }
    } catch (err) {
    }
    var ShapeModifiers = function() {
      var ob2 = {};
      var modifiers = {};
      ob2.registerModifier = registerModifier;
      ob2.getModifier = getModifier;
      function registerModifier(nm, factory) {
        if (!modifiers[nm]) {
          modifiers[nm] = factory;
        }
      }
      function getModifier(nm, elem2, data2) {
        return new modifiers[nm](elem2, data2);
      }
      return ob2;
    }();
    function ShapeModifier() {
    }
    ShapeModifier.prototype.initModifierProperties = function() {
    };
    ShapeModifier.prototype.addShapeToModifier = function() {
    };
    ShapeModifier.prototype.addShape = function(data2) {
      if (!this.closed) {
        data2.sh.container.addDynamicProperty(data2.sh);
        var shapeData = {
          shape: data2.sh,
          data: data2,
          localShapeCollection: shapeCollectionPool.newShapeCollection()
        };
        this.shapes.push(shapeData);
        this.addShapeToModifier(shapeData);
        if (this._isAnimated) {
          data2.setAsAnimated();
        }
      }
    };
    ShapeModifier.prototype.init = function(elem2, data2) {
      this.shapes = [];
      this.elem = elem2;
      this.initDynamicPropertyContainer(elem2);
      this.initModifierProperties(elem2, data2);
      this.frameId = initialDefaultFrame;
      this.closed = false;
      this.k = false;
      if (this.dynamicProperties.length) {
        this.k = true;
      } else {
        this.getValue(true);
      }
    };
    ShapeModifier.prototype.processKeys = function() {
      if (this.elem.globalData.frameId === this.frameId) {
        return;
      }
      this.frameId = this.elem.globalData.frameId;
      this.iterateDynamicProperties();
    };
    extendPrototype([DynamicPropertyContainer], ShapeModifier);
    function TrimModifier() {
    }
    extendPrototype([ShapeModifier], TrimModifier);
    TrimModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.s = PropertyFactory.getProp(elem2, data2.s, 0, 0.01, this);
      this.e = PropertyFactory.getProp(elem2, data2.e, 0, 0.01, this);
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0, this);
      this.sValue = 0;
      this.eValue = 0;
      this.getValue = this.processKeys;
      this.m = data2.m;
      this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
    };
    TrimModifier.prototype.addShapeToModifier = function(shapeData) {
      shapeData.pathsData = [];
    };
    TrimModifier.prototype.calculateShapeEdges = function(s, e, shapeLength, addedLength, totalModifierLength) {
      var segments = [];
      if (e <= 1) {
        segments.push({
          s,
          e
        });
      } else if (s >= 1) {
        segments.push({
          s: s - 1,
          e: e - 1
        });
      } else {
        segments.push({
          s,
          e: 1
        });
        segments.push({
          s: 0,
          e: e - 1
        });
      }
      var shapeSegments = [];
      var i2;
      var len = segments.length;
      var segmentOb;
      for (i2 = 0; i2 < len; i2 += 1) {
        segmentOb = segments[i2];
        if (!(segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength)) {
          var shapeS;
          var shapeE;
          if (segmentOb.s * totalModifierLength <= addedLength) {
            shapeS = 0;
          } else {
            shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
          }
          if (segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
            shapeE = 1;
          } else {
            shapeE = (segmentOb.e * totalModifierLength - addedLength) / shapeLength;
          }
          shapeSegments.push([shapeS, shapeE]);
        }
      }
      if (!shapeSegments.length) {
        shapeSegments.push([0, 0]);
      }
      return shapeSegments;
    };
    TrimModifier.prototype.releasePathsData = function(pathsData) {
      var i2;
      var len = pathsData.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        segmentsLengthPool.release(pathsData[i2]);
      }
      pathsData.length = 0;
      return pathsData;
    };
    TrimModifier.prototype.processShapes = function(_isFirstFrame) {
      var s;
      var e;
      if (this._mdf || _isFirstFrame) {
        var o = this.o.v % 360 / 360;
        if (o < 0) {
          o += 1;
        }
        if (this.s.v > 1) {
          s = 1 + o;
        } else if (this.s.v < 0) {
          s = 0 + o;
        } else {
          s = this.s.v + o;
        }
        if (this.e.v > 1) {
          e = 1 + o;
        } else if (this.e.v < 0) {
          e = 0 + o;
        } else {
          e = this.e.v + o;
        }
        if (s > e) {
          var _s = s;
          s = e;
          e = _s;
        }
        s = Math.round(s * 1e4) * 1e-4;
        e = Math.round(e * 1e4) * 1e-4;
        this.sValue = s;
        this.eValue = e;
      } else {
        s = this.sValue;
        e = this.eValue;
      }
      var shapePaths;
      var i2;
      var len = this.shapes.length;
      var j2;
      var jLen;
      var pathsData;
      var pathData;
      var totalShapeLength;
      var totalModifierLength = 0;
      if (e === s) {
        for (i2 = 0; i2 < len; i2 += 1) {
          this.shapes[i2].localShapeCollection.releaseShapes();
          this.shapes[i2].shape._mdf = true;
          this.shapes[i2].shape.paths = this.shapes[i2].localShapeCollection;
          if (this._mdf) {
            this.shapes[i2].pathsData.length = 0;
          }
        }
      } else if (!(e === 1 && s === 0 || e === 0 && s === 1)) {
        var segments = [];
        var shapeData;
        var localShapeCollection;
        for (i2 = 0; i2 < len; i2 += 1) {
          shapeData = this.shapes[i2];
          if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
            shapeData.shape.paths = shapeData.localShapeCollection;
          } else {
            shapePaths = shapeData.shape.paths;
            jLen = shapePaths._length;
            totalShapeLength = 0;
            if (!shapeData.shape._mdf && shapeData.pathsData.length) {
              totalShapeLength = shapeData.totalShapeLength;
            } else {
              pathsData = this.releasePathsData(shapeData.pathsData);
              for (j2 = 0; j2 < jLen; j2 += 1) {
                pathData = bez.getSegmentsLength(shapePaths.shapes[j2]);
                pathsData.push(pathData);
                totalShapeLength += pathData.totalLength;
              }
              shapeData.totalShapeLength = totalShapeLength;
              shapeData.pathsData = pathsData;
            }
            totalModifierLength += totalShapeLength;
            shapeData.shape._mdf = true;
          }
        }
        var shapeS = s;
        var shapeE = e;
        var addedLength = 0;
        var edges;
        for (i2 = len - 1; i2 >= 0; i2 -= 1) {
          shapeData = this.shapes[i2];
          if (shapeData.shape._mdf) {
            localShapeCollection = shapeData.localShapeCollection;
            localShapeCollection.releaseShapes();
            if (this.m === 2 && len > 1) {
              edges = this.calculateShapeEdges(s, e, shapeData.totalShapeLength, addedLength, totalModifierLength);
              addedLength += shapeData.totalShapeLength;
            } else {
              edges = [[shapeS, shapeE]];
            }
            jLen = edges.length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              shapeS = edges[j2][0];
              shapeE = edges[j2][1];
              segments.length = 0;
              if (shapeE <= 1) {
                segments.push({
                  s: shapeData.totalShapeLength * shapeS,
                  e: shapeData.totalShapeLength * shapeE
                });
              } else if (shapeS >= 1) {
                segments.push({
                  s: shapeData.totalShapeLength * (shapeS - 1),
                  e: shapeData.totalShapeLength * (shapeE - 1)
                });
              } else {
                segments.push({
                  s: shapeData.totalShapeLength * shapeS,
                  e: shapeData.totalShapeLength
                });
                segments.push({
                  s: 0,
                  e: shapeData.totalShapeLength * (shapeE - 1)
                });
              }
              var newShapesData = this.addShapes(shapeData, segments[0]);
              if (segments[0].s !== segments[0].e) {
                if (segments.length > 1) {
                  var lastShapeInCollection = shapeData.shape.paths.shapes[shapeData.shape.paths._length - 1];
                  if (lastShapeInCollection.c) {
                    var lastShape = newShapesData.pop();
                    this.addPaths(newShapesData, localShapeCollection);
                    newShapesData = this.addShapes(shapeData, segments[1], lastShape);
                  } else {
                    this.addPaths(newShapesData, localShapeCollection);
                    newShapesData = this.addShapes(shapeData, segments[1]);
                  }
                }
                this.addPaths(newShapesData, localShapeCollection);
              }
            }
            shapeData.shape.paths = localShapeCollection;
          }
        }
      } else if (this._mdf) {
        for (i2 = 0; i2 < len; i2 += 1) {
          this.shapes[i2].pathsData.length = 0;
          this.shapes[i2].shape._mdf = true;
        }
      }
    };
    TrimModifier.prototype.addPaths = function(newPaths, localShapeCollection) {
      var i2;
      var len = newPaths.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        localShapeCollection.addShape(newPaths[i2]);
      }
    };
    TrimModifier.prototype.addSegment = function(pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
      shapePath.setXYAt(pt2[0], pt2[1], "o", pos);
      shapePath.setXYAt(pt3[0], pt3[1], "i", pos + 1);
      if (newShape) {
        shapePath.setXYAt(pt1[0], pt1[1], "v", pos);
      }
      shapePath.setXYAt(pt4[0], pt4[1], "v", pos + 1);
    };
    TrimModifier.prototype.addSegmentFromArray = function(points, shapePath, pos, newShape) {
      shapePath.setXYAt(points[1], points[5], "o", pos);
      shapePath.setXYAt(points[2], points[6], "i", pos + 1);
      if (newShape) {
        shapePath.setXYAt(points[0], points[4], "v", pos);
      }
      shapePath.setXYAt(points[3], points[7], "v", pos + 1);
    };
    TrimModifier.prototype.addShapes = function(shapeData, shapeSegment, shapePath) {
      var pathsData = shapeData.pathsData;
      var shapePaths = shapeData.shape.paths.shapes;
      var i2;
      var len = shapeData.shape.paths._length;
      var j2;
      var jLen;
      var addedLength = 0;
      var currentLengthData;
      var segmentCount;
      var lengths;
      var segment;
      var shapes = [];
      var initPos;
      var newShape = true;
      if (!shapePath) {
        shapePath = shapePool.newElement();
        segmentCount = 0;
        initPos = 0;
      } else {
        segmentCount = shapePath._length;
        initPos = shapePath._length;
      }
      shapes.push(shapePath);
      for (i2 = 0; i2 < len; i2 += 1) {
        lengths = pathsData[i2].lengths;
        shapePath.c = shapePaths[i2].c;
        jLen = shapePaths[i2].c ? lengths.length : lengths.length + 1;
        for (j2 = 1; j2 < jLen; j2 += 1) {
          currentLengthData = lengths[j2 - 1];
          if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
            addedLength += currentLengthData.addedLength;
            shapePath.c = false;
          } else if (addedLength > shapeSegment.e) {
            shapePath.c = false;
            break;
          } else {
            if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
              this.addSegment(shapePaths[i2].v[j2 - 1], shapePaths[i2].o[j2 - 1], shapePaths[i2].i[j2], shapePaths[i2].v[j2], shapePath, segmentCount, newShape);
              newShape = false;
            } else {
              segment = bez.getNewSegment(shapePaths[i2].v[j2 - 1], shapePaths[i2].v[j2], shapePaths[i2].o[j2 - 1], shapePaths[i2].i[j2], (shapeSegment.s - addedLength) / currentLengthData.addedLength, (shapeSegment.e - addedLength) / currentLengthData.addedLength, lengths[j2 - 1]);
              this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
              newShape = false;
              shapePath.c = false;
            }
            addedLength += currentLengthData.addedLength;
            segmentCount += 1;
          }
        }
        if (shapePaths[i2].c && lengths.length) {
          currentLengthData = lengths[j2 - 1];
          if (addedLength <= shapeSegment.e) {
            var segmentLength = lengths[j2 - 1].addedLength;
            if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
              this.addSegment(shapePaths[i2].v[j2 - 1], shapePaths[i2].o[j2 - 1], shapePaths[i2].i[0], shapePaths[i2].v[0], shapePath, segmentCount, newShape);
              newShape = false;
            } else {
              segment = bez.getNewSegment(shapePaths[i2].v[j2 - 1], shapePaths[i2].v[0], shapePaths[i2].o[j2 - 1], shapePaths[i2].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j2 - 1]);
              this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
              newShape = false;
              shapePath.c = false;
            }
          } else {
            shapePath.c = false;
          }
          addedLength += currentLengthData.addedLength;
          segmentCount += 1;
        }
        if (shapePath._length) {
          shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], "i", initPos);
          shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1], "o", shapePath._length - 1);
        }
        if (addedLength > shapeSegment.e) {
          break;
        }
        if (i2 < len - 1) {
          shapePath = shapePool.newElement();
          newShape = true;
          shapes.push(shapePath);
          segmentCount = 0;
        }
      }
      return shapes;
    };
    function PuckerAndBloatModifier() {
    }
    extendPrototype([ShapeModifier], PuckerAndBloatModifier);
    PuckerAndBloatModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.amount = PropertyFactory.getProp(elem2, data2.a, 0, null, this);
      this._isAnimated = !!this.amount.effectsSequence.length;
    };
    PuckerAndBloatModifier.prototype.processPath = function(path, amount) {
      var percent = amount / 100;
      var centerPoint = [0, 0];
      var pathLength = path._length;
      var i2 = 0;
      for (i2 = 0; i2 < pathLength; i2 += 1) {
        centerPoint[0] += path.v[i2][0];
        centerPoint[1] += path.v[i2][1];
      }
      centerPoint[0] /= pathLength;
      centerPoint[1] /= pathLength;
      var clonedPath = shapePool.newElement();
      clonedPath.c = path.c;
      var vX;
      var vY;
      var oX;
      var oY;
      var iX;
      var iY;
      for (i2 = 0; i2 < pathLength; i2 += 1) {
        vX = path.v[i2][0] + (centerPoint[0] - path.v[i2][0]) * percent;
        vY = path.v[i2][1] + (centerPoint[1] - path.v[i2][1]) * percent;
        oX = path.o[i2][0] + (centerPoint[0] - path.o[i2][0]) * -percent;
        oY = path.o[i2][1] + (centerPoint[1] - path.o[i2][1]) * -percent;
        iX = path.i[i2][0] + (centerPoint[0] - path.i[i2][0]) * -percent;
        iY = path.i[i2][1] + (centerPoint[1] - path.i[i2][1]) * -percent;
        clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, i2);
      }
      return clonedPath;
    };
    PuckerAndBloatModifier.prototype.processShapes = function(_isFirstFrame) {
      var shapePaths;
      var i2;
      var len = this.shapes.length;
      var j2;
      var jLen;
      var amount = this.amount.v;
      if (amount !== 0) {
        var shapeData;
        var localShapeCollection;
        for (i2 = 0; i2 < len; i2 += 1) {
          shapeData = this.shapes[i2];
          localShapeCollection = shapeData.localShapeCollection;
          if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
            localShapeCollection.releaseShapes();
            shapeData.shape._mdf = true;
            shapePaths = shapeData.shape.paths.shapes;
            jLen = shapeData.shape.paths._length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              localShapeCollection.addShape(this.processPath(shapePaths[j2], amount));
            }
          }
          shapeData.shape.paths = shapeData.localShapeCollection;
        }
      }
      if (!this.dynamicProperties.length) {
        this._mdf = false;
      }
    };
    var TransformPropertyFactory = function() {
      var defaultVector = [0, 0];
      function applyToMatrix(mat) {
        var _mdf = this._mdf;
        this.iterateDynamicProperties();
        this._mdf = this._mdf || _mdf;
        if (this.a) {
          mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
        }
        if (this.s) {
          mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
        }
        if (this.sk) {
          mat.skewFromAxis(-this.sk.v, this.sa.v);
        }
        if (this.r) {
          mat.rotate(-this.r.v);
        } else {
          mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
        }
        if (this.data.p.s) {
          if (this.data.p.z) {
            mat.translate(this.px.v, this.py.v, -this.pz.v);
          } else {
            mat.translate(this.px.v, this.py.v, 0);
          }
        } else {
          mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
        }
      }
      function processKeys(forceRender) {
        if (this.elem.globalData.frameId === this.frameId) {
          return;
        }
        if (this._isDirty) {
          this.precalculateMatrix();
          this._isDirty = false;
        }
        this.iterateDynamicProperties();
        if (this._mdf || forceRender) {
          var frameRate;
          this.v.cloneFromProps(this.pre.props);
          if (this.appliedTransformations < 1) {
            this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
          }
          if (this.appliedTransformations < 2) {
            this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
          }
          if (this.sk && this.appliedTransformations < 3) {
            this.v.skewFromAxis(-this.sk.v, this.sa.v);
          }
          if (this.r && this.appliedTransformations < 4) {
            this.v.rotate(-this.r.v);
          } else if (!this.r && this.appliedTransformations < 4) {
            this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
          }
          if (this.autoOriented) {
            var v1;
            var v2;
            frameRate = this.elem.globalData.frameRate;
            if (this.p && this.p.keyframes && this.p.getValueAtTime) {
              if (this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t) {
                v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate, 0);
                v2 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);
              } else if (this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
                v1 = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / frameRate, 0);
                v2 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.05) / frameRate, 0);
              } else {
                v1 = this.p.pv;
                v2 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);
              }
            } else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
              v1 = [];
              v2 = [];
              var px2 = this.px;
              var py = this.py;
              if (px2._caching.lastFrame + px2.offsetTime <= px2.keyframes[0].t) {
                v1[0] = px2.getValueAtTime((px2.keyframes[0].t + 0.01) / frameRate, 0);
                v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate, 0);
                v2[0] = px2.getValueAtTime(px2.keyframes[0].t / frameRate, 0);
                v2[1] = py.getValueAtTime(py.keyframes[0].t / frameRate, 0);
              } else if (px2._caching.lastFrame + px2.offsetTime >= px2.keyframes[px2.keyframes.length - 1].t) {
                v1[0] = px2.getValueAtTime(px2.keyframes[px2.keyframes.length - 1].t / frameRate, 0);
                v1[1] = py.getValueAtTime(py.keyframes[py.keyframes.length - 1].t / frameRate, 0);
                v2[0] = px2.getValueAtTime((px2.keyframes[px2.keyframes.length - 1].t - 0.01) / frameRate, 0);
                v2[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate, 0);
              } else {
                v1 = [px2.pv, py.pv];
                v2[0] = px2.getValueAtTime((px2._caching.lastFrame + px2.offsetTime - 0.01) / frameRate, px2.offsetTime);
                v2[1] = py.getValueAtTime((py._caching.lastFrame + py.offsetTime - 0.01) / frameRate, py.offsetTime);
              }
            } else {
              v2 = defaultVector;
              v1 = v2;
            }
            this.v.rotate(-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]));
          }
          if (this.data.p && this.data.p.s) {
            if (this.data.p.z) {
              this.v.translate(this.px.v, this.py.v, -this.pz.v);
            } else {
              this.v.translate(this.px.v, this.py.v, 0);
            }
          } else {
            this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
          }
        }
        this.frameId = this.elem.globalData.frameId;
      }
      function precalculateMatrix() {
        this.appliedTransformations = 0;
        this.pre.reset();
        if (!this.a.effectsSequence.length) {
          this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
          this.appliedTransformations = 1;
        } else {
          return;
        }
        if (!this.s.effectsSequence.length) {
          this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
          this.appliedTransformations = 2;
        } else {
          return;
        }
        if (this.sk) {
          if (!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {
            this.pre.skewFromAxis(-this.sk.v, this.sa.v);
            this.appliedTransformations = 3;
          } else {
            return;
          }
        }
        if (this.r) {
          if (!this.r.effectsSequence.length) {
            this.pre.rotate(-this.r.v);
            this.appliedTransformations = 4;
          }
        } else if (!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {
          this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
          this.appliedTransformations = 4;
        }
      }
      function autoOrient() {
      }
      function addDynamicProperty(prop) {
        this._addDynamicProperty(prop);
        this.elem.addDynamicProperty(prop);
        this._isDirty = true;
      }
      function TransformProperty(elem2, data2, container2) {
        this.elem = elem2;
        this.frameId = -1;
        this.propType = "transform";
        this.data = data2;
        this.v = new Matrix();
        this.pre = new Matrix();
        this.appliedTransformations = 0;
        this.initDynamicPropertyContainer(container2 || elem2);
        if (data2.p && data2.p.s) {
          this.px = PropertyFactory.getProp(elem2, data2.p.x, 0, 0, this);
          this.py = PropertyFactory.getProp(elem2, data2.p.y, 0, 0, this);
          if (data2.p.z) {
            this.pz = PropertyFactory.getProp(elem2, data2.p.z, 0, 0, this);
          }
        } else {
          this.p = PropertyFactory.getProp(elem2, data2.p || {
            k: [0, 0, 0]
          }, 1, 0, this);
        }
        if (data2.rx) {
          this.rx = PropertyFactory.getProp(elem2, data2.rx, 0, degToRads, this);
          this.ry = PropertyFactory.getProp(elem2, data2.ry, 0, degToRads, this);
          this.rz = PropertyFactory.getProp(elem2, data2.rz, 0, degToRads, this);
          if (data2.or.k[0].ti) {
            var i2;
            var len = data2.or.k.length;
            for (i2 = 0; i2 < len; i2 += 1) {
              data2.or.k[i2].to = null;
              data2.or.k[i2].ti = null;
            }
          }
          this.or = PropertyFactory.getProp(elem2, data2.or, 1, degToRads, this);
          this.or.sh = true;
        } else {
          this.r = PropertyFactory.getProp(elem2, data2.r || {
            k: 0
          }, 0, degToRads, this);
        }
        if (data2.sk) {
          this.sk = PropertyFactory.getProp(elem2, data2.sk, 0, degToRads, this);
          this.sa = PropertyFactory.getProp(elem2, data2.sa, 0, degToRads, this);
        }
        this.a = PropertyFactory.getProp(elem2, data2.a || {
          k: [0, 0, 0]
        }, 1, 0, this);
        this.s = PropertyFactory.getProp(elem2, data2.s || {
          k: [100, 100, 100]
        }, 1, 0.01, this);
        if (data2.o) {
          this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, elem2);
        } else {
          this.o = {
            _mdf: false,
            v: 1
          };
        }
        this._isDirty = true;
        if (!this.dynamicProperties.length) {
          this.getValue(true);
        }
      }
      TransformProperty.prototype = {
        applyToMatrix,
        getValue: processKeys,
        precalculateMatrix,
        autoOrient
      };
      extendPrototype([DynamicPropertyContainer], TransformProperty);
      TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
      TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;
      function getTransformProperty(elem2, data2, container2) {
        return new TransformProperty(elem2, data2, container2);
      }
      return {
        getTransformProperty
      };
    }();
    function RepeaterModifier() {
    }
    extendPrototype([ShapeModifier], RepeaterModifier);
    RepeaterModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.c = PropertyFactory.getProp(elem2, data2.c, 0, null, this);
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, null, this);
      this.tr = TransformPropertyFactory.getTransformProperty(elem2, data2.tr, this);
      this.so = PropertyFactory.getProp(elem2, data2.tr.so, 0, 0.01, this);
      this.eo = PropertyFactory.getProp(elem2, data2.tr.eo, 0, 0.01, this);
      this.data = data2;
      if (!this.dynamicProperties.length) {
        this.getValue(true);
      }
      this._isAnimated = !!this.dynamicProperties.length;
      this.pMatrix = new Matrix();
      this.rMatrix = new Matrix();
      this.sMatrix = new Matrix();
      this.tMatrix = new Matrix();
      this.matrix = new Matrix();
    };
    RepeaterModifier.prototype.applyTransforms = function(pMatrix, rMatrix, sMatrix, transform2, perc, inv) {
      var dir = inv ? -1 : 1;
      var scaleX = transform2.s.v[0] + (1 - transform2.s.v[0]) * (1 - perc);
      var scaleY = transform2.s.v[1] + (1 - transform2.s.v[1]) * (1 - perc);
      pMatrix.translate(transform2.p.v[0] * dir * perc, transform2.p.v[1] * dir * perc, transform2.p.v[2]);
      rMatrix.translate(-transform2.a.v[0], -transform2.a.v[1], transform2.a.v[2]);
      rMatrix.rotate(-transform2.r.v * dir * perc);
      rMatrix.translate(transform2.a.v[0], transform2.a.v[1], transform2.a.v[2]);
      sMatrix.translate(-transform2.a.v[0], -transform2.a.v[1], transform2.a.v[2]);
      sMatrix.scale(inv ? 1 / scaleX : scaleX, inv ? 1 / scaleY : scaleY);
      sMatrix.translate(transform2.a.v[0], transform2.a.v[1], transform2.a.v[2]);
    };
    RepeaterModifier.prototype.init = function(elem2, arr, pos, elemsData) {
      this.elem = elem2;
      this.arr = arr;
      this.pos = pos;
      this.elemsData = elemsData;
      this._currentCopies = 0;
      this._elements = [];
      this._groups = [];
      this.frameId = -1;
      this.initDynamicPropertyContainer(elem2);
      this.initModifierProperties(elem2, arr[pos]);
      while (pos > 0) {
        pos -= 1;
        this._elements.unshift(arr[pos]);
      }
      if (this.dynamicProperties.length) {
        this.k = true;
      } else {
        this.getValue(true);
      }
    };
    RepeaterModifier.prototype.resetElements = function(elements) {
      var i2;
      var len = elements.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        elements[i2]._processed = false;
        if (elements[i2].ty === "gr") {
          this.resetElements(elements[i2].it);
        }
      }
    };
    RepeaterModifier.prototype.cloneElements = function(elements) {
      var newElements = JSON.parse(JSON.stringify(elements));
      this.resetElements(newElements);
      return newElements;
    };
    RepeaterModifier.prototype.changeGroupRender = function(elements, renderFlag) {
      var i2;
      var len = elements.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        elements[i2]._render = renderFlag;
        if (elements[i2].ty === "gr") {
          this.changeGroupRender(elements[i2].it, renderFlag);
        }
      }
    };
    RepeaterModifier.prototype.processShapes = function(_isFirstFrame) {
      var items;
      var itemsTransform;
      var i2;
      var dir;
      var cont;
      var hasReloaded = false;
      if (this._mdf || _isFirstFrame) {
        var copies = Math.ceil(this.c.v);
        if (this._groups.length < copies) {
          while (this._groups.length < copies) {
            var group = {
              it: this.cloneElements(this._elements),
              ty: "gr"
            };
            group.it.push({
              a: {
                a: 0,
                ix: 1,
                k: [0, 0]
              },
              nm: "Transform",
              o: {
                a: 0,
                ix: 7,
                k: 100
              },
              p: {
                a: 0,
                ix: 2,
                k: [0, 0]
              },
              r: {
                a: 1,
                ix: 6,
                k: [{
                  s: 0,
                  e: 0,
                  t: 0
                }, {
                  s: 0,
                  e: 0,
                  t: 1
                }]
              },
              s: {
                a: 0,
                ix: 3,
                k: [100, 100]
              },
              sa: {
                a: 0,
                ix: 5,
                k: 0
              },
              sk: {
                a: 0,
                ix: 4,
                k: 0
              },
              ty: "tr"
            });
            this.arr.splice(0, 0, group);
            this._groups.splice(0, 0, group);
            this._currentCopies += 1;
          }
          this.elem.reloadShapes();
          hasReloaded = true;
        }
        cont = 0;
        var renderFlag;
        for (i2 = 0; i2 <= this._groups.length - 1; i2 += 1) {
          renderFlag = cont < copies;
          this._groups[i2]._render = renderFlag;
          this.changeGroupRender(this._groups[i2].it, renderFlag);
          if (!renderFlag) {
            var elems = this.elemsData[i2].it;
            var transformData = elems[elems.length - 1];
            if (transformData.transform.op.v !== 0) {
              transformData.transform.op._mdf = true;
              transformData.transform.op.v = 0;
            } else {
              transformData.transform.op._mdf = false;
            }
          }
          cont += 1;
        }
        this._currentCopies = copies;
        var offset = this.o.v;
        var offsetModulo = offset % 1;
        var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
        var pProps = this.pMatrix.props;
        var rProps = this.rMatrix.props;
        var sProps = this.sMatrix.props;
        this.pMatrix.reset();
        this.rMatrix.reset();
        this.sMatrix.reset();
        this.tMatrix.reset();
        this.matrix.reset();
        var iteration = 0;
        if (offset > 0) {
          while (iteration < roundOffset) {
            this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
            iteration += 1;
          }
          if (offsetModulo) {
            this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
            iteration += offsetModulo;
          }
        } else if (offset < 0) {
          while (iteration > roundOffset) {
            this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
            iteration -= 1;
          }
          if (offsetModulo) {
            this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -offsetModulo, true);
            iteration -= offsetModulo;
          }
        }
        i2 = this.data.m === 1 ? 0 : this._currentCopies - 1;
        dir = this.data.m === 1 ? 1 : -1;
        cont = this._currentCopies;
        var j2;
        var jLen;
        while (cont) {
          items = this.elemsData[i2].it;
          itemsTransform = items[items.length - 1].transform.mProps.v.props;
          jLen = itemsTransform.length;
          items[items.length - 1].transform.mProps._mdf = true;
          items[items.length - 1].transform.op._mdf = true;
          items[items.length - 1].transform.op.v = this._currentCopies === 1 ? this.so.v : this.so.v + (this.eo.v - this.so.v) * (i2 / (this._currentCopies - 1));
          if (iteration !== 0) {
            if (i2 !== 0 && dir === 1 || i2 !== this._currentCopies - 1 && dir === -1) {
              this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
            }
            this.matrix.transform(rProps[0], rProps[1], rProps[2], rProps[3], rProps[4], rProps[5], rProps[6], rProps[7], rProps[8], rProps[9], rProps[10], rProps[11], rProps[12], rProps[13], rProps[14], rProps[15]);
            this.matrix.transform(sProps[0], sProps[1], sProps[2], sProps[3], sProps[4], sProps[5], sProps[6], sProps[7], sProps[8], sProps[9], sProps[10], sProps[11], sProps[12], sProps[13], sProps[14], sProps[15]);
            this.matrix.transform(pProps[0], pProps[1], pProps[2], pProps[3], pProps[4], pProps[5], pProps[6], pProps[7], pProps[8], pProps[9], pProps[10], pProps[11], pProps[12], pProps[13], pProps[14], pProps[15]);
            for (j2 = 0; j2 < jLen; j2 += 1) {
              itemsTransform[j2] = this.matrix.props[j2];
            }
            this.matrix.reset();
          } else {
            this.matrix.reset();
            for (j2 = 0; j2 < jLen; j2 += 1) {
              itemsTransform[j2] = this.matrix.props[j2];
            }
          }
          iteration += 1;
          cont -= 1;
          i2 += dir;
        }
      } else {
        cont = this._currentCopies;
        i2 = 0;
        dir = 1;
        while (cont) {
          items = this.elemsData[i2].it;
          itemsTransform = items[items.length - 1].transform.mProps.v.props;
          items[items.length - 1].transform.mProps._mdf = false;
          items[items.length - 1].transform.op._mdf = false;
          cont -= 1;
          i2 += dir;
        }
      }
      return hasReloaded;
    };
    RepeaterModifier.prototype.addShape = function() {
    };
    function RoundCornersModifier() {
    }
    extendPrototype([ShapeModifier], RoundCornersModifier);
    RoundCornersModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.rd = PropertyFactory.getProp(elem2, data2.r, 0, null, this);
      this._isAnimated = !!this.rd.effectsSequence.length;
    };
    RoundCornersModifier.prototype.processPath = function(path, round2) {
      var clonedPath = shapePool.newElement();
      clonedPath.c = path.c;
      var i2;
      var len = path._length;
      var currentV;
      var currentI;
      var currentO;
      var closerV;
      var distance;
      var newPosPerc;
      var index2 = 0;
      var vX;
      var vY;
      var oX;
      var oY;
      var iX;
      var iY;
      for (i2 = 0; i2 < len; i2 += 1) {
        currentV = path.v[i2];
        currentO = path.o[i2];
        currentI = path.i[i2];
        if (currentV[0] === currentO[0] && currentV[1] === currentO[1] && currentV[0] === currentI[0] && currentV[1] === currentI[1]) {
          if ((i2 === 0 || i2 === len - 1) && !path.c) {
            clonedPath.setTripleAt(currentV[0], currentV[1], currentO[0], currentO[1], currentI[0], currentI[1], index2);
            index2 += 1;
          } else {
            if (i2 === 0) {
              closerV = path.v[len - 1];
            } else {
              closerV = path.v[i2 - 1];
            }
            distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
            newPosPerc = distance ? Math.min(distance / 2, round2) / distance : 0;
            iX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
            vX = iX;
            iY = currentV[1] - (currentV[1] - closerV[1]) * newPosPerc;
            vY = iY;
            oX = vX - (vX - currentV[0]) * roundCorner;
            oY = vY - (vY - currentV[1]) * roundCorner;
            clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
            index2 += 1;
            if (i2 === len - 1) {
              closerV = path.v[0];
            } else {
              closerV = path.v[i2 + 1];
            }
            distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
            newPosPerc = distance ? Math.min(distance / 2, round2) / distance : 0;
            oX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
            vX = oX;
            oY = currentV[1] + (closerV[1] - currentV[1]) * newPosPerc;
            vY = oY;
            iX = vX - (vX - currentV[0]) * roundCorner;
            iY = vY - (vY - currentV[1]) * roundCorner;
            clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
            index2 += 1;
          }
        } else {
          clonedPath.setTripleAt(path.v[i2][0], path.v[i2][1], path.o[i2][0], path.o[i2][1], path.i[i2][0], path.i[i2][1], index2);
          index2 += 1;
        }
      }
      return clonedPath;
    };
    RoundCornersModifier.prototype.processShapes = function(_isFirstFrame) {
      var shapePaths;
      var i2;
      var len = this.shapes.length;
      var j2;
      var jLen;
      var rd = this.rd.v;
      if (rd !== 0) {
        var shapeData;
        var localShapeCollection;
        for (i2 = 0; i2 < len; i2 += 1) {
          shapeData = this.shapes[i2];
          localShapeCollection = shapeData.localShapeCollection;
          if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
            localShapeCollection.releaseShapes();
            shapeData.shape._mdf = true;
            shapePaths = shapeData.shape.paths.shapes;
            jLen = shapeData.shape.paths._length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              localShapeCollection.addShape(this.processPath(shapePaths[j2], rd));
            }
          }
          shapeData.shape.paths = shapeData.localShapeCollection;
        }
      }
      if (!this.dynamicProperties.length) {
        this._mdf = false;
      }
    };
    function floatEqual(a, b) {
      return Math.abs(a - b) * 1e5 <= Math.min(Math.abs(a), Math.abs(b));
    }
    function floatZero(f) {
      return Math.abs(f) <= 1e-5;
    }
    function lerp(p0, p1, amount) {
      return p0 * (1 - amount) + p1 * amount;
    }
    function lerpPoint(p0, p1, amount) {
      return [lerp(p0[0], p1[0], amount), lerp(p0[1], p1[1], amount)];
    }
    function quadRoots(a, b, c) {
      if (a === 0) return [];
      var s = b * b - 4 * a * c;
      if (s < 0) return [];
      var singleRoot = -b / (2 * a);
      if (s === 0) return [singleRoot];
      var delta = Math.sqrt(s) / (2 * a);
      return [singleRoot - delta, singleRoot + delta];
    }
    function polynomialCoefficients(p0, p1, p2, p3) {
      return [-p0 + 3 * p1 - 3 * p2 + p3, 3 * p0 - 6 * p1 + 3 * p2, -3 * p0 + 3 * p1, p0];
    }
    function singlePoint(p) {
      return new PolynomialBezier(p, p, p, p, false);
    }
    function PolynomialBezier(p0, p1, p2, p3, linearize) {
      if (linearize && pointEqual(p0, p1)) {
        p1 = lerpPoint(p0, p3, 1 / 3);
      }
      if (linearize && pointEqual(p2, p3)) {
        p2 = lerpPoint(p0, p3, 2 / 3);
      }
      var coeffx = polynomialCoefficients(p0[0], p1[0], p2[0], p3[0]);
      var coeffy = polynomialCoefficients(p0[1], p1[1], p2[1], p3[1]);
      this.a = [coeffx[0], coeffy[0]];
      this.b = [coeffx[1], coeffy[1]];
      this.c = [coeffx[2], coeffy[2]];
      this.d = [coeffx[3], coeffy[3]];
      this.points = [p0, p1, p2, p3];
    }
    PolynomialBezier.prototype.point = function(t) {
      return [((this.a[0] * t + this.b[0]) * t + this.c[0]) * t + this.d[0], ((this.a[1] * t + this.b[1]) * t + this.c[1]) * t + this.d[1]];
    };
    PolynomialBezier.prototype.derivative = function(t) {
      return [(3 * t * this.a[0] + 2 * this.b[0]) * t + this.c[0], (3 * t * this.a[1] + 2 * this.b[1]) * t + this.c[1]];
    };
    PolynomialBezier.prototype.tangentAngle = function(t) {
      var p = this.derivative(t);
      return Math.atan2(p[1], p[0]);
    };
    PolynomialBezier.prototype.normalAngle = function(t) {
      var p = this.derivative(t);
      return Math.atan2(p[0], p[1]);
    };
    PolynomialBezier.prototype.inflectionPoints = function() {
      var denom = this.a[1] * this.b[0] - this.a[0] * this.b[1];
      if (floatZero(denom)) return [];
      var tcusp = -0.5 * (this.a[1] * this.c[0] - this.a[0] * this.c[1]) / denom;
      var square = tcusp * tcusp - 1 / 3 * (this.b[1] * this.c[0] - this.b[0] * this.c[1]) / denom;
      if (square < 0) return [];
      var root = Math.sqrt(square);
      if (floatZero(root)) {
        if (root > 0 && root < 1) return [tcusp];
        return [];
      }
      return [tcusp - root, tcusp + root].filter(function(r) {
        return r > 0 && r < 1;
      });
    };
    PolynomialBezier.prototype.split = function(t) {
      if (t <= 0) return [singlePoint(this.points[0]), this];
      if (t >= 1) return [this, singlePoint(this.points[this.points.length - 1])];
      var p10 = lerpPoint(this.points[0], this.points[1], t);
      var p11 = lerpPoint(this.points[1], this.points[2], t);
      var p12 = lerpPoint(this.points[2], this.points[3], t);
      var p20 = lerpPoint(p10, p11, t);
      var p21 = lerpPoint(p11, p12, t);
      var p3 = lerpPoint(p20, p21, t);
      return [new PolynomialBezier(this.points[0], p10, p20, p3, true), new PolynomialBezier(p3, p21, p12, this.points[3], true)];
    };
    function extrema(bez2, comp2) {
      var min2 = bez2.points[0][comp2];
      var max2 = bez2.points[bez2.points.length - 1][comp2];
      if (min2 > max2) {
        var e = max2;
        max2 = min2;
        min2 = e;
      }
      var f = quadRoots(3 * bez2.a[comp2], 2 * bez2.b[comp2], bez2.c[comp2]);
      for (var i2 = 0; i2 < f.length; i2 += 1) {
        if (f[i2] > 0 && f[i2] < 1) {
          var val2 = bez2.point(f[i2])[comp2];
          if (val2 < min2) min2 = val2;
          else if (val2 > max2) max2 = val2;
        }
      }
      return {
        min: min2,
        max: max2
      };
    }
    PolynomialBezier.prototype.bounds = function() {
      return {
        x: extrema(this, 0),
        y: extrema(this, 1)
      };
    };
    PolynomialBezier.prototype.boundingBox = function() {
      var bounds = this.bounds();
      return {
        left: bounds.x.min,
        right: bounds.x.max,
        top: bounds.y.min,
        bottom: bounds.y.max,
        width: bounds.x.max - bounds.x.min,
        height: bounds.y.max - bounds.y.min,
        cx: (bounds.x.max + bounds.x.min) / 2,
        cy: (bounds.y.max + bounds.y.min) / 2
      };
    };
    function intersectData(bez2, t1, t2) {
      var box = bez2.boundingBox();
      return {
        cx: box.cx,
        cy: box.cy,
        width: box.width,
        height: box.height,
        bez: bez2,
        t: (t1 + t2) / 2,
        t1,
        t2
      };
    }
    function splitData(data2) {
      var split = data2.bez.split(0.5);
      return [intersectData(split[0], data2.t1, data2.t), intersectData(split[1], data2.t, data2.t2)];
    }
    function boxIntersect(b1, b2) {
      return Math.abs(b1.cx - b2.cx) * 2 < b1.width + b2.width && Math.abs(b1.cy - b2.cy) * 2 < b1.height + b2.height;
    }
    function intersectsImpl(d1, d2, depth, tolerance, intersections, maxRecursion) {
      if (!boxIntersect(d1, d2)) return;
      if (depth >= maxRecursion || d1.width <= tolerance && d1.height <= tolerance && d2.width <= tolerance && d2.height <= tolerance) {
        intersections.push([d1.t, d2.t]);
        return;
      }
      var d1s = splitData(d1);
      var d2s = splitData(d2);
      intersectsImpl(d1s[0], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
      intersectsImpl(d1s[0], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
      intersectsImpl(d1s[1], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
      intersectsImpl(d1s[1], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
    }
    PolynomialBezier.prototype.intersections = function(other, tolerance, maxRecursion) {
      if (tolerance === void 0) tolerance = 2;
      if (maxRecursion === void 0) maxRecursion = 7;
      var intersections = [];
      intersectsImpl(intersectData(this, 0, 1), intersectData(other, 0, 1), 0, tolerance, intersections, maxRecursion);
      return intersections;
    };
    PolynomialBezier.shapeSegment = function(shapePath, index2) {
      var nextIndex = (index2 + 1) % shapePath.length();
      return new PolynomialBezier(shapePath.v[index2], shapePath.o[index2], shapePath.i[nextIndex], shapePath.v[nextIndex], true);
    };
    PolynomialBezier.shapeSegmentInverted = function(shapePath, index2) {
      var nextIndex = (index2 + 1) % shapePath.length();
      return new PolynomialBezier(shapePath.v[nextIndex], shapePath.i[nextIndex], shapePath.o[index2], shapePath.v[index2], true);
    };
    function crossProduct(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    }
    function lineIntersection(start1, end1, start2, end2) {
      var v1 = [start1[0], start1[1], 1];
      var v2 = [end1[0], end1[1], 1];
      var v3 = [start2[0], start2[1], 1];
      var v4 = [end2[0], end2[1], 1];
      var r = crossProduct(crossProduct(v1, v2), crossProduct(v3, v4));
      if (floatZero(r[2])) return null;
      return [r[0] / r[2], r[1] / r[2]];
    }
    function polarOffset(p, angle, length2) {
      return [p[0] + Math.cos(angle) * length2, p[1] - Math.sin(angle) * length2];
    }
    function pointDistance(p1, p2) {
      return Math.hypot(p1[0] - p2[0], p1[1] - p2[1]);
    }
    function pointEqual(p1, p2) {
      return floatEqual(p1[0], p2[0]) && floatEqual(p1[1], p2[1]);
    }
    function ZigZagModifier() {
    }
    extendPrototype([ShapeModifier], ZigZagModifier);
    ZigZagModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.amplitude = PropertyFactory.getProp(elem2, data2.s, 0, null, this);
      this.frequency = PropertyFactory.getProp(elem2, data2.r, 0, null, this);
      this.pointsType = PropertyFactory.getProp(elem2, data2.pt, 0, null, this);
      this._isAnimated = this.amplitude.effectsSequence.length !== 0 || this.frequency.effectsSequence.length !== 0 || this.pointsType.effectsSequence.length !== 0;
    };
    function setPoint(outputBezier, point, angle, direction, amplitude, outAmplitude, inAmplitude) {
      var angO = angle - Math.PI / 2;
      var angI = angle + Math.PI / 2;
      var px2 = point[0] + Math.cos(angle) * direction * amplitude;
      var py = point[1] - Math.sin(angle) * direction * amplitude;
      outputBezier.setTripleAt(px2, py, px2 + Math.cos(angO) * outAmplitude, py - Math.sin(angO) * outAmplitude, px2 + Math.cos(angI) * inAmplitude, py - Math.sin(angI) * inAmplitude, outputBezier.length());
    }
    function getPerpendicularVector(pt1, pt2) {
      var vector = [pt2[0] - pt1[0], pt2[1] - pt1[1]];
      var rot = -Math.PI * 0.5;
      var rotatedVector = [Math.cos(rot) * vector[0] - Math.sin(rot) * vector[1], Math.sin(rot) * vector[0] + Math.cos(rot) * vector[1]];
      return rotatedVector;
    }
    function getProjectingAngle(path, cur) {
      var prevIndex = cur === 0 ? path.length() - 1 : cur - 1;
      var nextIndex = (cur + 1) % path.length();
      var prevPoint = path.v[prevIndex];
      var nextPoint = path.v[nextIndex];
      var pVector = getPerpendicularVector(prevPoint, nextPoint);
      return Math.atan2(0, 1) - Math.atan2(pVector[1], pVector[0]);
    }
    function zigZagCorner(outputBezier, path, cur, amplitude, frequency, pointType, direction) {
      var angle = getProjectingAngle(path, cur);
      var point = path.v[cur % path._length];
      var prevPoint = path.v[cur === 0 ? path._length - 1 : cur - 1];
      var nextPoint = path.v[(cur + 1) % path._length];
      var prevDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - prevPoint[0], 2) + Math.pow(point[1] - prevPoint[1], 2)) : 0;
      var nextDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - nextPoint[0], 2) + Math.pow(point[1] - nextPoint[1], 2)) : 0;
      setPoint(outputBezier, path.v[cur % path._length], angle, direction, amplitude, nextDist / ((frequency + 1) * 2), prevDist / ((frequency + 1) * 2));
    }
    function zigZagSegment(outputBezier, segment, amplitude, frequency, pointType, direction) {
      for (var i2 = 0; i2 < frequency; i2 += 1) {
        var t = (i2 + 1) / (frequency + 1);
        var dist2 = pointType === 2 ? Math.sqrt(Math.pow(segment.points[3][0] - segment.points[0][0], 2) + Math.pow(segment.points[3][1] - segment.points[0][1], 2)) : 0;
        var angle = segment.normalAngle(t);
        var point = segment.point(t);
        setPoint(outputBezier, point, angle, direction, amplitude, dist2 / ((frequency + 1) * 2), dist2 / ((frequency + 1) * 2));
        direction = -direction;
      }
      return direction;
    }
    ZigZagModifier.prototype.processPath = function(path, amplitude, frequency, pointType) {
      var count = path._length;
      var clonedPath = shapePool.newElement();
      clonedPath.c = path.c;
      if (!path.c) {
        count -= 1;
      }
      if (count === 0) return clonedPath;
      var direction = -1;
      var segment = PolynomialBezier.shapeSegment(path, 0);
      zigZagCorner(clonedPath, path, 0, amplitude, frequency, pointType, direction);
      for (var i2 = 0; i2 < count; i2 += 1) {
        direction = zigZagSegment(clonedPath, segment, amplitude, frequency, pointType, -direction);
        if (i2 === count - 1 && !path.c) {
          segment = null;
        } else {
          segment = PolynomialBezier.shapeSegment(path, (i2 + 1) % count);
        }
        zigZagCorner(clonedPath, path, i2 + 1, amplitude, frequency, pointType, direction);
      }
      return clonedPath;
    };
    ZigZagModifier.prototype.processShapes = function(_isFirstFrame) {
      var shapePaths;
      var i2;
      var len = this.shapes.length;
      var j2;
      var jLen;
      var amplitude = this.amplitude.v;
      var frequency = Math.max(0, Math.round(this.frequency.v));
      var pointType = this.pointsType.v;
      if (amplitude !== 0) {
        var shapeData;
        var localShapeCollection;
        for (i2 = 0; i2 < len; i2 += 1) {
          shapeData = this.shapes[i2];
          localShapeCollection = shapeData.localShapeCollection;
          if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
            localShapeCollection.releaseShapes();
            shapeData.shape._mdf = true;
            shapePaths = shapeData.shape.paths.shapes;
            jLen = shapeData.shape.paths._length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              localShapeCollection.addShape(this.processPath(shapePaths[j2], amplitude, frequency, pointType));
            }
          }
          shapeData.shape.paths = shapeData.localShapeCollection;
        }
      }
      if (!this.dynamicProperties.length) {
        this._mdf = false;
      }
    };
    function linearOffset(p1, p2, amount) {
      var angle = Math.atan2(p2[0] - p1[0], p2[1] - p1[1]);
      return [polarOffset(p1, angle, amount), polarOffset(p2, angle, amount)];
    }
    function offsetSegment(segment, amount) {
      var p0;
      var p1a;
      var p1b;
      var p2b;
      var p2a;
      var p3;
      var e;
      e = linearOffset(segment.points[0], segment.points[1], amount);
      p0 = e[0];
      p1a = e[1];
      e = linearOffset(segment.points[1], segment.points[2], amount);
      p1b = e[0];
      p2b = e[1];
      e = linearOffset(segment.points[2], segment.points[3], amount);
      p2a = e[0];
      p3 = e[1];
      var p1 = lineIntersection(p0, p1a, p1b, p2b);
      if (p1 === null) p1 = p1a;
      var p2 = lineIntersection(p2a, p3, p1b, p2b);
      if (p2 === null) p2 = p2a;
      return new PolynomialBezier(p0, p1, p2, p3);
    }
    function joinLines(outputBezier, seg1, seg2, lineJoin, miterLimit) {
      var p0 = seg1.points[3];
      var p1 = seg2.points[0];
      if (lineJoin === 3) return p0;
      if (pointEqual(p0, p1)) return p0;
      if (lineJoin === 2) {
        var angleOut = -seg1.tangentAngle(1);
        var angleIn = -seg2.tangentAngle(0) + Math.PI;
        var center = lineIntersection(p0, polarOffset(p0, angleOut + Math.PI / 2, 100), p1, polarOffset(p1, angleOut + Math.PI / 2, 100));
        var radius = center ? pointDistance(center, p0) : pointDistance(p0, p1) / 2;
        var tan = polarOffset(p0, angleOut, 2 * radius * roundCorner);
        outputBezier.setXYAt(tan[0], tan[1], "o", outputBezier.length() - 1);
        tan = polarOffset(p1, angleIn, 2 * radius * roundCorner);
        outputBezier.setTripleAt(p1[0], p1[1], p1[0], p1[1], tan[0], tan[1], outputBezier.length());
        return p1;
      }
      var t0 = pointEqual(p0, seg1.points[2]) ? seg1.points[0] : seg1.points[2];
      var t1 = pointEqual(p1, seg2.points[1]) ? seg2.points[3] : seg2.points[1];
      var intersection = lineIntersection(t0, p0, p1, t1);
      if (intersection && pointDistance(intersection, p0) < miterLimit) {
        outputBezier.setTripleAt(intersection[0], intersection[1], intersection[0], intersection[1], intersection[0], intersection[1], outputBezier.length());
        return intersection;
      }
      return p0;
    }
    function getIntersection(a, b) {
      var intersect = a.intersections(b);
      if (intersect.length && floatEqual(intersect[0][0], 1)) intersect.shift();
      if (intersect.length) return intersect[0];
      return null;
    }
    function pruneSegmentIntersection(a, b) {
      var outa = a.slice();
      var outb = b.slice();
      var intersect = getIntersection(a[a.length - 1], b[0]);
      if (intersect) {
        outa[a.length - 1] = a[a.length - 1].split(intersect[0])[0];
        outb[0] = b[0].split(intersect[1])[1];
      }
      if (a.length > 1 && b.length > 1) {
        intersect = getIntersection(a[0], b[b.length - 1]);
        if (intersect) {
          return [[a[0].split(intersect[0])[0]], [b[b.length - 1].split(intersect[1])[1]]];
        }
      }
      return [outa, outb];
    }
    function pruneIntersections(segments) {
      var e;
      for (var i2 = 1; i2 < segments.length; i2 += 1) {
        e = pruneSegmentIntersection(segments[i2 - 1], segments[i2]);
        segments[i2 - 1] = e[0];
        segments[i2] = e[1];
      }
      if (segments.length > 1) {
        e = pruneSegmentIntersection(segments[segments.length - 1], segments[0]);
        segments[segments.length - 1] = e[0];
        segments[0] = e[1];
      }
      return segments;
    }
    function offsetSegmentSplit(segment, amount) {
      var flex = segment.inflectionPoints();
      var left;
      var right;
      var split;
      var mid;
      if (flex.length === 0) {
        return [offsetSegment(segment, amount)];
      }
      if (flex.length === 1 || floatEqual(flex[1], 1)) {
        split = segment.split(flex[0]);
        left = split[0];
        right = split[1];
        return [offsetSegment(left, amount), offsetSegment(right, amount)];
      }
      split = segment.split(flex[0]);
      left = split[0];
      var t = (flex[1] - flex[0]) / (1 - flex[0]);
      split = split[1].split(t);
      mid = split[0];
      right = split[1];
      return [offsetSegment(left, amount), offsetSegment(mid, amount), offsetSegment(right, amount)];
    }
    function OffsetPathModifier() {
    }
    extendPrototype([ShapeModifier], OffsetPathModifier);
    OffsetPathModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.amount = PropertyFactory.getProp(elem2, data2.a, 0, null, this);
      this.miterLimit = PropertyFactory.getProp(elem2, data2.ml, 0, null, this);
      this.lineJoin = data2.lj;
      this._isAnimated = this.amount.effectsSequence.length !== 0;
    };
    OffsetPathModifier.prototype.processPath = function(inputBezier, amount, lineJoin, miterLimit) {
      var outputBezier = shapePool.newElement();
      outputBezier.c = inputBezier.c;
      var count = inputBezier.length();
      if (!inputBezier.c) {
        count -= 1;
      }
      var i2;
      var j2;
      var segment;
      var multiSegments = [];
      for (i2 = 0; i2 < count; i2 += 1) {
        segment = PolynomialBezier.shapeSegment(inputBezier, i2);
        multiSegments.push(offsetSegmentSplit(segment, amount));
      }
      if (!inputBezier.c) {
        for (i2 = count - 1; i2 >= 0; i2 -= 1) {
          segment = PolynomialBezier.shapeSegmentInverted(inputBezier, i2);
          multiSegments.push(offsetSegmentSplit(segment, amount));
        }
      }
      multiSegments = pruneIntersections(multiSegments);
      var lastPoint = null;
      var lastSeg = null;
      for (i2 = 0; i2 < multiSegments.length; i2 += 1) {
        var multiSegment = multiSegments[i2];
        if (lastSeg) lastPoint = joinLines(outputBezier, lastSeg, multiSegment[0], lineJoin, miterLimit);
        lastSeg = multiSegment[multiSegment.length - 1];
        for (j2 = 0; j2 < multiSegment.length; j2 += 1) {
          segment = multiSegment[j2];
          if (lastPoint && pointEqual(segment.points[0], lastPoint)) {
            outputBezier.setXYAt(segment.points[1][0], segment.points[1][1], "o", outputBezier.length() - 1);
          } else {
            outputBezier.setTripleAt(segment.points[0][0], segment.points[0][1], segment.points[1][0], segment.points[1][1], segment.points[0][0], segment.points[0][1], outputBezier.length());
          }
          outputBezier.setTripleAt(segment.points[3][0], segment.points[3][1], segment.points[3][0], segment.points[3][1], segment.points[2][0], segment.points[2][1], outputBezier.length());
          lastPoint = segment.points[3];
        }
      }
      if (multiSegments.length) joinLines(outputBezier, lastSeg, multiSegments[0][0], lineJoin, miterLimit);
      return outputBezier;
    };
    OffsetPathModifier.prototype.processShapes = function(_isFirstFrame) {
      var shapePaths;
      var i2;
      var len = this.shapes.length;
      var j2;
      var jLen;
      var amount = this.amount.v;
      var miterLimit = this.miterLimit.v;
      var lineJoin = this.lineJoin;
      if (amount !== 0) {
        var shapeData;
        var localShapeCollection;
        for (i2 = 0; i2 < len; i2 += 1) {
          shapeData = this.shapes[i2];
          localShapeCollection = shapeData.localShapeCollection;
          if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
            localShapeCollection.releaseShapes();
            shapeData.shape._mdf = true;
            shapePaths = shapeData.shape.paths.shapes;
            jLen = shapeData.shape.paths._length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              localShapeCollection.addShape(this.processPath(shapePaths[j2], amount, lineJoin, miterLimit));
            }
          }
          shapeData.shape.paths = shapeData.localShapeCollection;
        }
      }
      if (!this.dynamicProperties.length) {
        this._mdf = false;
      }
    };
    function getFontProperties(fontData) {
      var styles2 = fontData.fStyle ? fontData.fStyle.split(" ") : [];
      var fWeight = "normal";
      var fStyle = "normal";
      var len = styles2.length;
      var styleName;
      for (var i2 = 0; i2 < len; i2 += 1) {
        styleName = styles2[i2].toLowerCase();
        switch (styleName) {
          case "italic":
            fStyle = "italic";
            break;
          case "bold":
            fWeight = "700";
            break;
          case "black":
            fWeight = "900";
            break;
          case "medium":
            fWeight = "500";
            break;
          case "regular":
          case "normal":
            fWeight = "400";
            break;
          case "light":
          case "thin":
            fWeight = "200";
            break;
        }
      }
      return {
        style: fStyle,
        weight: fontData.fWeight || fWeight
      };
    }
    var FontManager = function() {
      var maxWaitingTime = 5e3;
      var emptyChar = {
        w: 0,
        size: 0,
        shapes: [],
        data: {
          shapes: []
        }
      };
      var combinedCharacters = [];
      combinedCharacters = combinedCharacters.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);
      var BLACK_FLAG_CODE_POINT = 127988;
      var CANCEL_TAG_CODE_POINT = 917631;
      var A_TAG_CODE_POINT = 917601;
      var Z_TAG_CODE_POINT = 917626;
      var VARIATION_SELECTOR_16_CODE_POINT = 65039;
      var ZERO_WIDTH_JOINER_CODE_POINT = 8205;
      var REGIONAL_CHARACTER_A_CODE_POINT = 127462;
      var REGIONAL_CHARACTER_Z_CODE_POINT = 127487;
      var surrogateModifiers = ["d83cdffb", "d83cdffc", "d83cdffd", "d83cdffe", "d83cdfff"];
      function trimFontOptions(font) {
        var familyArray = font.split(",");
        var i2;
        var len = familyArray.length;
        var enabledFamilies = [];
        for (i2 = 0; i2 < len; i2 += 1) {
          if (familyArray[i2] !== "sans-serif" && familyArray[i2] !== "monospace") {
            enabledFamilies.push(familyArray[i2]);
          }
        }
        return enabledFamilies.join(",");
      }
      function setUpNode(font, family) {
        var parentNode = createTag("span");
        parentNode.setAttribute("aria-hidden", true);
        parentNode.style.fontFamily = family;
        var node = createTag("span");
        node.innerText = "giItT1WQy@!-/#";
        parentNode.style.position = "absolute";
        parentNode.style.left = "-10000px";
        parentNode.style.top = "-10000px";
        parentNode.style.fontSize = "300px";
        parentNode.style.fontVariant = "normal";
        parentNode.style.fontStyle = "normal";
        parentNode.style.fontWeight = "normal";
        parentNode.style.letterSpacing = "0";
        parentNode.appendChild(node);
        document.body.appendChild(parentNode);
        var width2 = node.offsetWidth;
        node.style.fontFamily = trimFontOptions(font) + ", " + family;
        return {
          node,
          w: width2,
          parent: parentNode
        };
      }
      function checkLoadedFonts() {
        var i2;
        var len = this.fonts.length;
        var node;
        var w;
        var loadedCount = len;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (this.fonts[i2].loaded) {
            loadedCount -= 1;
          } else if (this.fonts[i2].fOrigin === "n" || this.fonts[i2].origin === 0) {
            this.fonts[i2].loaded = true;
          } else {
            node = this.fonts[i2].monoCase.node;
            w = this.fonts[i2].monoCase.w;
            if (node.offsetWidth !== w) {
              loadedCount -= 1;
              this.fonts[i2].loaded = true;
            } else {
              node = this.fonts[i2].sansCase.node;
              w = this.fonts[i2].sansCase.w;
              if (node.offsetWidth !== w) {
                loadedCount -= 1;
                this.fonts[i2].loaded = true;
              }
            }
            if (this.fonts[i2].loaded) {
              this.fonts[i2].sansCase.parent.parentNode.removeChild(this.fonts[i2].sansCase.parent);
              this.fonts[i2].monoCase.parent.parentNode.removeChild(this.fonts[i2].monoCase.parent);
            }
          }
        }
        if (loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime) {
          setTimeout(this.checkLoadedFontsBinded, 20);
        } else {
          setTimeout(this.setIsLoadedBinded, 10);
        }
      }
      function createHelper(fontData, def2) {
        var engine = document.body && def2 ? "svg" : "canvas";
        var helper;
        var fontProps = getFontProperties(fontData);
        if (engine === "svg") {
          var tHelper = createNS("text");
          tHelper.style.fontSize = "100px";
          tHelper.setAttribute("font-family", fontData.fFamily);
          tHelper.setAttribute("font-style", fontProps.style);
          tHelper.setAttribute("font-weight", fontProps.weight);
          tHelper.textContent = "1";
          if (fontData.fClass) {
            tHelper.style.fontFamily = "inherit";
            tHelper.setAttribute("class", fontData.fClass);
          } else {
            tHelper.style.fontFamily = fontData.fFamily;
          }
          def2.appendChild(tHelper);
          helper = tHelper;
        } else {
          var tCanvasHelper = new OffscreenCanvas(500, 500).getContext("2d");
          tCanvasHelper.font = fontProps.style + " " + fontProps.weight + " 100px " + fontData.fFamily;
          helper = tCanvasHelper;
        }
        function measure(text2) {
          if (engine === "svg") {
            helper.textContent = text2;
            return helper.getComputedTextLength();
          }
          return helper.measureText(text2).width;
        }
        return {
          measureText: measure
        };
      }
      function addFonts(fontData, defs) {
        if (!fontData) {
          this.isLoaded = true;
          return;
        }
        if (this.chars) {
          this.isLoaded = true;
          this.fonts = fontData.list;
          return;
        }
        if (!document.body) {
          this.isLoaded = true;
          fontData.list.forEach(function(data2) {
            data2.helper = createHelper(data2);
            data2.cache = {};
          });
          this.fonts = fontData.list;
          return;
        }
        var fontArr = fontData.list;
        var i2;
        var len = fontArr.length;
        var _pendingFonts = len;
        for (i2 = 0; i2 < len; i2 += 1) {
          var shouldLoadFont = true;
          var loadedSelector;
          var j2;
          fontArr[i2].loaded = false;
          fontArr[i2].monoCase = setUpNode(fontArr[i2].fFamily, "monospace");
          fontArr[i2].sansCase = setUpNode(fontArr[i2].fFamily, "sans-serif");
          if (!fontArr[i2].fPath) {
            fontArr[i2].loaded = true;
            _pendingFonts -= 1;
          } else if (fontArr[i2].fOrigin === "p" || fontArr[i2].origin === 3) {
            loadedSelector = document.querySelectorAll('style[f-forigin="p"][f-family="' + fontArr[i2].fFamily + '"], style[f-origin="3"][f-family="' + fontArr[i2].fFamily + '"]');
            if (loadedSelector.length > 0) {
              shouldLoadFont = false;
            }
            if (shouldLoadFont) {
              var s = createTag("style");
              s.setAttribute("f-forigin", fontArr[i2].fOrigin);
              s.setAttribute("f-origin", fontArr[i2].origin);
              s.setAttribute("f-family", fontArr[i2].fFamily);
              s.type = "text/css";
              s.innerText = "@font-face {font-family: " + fontArr[i2].fFamily + "; font-style: normal; src: url('" + fontArr[i2].fPath + "');}";
              defs.appendChild(s);
            }
          } else if (fontArr[i2].fOrigin === "g" || fontArr[i2].origin === 1) {
            loadedSelector = document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');
            for (j2 = 0; j2 < loadedSelector.length; j2 += 1) {
              if (loadedSelector[j2].href.indexOf(fontArr[i2].fPath) !== -1) {
                shouldLoadFont = false;
              }
            }
            if (shouldLoadFont) {
              var l = createTag("link");
              l.setAttribute("f-forigin", fontArr[i2].fOrigin);
              l.setAttribute("f-origin", fontArr[i2].origin);
              l.type = "text/css";
              l.rel = "stylesheet";
              l.href = fontArr[i2].fPath;
              document.body.appendChild(l);
            }
          } else if (fontArr[i2].fOrigin === "t" || fontArr[i2].origin === 2) {
            loadedSelector = document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');
            for (j2 = 0; j2 < loadedSelector.length; j2 += 1) {
              if (fontArr[i2].fPath === loadedSelector[j2].src) {
                shouldLoadFont = false;
              }
            }
            if (shouldLoadFont) {
              var sc = createTag("link");
              sc.setAttribute("f-forigin", fontArr[i2].fOrigin);
              sc.setAttribute("f-origin", fontArr[i2].origin);
              sc.setAttribute("rel", "stylesheet");
              sc.setAttribute("href", fontArr[i2].fPath);
              defs.appendChild(sc);
            }
          }
          fontArr[i2].helper = createHelper(fontArr[i2], defs);
          fontArr[i2].cache = {};
          this.fonts.push(fontArr[i2]);
        }
        if (_pendingFonts === 0) {
          this.isLoaded = true;
        } else {
          setTimeout(this.checkLoadedFonts.bind(this), 100);
        }
      }
      function addChars(chars) {
        if (!chars) {
          return;
        }
        if (!this.chars) {
          this.chars = [];
        }
        var i2;
        var len = chars.length;
        var j2;
        var jLen = this.chars.length;
        var found;
        for (i2 = 0; i2 < len; i2 += 1) {
          j2 = 0;
          found = false;
          while (j2 < jLen) {
            if (this.chars[j2].style === chars[i2].style && this.chars[j2].fFamily === chars[i2].fFamily && this.chars[j2].ch === chars[i2].ch) {
              found = true;
            }
            j2 += 1;
          }
          if (!found) {
            this.chars.push(chars[i2]);
            jLen += 1;
          }
        }
      }
      function getCharData(_char, style, font) {
        var i2 = 0;
        var len = this.chars.length;
        while (i2 < len) {
          if (this.chars[i2].ch === _char && this.chars[i2].style === style && this.chars[i2].fFamily === font) {
            return this.chars[i2];
          }
          i2 += 1;
        }
        if ((typeof _char === "string" && _char.charCodeAt(0) !== 13 || !_char) && console && console.warn && !this._warned) {
          this._warned = true;
          console.warn("Missing character from exported characters list: ", _char, style, font);
        }
        return emptyChar;
      }
      function measureText(_char2, fontName, size) {
        var fontData = this.getFontByName(fontName);
        var index2 = _char2;
        if (!fontData.cache[index2]) {
          var tHelper = fontData.helper;
          if (_char2 === " ") {
            var doubleSize = tHelper.measureText("|" + _char2 + "|");
            var singleSize = tHelper.measureText("||");
            fontData.cache[index2] = (doubleSize - singleSize) / 100;
          } else {
            fontData.cache[index2] = tHelper.measureText(_char2) / 100;
          }
        }
        return fontData.cache[index2] * size;
      }
      function getFontByName(name2) {
        var i2 = 0;
        var len = this.fonts.length;
        while (i2 < len) {
          if (this.fonts[i2].fName === name2) {
            return this.fonts[i2];
          }
          i2 += 1;
        }
        return this.fonts[0];
      }
      function getCodePoint(string) {
        var codePoint = 0;
        var first = string.charCodeAt(0);
        if (first >= 55296 && first <= 56319) {
          var second = string.charCodeAt(1);
          if (second >= 56320 && second <= 57343) {
            codePoint = (first - 55296) * 1024 + second - 56320 + 65536;
          }
        }
        return codePoint;
      }
      function isModifier(firstCharCode, secondCharCode) {
        var sum2 = firstCharCode.toString(16) + secondCharCode.toString(16);
        return surrogateModifiers.indexOf(sum2) !== -1;
      }
      function isZeroWidthJoiner(charCode) {
        return charCode === ZERO_WIDTH_JOINER_CODE_POINT;
      }
      function isVariationSelector(charCode) {
        return charCode === VARIATION_SELECTOR_16_CODE_POINT;
      }
      function isRegionalCode(string) {
        var codePoint = getCodePoint(string);
        if (codePoint >= REGIONAL_CHARACTER_A_CODE_POINT && codePoint <= REGIONAL_CHARACTER_Z_CODE_POINT) {
          return true;
        }
        return false;
      }
      function isFlagEmoji(string) {
        return isRegionalCode(string.substr(0, 2)) && isRegionalCode(string.substr(2, 2));
      }
      function isCombinedCharacter(_char3) {
        return combinedCharacters.indexOf(_char3) !== -1;
      }
      function isRegionalFlag(text2, index2) {
        var codePoint = getCodePoint(text2.substr(index2, 2));
        if (codePoint !== BLACK_FLAG_CODE_POINT) {
          return false;
        }
        var count = 0;
        index2 += 2;
        while (count < 5) {
          codePoint = getCodePoint(text2.substr(index2, 2));
          if (codePoint < A_TAG_CODE_POINT || codePoint > Z_TAG_CODE_POINT) {
            return false;
          }
          count += 1;
          index2 += 2;
        }
        return getCodePoint(text2.substr(index2, 2)) === CANCEL_TAG_CODE_POINT;
      }
      function setIsLoaded() {
        this.isLoaded = true;
      }
      var Font = function Font2() {
        this.fonts = [];
        this.chars = null;
        this.typekitLoaded = 0;
        this.isLoaded = false;
        this._warned = false;
        this.initTime = Date.now();
        this.setIsLoadedBinded = this.setIsLoaded.bind(this);
        this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);
      };
      Font.isModifier = isModifier;
      Font.isZeroWidthJoiner = isZeroWidthJoiner;
      Font.isFlagEmoji = isFlagEmoji;
      Font.isRegionalCode = isRegionalCode;
      Font.isCombinedCharacter = isCombinedCharacter;
      Font.isRegionalFlag = isRegionalFlag;
      Font.isVariationSelector = isVariationSelector;
      Font.BLACK_FLAG_CODE_POINT = BLACK_FLAG_CODE_POINT;
      var fontPrototype = {
        addChars,
        addFonts,
        getCharData,
        getFontByName,
        measureText,
        checkLoadedFonts,
        setIsLoaded
      };
      Font.prototype = fontPrototype;
      return Font;
    }();
    function SlotManager(animationData) {
      this.animationData = animationData;
    }
    SlotManager.prototype.getProp = function(data2) {
      if (this.animationData.slots && this.animationData.slots[data2.sid]) {
        return Object.assign(data2, this.animationData.slots[data2.sid].p);
      }
      return data2;
    };
    function slotFactory(animationData) {
      return new SlotManager(animationData);
    }
    function RenderableElement() {
    }
    RenderableElement.prototype = {
      initRenderable: function initRenderable() {
        this.isInRange = false;
        this.hidden = false;
        this.isTransparent = false;
        this.renderableComponents = [];
      },
      addRenderableComponent: function addRenderableComponent(component) {
        if (this.renderableComponents.indexOf(component) === -1) {
          this.renderableComponents.push(component);
        }
      },
      removeRenderableComponent: function removeRenderableComponent(component) {
        if (this.renderableComponents.indexOf(component) !== -1) {
          this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);
        }
      },
      prepareRenderableFrame: function prepareRenderableFrame(num) {
        this.checkLayerLimits(num);
      },
      checkTransparency: function checkTransparency() {
        if (this.finalTransform.mProp.o.v <= 0) {
          if (!this.isTransparent && this.globalData.renderConfig.hideOnTransparent) {
            this.isTransparent = true;
            this.hide();
          }
        } else if (this.isTransparent) {
          this.isTransparent = false;
          this.show();
        }
      },
      /**
         * @function
         * Initializes frame related properties.
         *
         * @param {number} num
         * current frame number in Layer's time
         *
         */
      checkLayerLimits: function checkLayerLimits(num) {
        if (this.data.ip - this.data.st <= num && this.data.op - this.data.st > num) {
          if (this.isInRange !== true) {
            this.globalData._mdf = true;
            this._mdf = true;
            this.isInRange = true;
            this.show();
          }
        } else if (this.isInRange !== false) {
          this.globalData._mdf = true;
          this.isInRange = false;
          this.hide();
        }
      },
      renderRenderable: function renderRenderable() {
        var i2;
        var len = this.renderableComponents.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.renderableComponents[i2].renderFrame(this._isFirstFrame);
        }
      },
      sourceRectAtTime: function sourceRectAtTime2() {
        return {
          top: 0,
          left: 0,
          width: 100,
          height: 100
        };
      },
      getLayerSize: function getLayerSize() {
        if (this.data.ty === 5) {
          return {
            w: this.data.textData.width,
            h: this.data.textData.height
          };
        }
        return {
          w: this.data.width,
          h: this.data.height
        };
      }
    };
    var getBlendMode = /* @__PURE__ */ function() {
      var blendModeEnums = {
        0: "source-over",
        1: "multiply",
        2: "screen",
        3: "overlay",
        4: "darken",
        5: "lighten",
        6: "color-dodge",
        7: "color-burn",
        8: "hard-light",
        9: "soft-light",
        10: "difference",
        11: "exclusion",
        12: "hue",
        13: "saturation",
        14: "color",
        15: "luminosity"
      };
      return function(mode) {
        return blendModeEnums[mode] || "";
      };
    }();
    function SliderEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container2);
    }
    function AngleEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container2);
    }
    function ColorEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 1, 0, container2);
    }
    function PointEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 1, 0, container2);
    }
    function LayerIndexEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container2);
    }
    function MaskIndexEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container2);
    }
    function CheckboxEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container2);
    }
    function NoValueEffect() {
      this.p = {};
    }
    function EffectsManager(data2, element) {
      var effects = data2.ef || [];
      this.effectElements = [];
      var i2;
      var len = effects.length;
      var effectItem;
      for (i2 = 0; i2 < len; i2 += 1) {
        effectItem = new GroupEffect(effects[i2], element);
        this.effectElements.push(effectItem);
      }
    }
    function GroupEffect(data2, element) {
      this.init(data2, element);
    }
    extendPrototype([DynamicPropertyContainer], GroupEffect);
    GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties;
    GroupEffect.prototype.init = function(data2, element) {
      this.data = data2;
      this.effectElements = [];
      this.initDynamicPropertyContainer(element);
      var i2;
      var len = this.data.ef.length;
      var eff;
      var effects = this.data.ef;
      for (i2 = 0; i2 < len; i2 += 1) {
        eff = null;
        switch (effects[i2].ty) {
          case 0:
            eff = new SliderEffect(effects[i2], element, this);
            break;
          case 1:
            eff = new AngleEffect(effects[i2], element, this);
            break;
          case 2:
            eff = new ColorEffect(effects[i2], element, this);
            break;
          case 3:
            eff = new PointEffect(effects[i2], element, this);
            break;
          case 4:
          case 7:
            eff = new CheckboxEffect(effects[i2], element, this);
            break;
          case 10:
            eff = new LayerIndexEffect(effects[i2], element, this);
            break;
          case 11:
            eff = new MaskIndexEffect(effects[i2], element, this);
            break;
          case 5:
            eff = new EffectsManager(effects[i2], element);
            break;
          default:
            eff = new NoValueEffect(effects[i2]);
            break;
        }
        if (eff) {
          this.effectElements.push(eff);
        }
      }
    };
    function BaseElement() {
    }
    BaseElement.prototype = {
      checkMasks: function checkMasks() {
        if (!this.data.hasMask) {
          return false;
        }
        var i2 = 0;
        var len = this.data.masksProperties.length;
        while (i2 < len) {
          if (this.data.masksProperties[i2].mode !== "n" && this.data.masksProperties[i2].cl !== false) {
            return true;
          }
          i2 += 1;
        }
        return false;
      },
      initExpressions: function initExpressions() {
        var expressionsInterfaces2 = getExpressionInterfaces();
        if (!expressionsInterfaces2) {
          return;
        }
        var LayerExpressionInterface2 = expressionsInterfaces2("layer");
        var EffectsExpressionInterface2 = expressionsInterfaces2("effects");
        var ShapeExpressionInterface2 = expressionsInterfaces2("shape");
        var TextExpressionInterface2 = expressionsInterfaces2("text");
        var CompExpressionInterface2 = expressionsInterfaces2("comp");
        this.layerInterface = LayerExpressionInterface2(this);
        if (this.data.hasMask && this.maskManager) {
          this.layerInterface.registerMaskInterface(this.maskManager);
        }
        var effectsInterface = EffectsExpressionInterface2.createEffectsInterface(this, this.layerInterface);
        this.layerInterface.registerEffectsInterface(effectsInterface);
        if (this.data.ty === 0 || this.data.xt) {
          this.compInterface = CompExpressionInterface2(this);
        } else if (this.data.ty === 4) {
          this.layerInterface.shapeInterface = ShapeExpressionInterface2(this.shapesData, this.itemsData, this.layerInterface);
          this.layerInterface.content = this.layerInterface.shapeInterface;
        } else if (this.data.ty === 5) {
          this.layerInterface.textInterface = TextExpressionInterface2(this);
          this.layerInterface.text = this.layerInterface.textInterface;
        }
      },
      setBlendMode: function setBlendMode() {
        var blendModeValue = getBlendMode(this.data.bm);
        var elem2 = this.baseElement || this.layerElement;
        elem2.style["mix-blend-mode"] = blendModeValue;
      },
      initBaseData: function initBaseData(data2, globalData2, comp2) {
        this.globalData = globalData2;
        this.comp = comp2;
        this.data = data2;
        this.layerId = createElementID();
        if (!this.data.sr) {
          this.data.sr = 1;
        }
        this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);
      },
      getType: function getType() {
        return this.type;
      },
      sourceRectAtTime: function sourceRectAtTime2() {
      }
    };
    function FrameElement() {
    }
    FrameElement.prototype = {
      /**
         * @function
         * Initializes frame related properties.
         *
         */
      initFrame: function initFrame2() {
        this._isFirstFrame = false;
        this.dynamicProperties = [];
        this._mdf = false;
      },
      /**
         * @function
         * Calculates all dynamic values
         *
         * @param {number} num
         * current frame number in Layer's time
         * @param {boolean} isVisible
         * if layers is currently in range
         *
         */
      prepareProperties: function prepareProperties(num, isVisible) {
        var i2;
        var len = this.dynamicProperties.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (isVisible || this._isParent && this.dynamicProperties[i2].propType === "transform") {
            this.dynamicProperties[i2].getValue();
            if (this.dynamicProperties[i2]._mdf) {
              this.globalData._mdf = true;
              this._mdf = true;
            }
          }
        }
      },
      addDynamicProperty: function addDynamicProperty(prop) {
        if (this.dynamicProperties.indexOf(prop) === -1) {
          this.dynamicProperties.push(prop);
        }
      }
    };
    function FootageElement(data2, globalData2, comp2) {
      this.initFrame();
      this.initRenderable();
      this.assetData = globalData2.getAssetData(data2.refId);
      this.footageData = globalData2.imageLoader.getAsset(this.assetData);
      this.initBaseData(data2, globalData2, comp2);
    }
    FootageElement.prototype.prepareFrame = function() {
    };
    extendPrototype([RenderableElement, BaseElement, FrameElement], FootageElement);
    FootageElement.prototype.getBaseElement = function() {
      return null;
    };
    FootageElement.prototype.renderFrame = function() {
    };
    FootageElement.prototype.destroy = function() {
    };
    FootageElement.prototype.initExpressions = function() {
      var expressionsInterfaces2 = getExpressionInterfaces();
      if (!expressionsInterfaces2) {
        return;
      }
      var FootageInterface2 = expressionsInterfaces2("footage");
      this.layerInterface = FootageInterface2(this);
    };
    FootageElement.prototype.getFootageData = function() {
      return this.footageData;
    };
    function AudioElement(data2, globalData2, comp2) {
      this.initFrame();
      this.initRenderable();
      this.assetData = globalData2.getAssetData(data2.refId);
      this.initBaseData(data2, globalData2, comp2);
      this._isPlaying = false;
      this._canPlay = false;
      var assetPath = this.globalData.getAssetsPath(this.assetData);
      this.audio = this.globalData.audioController.createAudio(assetPath);
      this._currentTime = 0;
      this.globalData.audioController.addAudio(this);
      this._volumeMultiplier = 1;
      this._volume = 1;
      this._previousVolume = null;
      this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
        _placeholder: true
      };
      this.lv = PropertyFactory.getProp(this, data2.au && data2.au.lv ? data2.au.lv : {
        k: [100]
      }, 1, 0.01, this);
    }
    AudioElement.prototype.prepareFrame = function(num) {
      this.prepareRenderableFrame(num, true);
      this.prepareProperties(num, true);
      if (!this.tm._placeholder) {
        var timeRemapped = this.tm.v;
        this._currentTime = timeRemapped;
      } else {
        this._currentTime = num / this.data.sr;
      }
      this._volume = this.lv.v[0];
      var totalVolume = this._volume * this._volumeMultiplier;
      if (this._previousVolume !== totalVolume) {
        this._previousVolume = totalVolume;
        this.audio.volume(totalVolume);
      }
    };
    extendPrototype([RenderableElement, BaseElement, FrameElement], AudioElement);
    AudioElement.prototype.renderFrame = function() {
      if (this.isInRange && this._canPlay) {
        if (!this._isPlaying) {
          this.audio.play();
          this.audio.seek(this._currentTime / this.globalData.frameRate);
          this._isPlaying = true;
        } else if (!this.audio.playing() || Math.abs(this._currentTime / this.globalData.frameRate - this.audio.seek()) > 0.1) {
          this.audio.seek(this._currentTime / this.globalData.frameRate);
        }
      }
    };
    AudioElement.prototype.show = function() {
    };
    AudioElement.prototype.hide = function() {
      this.audio.pause();
      this._isPlaying = false;
    };
    AudioElement.prototype.pause = function() {
      this.audio.pause();
      this._isPlaying = false;
      this._canPlay = false;
    };
    AudioElement.prototype.resume = function() {
      this._canPlay = true;
    };
    AudioElement.prototype.setRate = function(rateValue) {
      this.audio.rate(rateValue);
    };
    AudioElement.prototype.volume = function(volumeValue) {
      this._volumeMultiplier = volumeValue;
      this._previousVolume = volumeValue * this._volume;
      this.audio.volume(this._previousVolume);
    };
    AudioElement.prototype.getBaseElement = function() {
      return null;
    };
    AudioElement.prototype.destroy = function() {
    };
    AudioElement.prototype.sourceRectAtTime = function() {
    };
    AudioElement.prototype.initExpressions = function() {
    };
    function BaseRenderer() {
    }
    BaseRenderer.prototype.checkLayers = function(num) {
      var i2;
      var len = this.layers.length;
      var data2;
      this.completeLayers = true;
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (!this.elements[i2]) {
          data2 = this.layers[i2];
          if (data2.ip - data2.st <= num - this.layers[i2].st && data2.op - data2.st > num - this.layers[i2].st) {
            this.buildItem(i2);
          }
        }
        this.completeLayers = this.elements[i2] ? this.completeLayers : false;
      }
      this.checkPendingElements();
    };
    BaseRenderer.prototype.createItem = function(layer) {
      switch (layer.ty) {
        case 2:
          return this.createImage(layer);
        case 0:
          return this.createComp(layer);
        case 1:
          return this.createSolid(layer);
        case 3:
          return this.createNull(layer);
        case 4:
          return this.createShape(layer);
        case 5:
          return this.createText(layer);
        case 6:
          return this.createAudio(layer);
        case 13:
          return this.createCamera(layer);
        case 15:
          return this.createFootage(layer);
        default:
          return this.createNull(layer);
      }
    };
    BaseRenderer.prototype.createCamera = function() {
      throw new Error("You're using a 3d camera. Try the html renderer.");
    };
    BaseRenderer.prototype.createAudio = function(data2) {
      return new AudioElement(data2, this.globalData, this);
    };
    BaseRenderer.prototype.createFootage = function(data2) {
      return new FootageElement(data2, this.globalData, this);
    };
    BaseRenderer.prototype.buildAllItems = function() {
      var i2;
      var len = this.layers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.buildItem(i2);
      }
      this.checkPendingElements();
    };
    BaseRenderer.prototype.includeLayers = function(newLayers) {
      this.completeLayers = false;
      var i2;
      var len = newLayers.length;
      var j2;
      var jLen = this.layers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        j2 = 0;
        while (j2 < jLen) {
          if (this.layers[j2].id === newLayers[i2].id) {
            this.layers[j2] = newLayers[i2];
            break;
          }
          j2 += 1;
        }
      }
    };
    BaseRenderer.prototype.setProjectInterface = function(pInterface) {
      this.globalData.projectInterface = pInterface;
    };
    BaseRenderer.prototype.initItems = function() {
      if (!this.globalData.progressiveLoad) {
        this.buildAllItems();
      }
    };
    BaseRenderer.prototype.buildElementParenting = function(element, parentName, hierarchy) {
      var elements = this.elements;
      var layers = this.layers;
      var i2 = 0;
      var len = layers.length;
      while (i2 < len) {
        if (layers[i2].ind == parentName) {
          if (!elements[i2] || elements[i2] === true) {
            this.buildItem(i2);
            this.addPendingElement(element);
          } else {
            hierarchy.push(elements[i2]);
            elements[i2].setAsParent();
            if (layers[i2].parent !== void 0) {
              this.buildElementParenting(element, layers[i2].parent, hierarchy);
            } else {
              element.setHierarchy(hierarchy);
            }
          }
        }
        i2 += 1;
      }
    };
    BaseRenderer.prototype.addPendingElement = function(element) {
      this.pendingElements.push(element);
    };
    BaseRenderer.prototype.searchExtraCompositions = function(assets) {
      var i2;
      var len = assets.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (assets[i2].xt) {
          var comp2 = this.createComp(assets[i2]);
          comp2.initExpressions();
          this.globalData.projectInterface.registerComposition(comp2);
        }
      }
    };
    BaseRenderer.prototype.getElementById = function(ind) {
      var i2;
      var len = this.elements.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.elements[i2].data.ind === ind) {
          return this.elements[i2];
        }
      }
      return null;
    };
    BaseRenderer.prototype.getElementByPath = function(path) {
      var pathValue = path.shift();
      var element;
      if (typeof pathValue === "number") {
        element = this.elements[pathValue];
      } else {
        var i2;
        var len = this.elements.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (this.elements[i2].data.nm === pathValue) {
            element = this.elements[i2];
            break;
          }
        }
      }
      if (path.length === 0) {
        return element;
      }
      return element.getElementByPath(path);
    };
    BaseRenderer.prototype.setupGlobalData = function(animData, fontsContainer) {
      this.globalData.fontManager = new FontManager();
      this.globalData.slotManager = slotFactory(animData);
      this.globalData.fontManager.addChars(animData.chars);
      this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);
      this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
      this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
      this.globalData.imageLoader = this.animationItem.imagePreloader;
      this.globalData.audioController = this.animationItem.audioController;
      this.globalData.frameId = 0;
      this.globalData.frameRate = animData.fr;
      this.globalData.nm = animData.nm;
      this.globalData.compSize = {
        w: animData.w,
        h: animData.h
      };
    };
    var effectTypes = {
      TRANSFORM_EFFECT: "transformEFfect"
    };
    function TransformElement() {
    }
    TransformElement.prototype = {
      initTransform: function initTransform() {
        var mat = new Matrix();
        this.finalTransform = {
          mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {
            o: 0
          },
          _matMdf: false,
          _localMatMdf: false,
          _opMdf: false,
          mat,
          localMat: mat,
          localOpacity: 1
        };
        if (this.data.ao) {
          this.finalTransform.mProp.autoOriented = true;
        }
        if (this.data.ty !== 11) ;
      },
      renderTransform: function renderTransform() {
        this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
        this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;
        if (this.hierarchy) {
          var mat;
          var finalMat = this.finalTransform.mat;
          var i2 = 0;
          var len = this.hierarchy.length;
          if (!this.finalTransform._matMdf) {
            while (i2 < len) {
              if (this.hierarchy[i2].finalTransform.mProp._mdf) {
                this.finalTransform._matMdf = true;
                break;
              }
              i2 += 1;
            }
          }
          if (this.finalTransform._matMdf) {
            mat = this.finalTransform.mProp.v.props;
            finalMat.cloneFromProps(mat);
            for (i2 = 0; i2 < len; i2 += 1) {
              finalMat.multiply(this.hierarchy[i2].finalTransform.mProp.v);
            }
          }
        }
        if (this.finalTransform._matMdf) {
          this.finalTransform._localMatMdf = this.finalTransform._matMdf;
        }
        if (this.finalTransform._opMdf) {
          this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
        }
      },
      renderLocalTransform: function renderLocalTransform() {
        if (this.localTransforms) {
          var i2 = 0;
          var len = this.localTransforms.length;
          this.finalTransform._localMatMdf = this.finalTransform._matMdf;
          if (!this.finalTransform._localMatMdf || !this.finalTransform._opMdf) {
            while (i2 < len) {
              if (this.localTransforms[i2]._mdf) {
                this.finalTransform._localMatMdf = true;
              }
              if (this.localTransforms[i2]._opMdf && !this.finalTransform._opMdf) {
                this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
                this.finalTransform._opMdf = true;
              }
              i2 += 1;
            }
          }
          if (this.finalTransform._localMatMdf) {
            var localMat = this.finalTransform.localMat;
            this.localTransforms[0].matrix.clone(localMat);
            for (i2 = 1; i2 < len; i2 += 1) {
              var lmat = this.localTransforms[i2].matrix;
              localMat.multiply(lmat);
            }
            localMat.multiply(this.finalTransform.mat);
          }
          if (this.finalTransform._opMdf) {
            var localOp = this.finalTransform.localOpacity;
            for (i2 = 0; i2 < len; i2 += 1) {
              localOp *= this.localTransforms[i2].opacity * 0.01;
            }
            this.finalTransform.localOpacity = localOp;
          }
        }
      },
      searchEffectTransforms: function searchEffectTransforms() {
        if (this.renderableEffectsManager) {
          var transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);
          if (transformEffects.length) {
            this.localTransforms = [];
            this.finalTransform.localMat = new Matrix();
            var i2 = 0;
            var len = transformEffects.length;
            for (i2 = 0; i2 < len; i2 += 1) {
              this.localTransforms.push(transformEffects[i2]);
            }
          }
        }
      },
      globalToLocal: function globalToLocal(pt) {
        var transforms = [];
        transforms.push(this.finalTransform);
        var flag = true;
        var comp2 = this.comp;
        while (flag) {
          if (comp2.finalTransform) {
            if (comp2.data.hasMask) {
              transforms.splice(0, 0, comp2.finalTransform);
            }
            comp2 = comp2.comp;
          } else {
            flag = false;
          }
        }
        var i2;
        var len = transforms.length;
        var ptNew;
        for (i2 = 0; i2 < len; i2 += 1) {
          ptNew = transforms[i2].mat.applyToPointArray(0, 0, 0);
          pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
        }
        return pt;
      },
      mHelper: new Matrix()
    };
    function MaskElement(data2, element, globalData2) {
      this.data = data2;
      this.element = element;
      this.globalData = globalData2;
      this.storedData = [];
      this.masksProperties = this.data.masksProperties || [];
      this.maskElement = null;
      var defs = this.globalData.defs;
      var i2;
      var len = this.masksProperties ? this.masksProperties.length : 0;
      this.viewData = createSizedArray(len);
      this.solidPath = "";
      var path;
      var properties = this.masksProperties;
      var count = 0;
      var currentMasks = [];
      var j2;
      var jLen;
      var layerId = createElementID();
      var rect;
      var expansor;
      var feMorph;
      var x;
      var maskType = "clipPath";
      var maskRef = "clip-path";
      for (i2 = 0; i2 < len; i2 += 1) {
        if (properties[i2].mode !== "a" && properties[i2].mode !== "n" || properties[i2].inv || properties[i2].o.k !== 100 || properties[i2].o.x) {
          maskType = "mask";
          maskRef = "mask";
        }
        if ((properties[i2].mode === "s" || properties[i2].mode === "i") && count === 0) {
          rect = createNS("rect");
          rect.setAttribute("fill", "#ffffff");
          rect.setAttribute("width", this.element.comp.data.w || 0);
          rect.setAttribute("height", this.element.comp.data.h || 0);
          currentMasks.push(rect);
        } else {
          rect = null;
        }
        path = createNS("path");
        if (properties[i2].mode === "n") {
          this.viewData[i2] = {
            op: PropertyFactory.getProp(this.element, properties[i2].o, 0, 0.01, this.element),
            prop: ShapePropertyFactory.getShapeProp(this.element, properties[i2], 3),
            elem: path,
            lastPath: ""
          };
          defs.appendChild(path);
        } else {
          count += 1;
          path.setAttribute("fill", properties[i2].mode === "s" ? "#000000" : "#ffffff");
          path.setAttribute("clip-rule", "nonzero");
          var filterID;
          if (properties[i2].x.k !== 0) {
            maskType = "mask";
            maskRef = "mask";
            x = PropertyFactory.getProp(this.element, properties[i2].x, 0, null, this.element);
            filterID = createElementID();
            expansor = createNS("filter");
            expansor.setAttribute("id", filterID);
            feMorph = createNS("feMorphology");
            feMorph.setAttribute("operator", "erode");
            feMorph.setAttribute("in", "SourceGraphic");
            feMorph.setAttribute("radius", "0");
            expansor.appendChild(feMorph);
            defs.appendChild(expansor);
            path.setAttribute("stroke", properties[i2].mode === "s" ? "#000000" : "#ffffff");
          } else {
            feMorph = null;
            x = null;
          }
          this.storedData[i2] = {
            elem: path,
            x,
            expan: feMorph,
            lastPath: "",
            lastOperator: "",
            filterId: filterID,
            lastRadius: 0
          };
          if (properties[i2].mode === "i") {
            jLen = currentMasks.length;
            var g = createNS("g");
            for (j2 = 0; j2 < jLen; j2 += 1) {
              g.appendChild(currentMasks[j2]);
            }
            var mask2 = createNS("mask");
            mask2.setAttribute("mask-type", "alpha");
            mask2.setAttribute("id", layerId + "_" + count);
            mask2.appendChild(path);
            defs.appendChild(mask2);
            g.setAttribute("mask", "url(" + getLocationHref() + "#" + layerId + "_" + count + ")");
            currentMasks.length = 0;
            currentMasks.push(g);
          } else {
            currentMasks.push(path);
          }
          if (properties[i2].inv && !this.solidPath) {
            this.solidPath = this.createLayerSolidPath();
          }
          this.viewData[i2] = {
            elem: path,
            lastPath: "",
            op: PropertyFactory.getProp(this.element, properties[i2].o, 0, 0.01, this.element),
            prop: ShapePropertyFactory.getShapeProp(this.element, properties[i2], 3),
            invRect: rect
          };
          if (!this.viewData[i2].prop.k) {
            this.drawPath(properties[i2], this.viewData[i2].prop.v, this.viewData[i2]);
          }
        }
      }
      this.maskElement = createNS(maskType);
      len = currentMasks.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.maskElement.appendChild(currentMasks[i2]);
      }
      if (count > 0) {
        this.maskElement.setAttribute("id", layerId);
        this.element.maskedElement.setAttribute(maskRef, "url(" + getLocationHref() + "#" + layerId + ")");
        defs.appendChild(this.maskElement);
      }
      if (this.viewData.length) {
        this.element.addRenderableComponent(this);
      }
    }
    MaskElement.prototype.getMaskProperty = function(pos) {
      return this.viewData[pos].prop;
    };
    MaskElement.prototype.renderFrame = function(isFirstFrame) {
      var finalMat = this.element.finalTransform.mat;
      var i2;
      var len = this.masksProperties.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.viewData[i2].prop._mdf || isFirstFrame) {
          this.drawPath(this.masksProperties[i2], this.viewData[i2].prop.v, this.viewData[i2]);
        }
        if (this.viewData[i2].op._mdf || isFirstFrame) {
          this.viewData[i2].elem.setAttribute("fill-opacity", this.viewData[i2].op.v);
        }
        if (this.masksProperties[i2].mode !== "n") {
          if (this.viewData[i2].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)) {
            this.viewData[i2].invRect.setAttribute("transform", finalMat.getInverseMatrix().to2dCSS());
          }
          if (this.storedData[i2].x && (this.storedData[i2].x._mdf || isFirstFrame)) {
            var feMorph = this.storedData[i2].expan;
            if (this.storedData[i2].x.v < 0) {
              if (this.storedData[i2].lastOperator !== "erode") {
                this.storedData[i2].lastOperator = "erode";
                this.storedData[i2].elem.setAttribute("filter", "url(" + getLocationHref() + "#" + this.storedData[i2].filterId + ")");
              }
              feMorph.setAttribute("radius", -this.storedData[i2].x.v);
            } else {
              if (this.storedData[i2].lastOperator !== "dilate") {
                this.storedData[i2].lastOperator = "dilate";
                this.storedData[i2].elem.setAttribute("filter", null);
              }
              this.storedData[i2].elem.setAttribute("stroke-width", this.storedData[i2].x.v * 2);
            }
          }
        }
      }
    };
    MaskElement.prototype.getMaskelement = function() {
      return this.maskElement;
    };
    MaskElement.prototype.createLayerSolidPath = function() {
      var path = "M0,0 ";
      path += " h" + this.globalData.compSize.w;
      path += " v" + this.globalData.compSize.h;
      path += " h-" + this.globalData.compSize.w;
      path += " v-" + this.globalData.compSize.h + " ";
      return path;
    };
    MaskElement.prototype.drawPath = function(pathData, pathNodes, viewData) {
      var pathString = " M" + pathNodes.v[0][0] + "," + pathNodes.v[0][1];
      var i2;
      var len;
      len = pathNodes._length;
      for (i2 = 1; i2 < len; i2 += 1) {
        pathString += " C" + pathNodes.o[i2 - 1][0] + "," + pathNodes.o[i2 - 1][1] + " " + pathNodes.i[i2][0] + "," + pathNodes.i[i2][1] + " " + pathNodes.v[i2][0] + "," + pathNodes.v[i2][1];
      }
      if (pathNodes.c && len > 1) {
        pathString += " C" + pathNodes.o[i2 - 1][0] + "," + pathNodes.o[i2 - 1][1] + " " + pathNodes.i[0][0] + "," + pathNodes.i[0][1] + " " + pathNodes.v[0][0] + "," + pathNodes.v[0][1];
      }
      if (viewData.lastPath !== pathString) {
        var pathShapeValue = "";
        if (viewData.elem) {
          if (pathNodes.c) {
            pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
          }
          viewData.elem.setAttribute("d", pathShapeValue);
        }
        viewData.lastPath = pathString;
      }
    };
    MaskElement.prototype.destroy = function() {
      this.element = null;
      this.globalData = null;
      this.maskElement = null;
      this.data = null;
      this.masksProperties = null;
    };
    var filtersFactory = function() {
      var ob2 = {};
      ob2.createFilter = createFilter;
      ob2.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;
      function createFilter(filId, skipCoordinates) {
        var fil = createNS("filter");
        fil.setAttribute("id", filId);
        if (skipCoordinates !== true) {
          fil.setAttribute("filterUnits", "objectBoundingBox");
          fil.setAttribute("x", "0%");
          fil.setAttribute("y", "0%");
          fil.setAttribute("width", "100%");
          fil.setAttribute("height", "100%");
        }
        return fil;
      }
      function createAlphaToLuminanceFilter() {
        var feColorMatrix = createNS("feColorMatrix");
        feColorMatrix.setAttribute("type", "matrix");
        feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
        feColorMatrix.setAttribute("values", "0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1");
        return feColorMatrix;
      }
      return ob2;
    }();
    var featureSupport = function() {
      var ob2 = {
        maskType: true,
        svgLumaHidden: true,
        offscreenCanvas: typeof OffscreenCanvas !== "undefined"
      };
      if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
        ob2.maskType = false;
      }
      if (/firefox/i.test(navigator.userAgent)) {
        ob2.svgLumaHidden = false;
      }
      return ob2;
    }();
    var registeredEffects$1 = {};
    var idPrefix = "filter_result_";
    function SVGEffects(elem2) {
      var i2;
      var source = "SourceGraphic";
      var len = elem2.data.ef ? elem2.data.ef.length : 0;
      var filId = createElementID();
      var fil = filtersFactory.createFilter(filId, true);
      var count = 0;
      this.filters = [];
      var filterManager;
      for (i2 = 0; i2 < len; i2 += 1) {
        filterManager = null;
        var type = elem2.data.ef[i2].ty;
        if (registeredEffects$1[type]) {
          var Effect = registeredEffects$1[type].effect;
          filterManager = new Effect(fil, elem2.effectsManager.effectElements[i2], elem2, idPrefix + count, source);
          source = idPrefix + count;
          if (registeredEffects$1[type].countsAsEffect) {
            count += 1;
          }
        }
        if (filterManager) {
          this.filters.push(filterManager);
        }
      }
      if (count) {
        elem2.globalData.defs.appendChild(fil);
        elem2.layerElement.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
      }
      if (this.filters.length) {
        elem2.addRenderableComponent(this);
      }
    }
    SVGEffects.prototype.renderFrame = function(_isFirstFrame) {
      var i2;
      var len = this.filters.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.filters[i2].renderFrame(_isFirstFrame);
      }
    };
    SVGEffects.prototype.getEffects = function(type) {
      var i2;
      var len = this.filters.length;
      var effects = [];
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.filters[i2].type === type) {
          effects.push(this.filters[i2]);
        }
      }
      return effects;
    };
    function registerEffect$1(id2, effect2, countsAsEffect) {
      registeredEffects$1[id2] = {
        effect: effect2,
        countsAsEffect
      };
    }
    function SVGBaseElement() {
    }
    SVGBaseElement.prototype = {
      initRendererElement: function initRendererElement() {
        this.layerElement = createNS("g");
      },
      createContainerElements: function createContainerElements() {
        this.matteElement = createNS("g");
        this.transformedElement = this.layerElement;
        this.maskedElement = this.layerElement;
        this._sizeChanged = false;
        var layerElementParent = null;
        if (this.data.td) {
          this.matteMasks = {};
          var gg = createNS("g");
          gg.setAttribute("id", this.layerId);
          gg.appendChild(this.layerElement);
          layerElementParent = gg;
          this.globalData.defs.appendChild(gg);
        } else if (this.data.tt) {
          this.matteElement.appendChild(this.layerElement);
          layerElementParent = this.matteElement;
          this.baseElement = this.matteElement;
        } else {
          this.baseElement = this.layerElement;
        }
        if (this.data.ln) {
          this.layerElement.setAttribute("id", this.data.ln);
        }
        if (this.data.cl) {
          this.layerElement.setAttribute("class", this.data.cl);
        }
        if (this.data.ty === 0 && !this.data.hd) {
          var cp = createNS("clipPath");
          var pt = createNS("path");
          pt.setAttribute("d", "M0,0 L" + this.data.w + ",0 L" + this.data.w + "," + this.data.h + " L0," + this.data.h + "z");
          var clipId = createElementID();
          cp.setAttribute("id", clipId);
          cp.appendChild(pt);
          this.globalData.defs.appendChild(cp);
          if (this.checkMasks()) {
            var cpGroup = createNS("g");
            cpGroup.setAttribute("clip-path", "url(" + getLocationHref() + "#" + clipId + ")");
            cpGroup.appendChild(this.layerElement);
            this.transformedElement = cpGroup;
            if (layerElementParent) {
              layerElementParent.appendChild(this.transformedElement);
            } else {
              this.baseElement = this.transformedElement;
            }
          } else {
            this.layerElement.setAttribute("clip-path", "url(" + getLocationHref() + "#" + clipId + ")");
          }
        }
        if (this.data.bm !== 0) {
          this.setBlendMode();
        }
      },
      renderElement: function renderElement() {
        if (this.finalTransform._localMatMdf) {
          this.transformedElement.setAttribute("transform", this.finalTransform.localMat.to2dCSS());
        }
        if (this.finalTransform._opMdf) {
          this.transformedElement.setAttribute("opacity", this.finalTransform.localOpacity);
        }
      },
      destroyBaseElement: function destroyBaseElement() {
        this.layerElement = null;
        this.matteElement = null;
        this.maskManager.destroy();
      },
      getBaseElement: function getBaseElement() {
        if (this.data.hd) {
          return null;
        }
        return this.baseElement;
      },
      createRenderableComponents: function createRenderableComponents() {
        this.maskManager = new MaskElement(this.data, this, this.globalData);
        this.renderableEffectsManager = new SVGEffects(this);
        this.searchEffectTransforms();
      },
      getMatte: function getMatte(matteType) {
        if (!this.matteMasks) {
          this.matteMasks = {};
        }
        if (!this.matteMasks[matteType]) {
          var id2 = this.layerId + "_" + matteType;
          var filId;
          var fil;
          var useElement;
          var gg;
          if (matteType === 1 || matteType === 3) {
            var masker = createNS("mask");
            masker.setAttribute("id", id2);
            masker.setAttribute("mask-type", matteType === 3 ? "luminance" : "alpha");
            useElement = createNS("use");
            useElement.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#" + this.layerId);
            masker.appendChild(useElement);
            this.globalData.defs.appendChild(masker);
            if (!featureSupport.maskType && matteType === 1) {
              masker.setAttribute("mask-type", "luminance");
              filId = createElementID();
              fil = filtersFactory.createFilter(filId);
              this.globalData.defs.appendChild(fil);
              fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
              gg = createNS("g");
              gg.appendChild(useElement);
              masker.appendChild(gg);
              gg.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
            }
          } else if (matteType === 2) {
            var maskGroup = createNS("mask");
            maskGroup.setAttribute("id", id2);
            maskGroup.setAttribute("mask-type", "alpha");
            var maskGrouper = createNS("g");
            maskGroup.appendChild(maskGrouper);
            filId = createElementID();
            fil = filtersFactory.createFilter(filId);
            var feCTr = createNS("feComponentTransfer");
            feCTr.setAttribute("in", "SourceGraphic");
            fil.appendChild(feCTr);
            var feFunc = createNS("feFuncA");
            feFunc.setAttribute("type", "table");
            feFunc.setAttribute("tableValues", "1.0 0.0");
            feCTr.appendChild(feFunc);
            this.globalData.defs.appendChild(fil);
            var alphaRect = createNS("rect");
            alphaRect.setAttribute("width", this.comp.data.w);
            alphaRect.setAttribute("height", this.comp.data.h);
            alphaRect.setAttribute("x", "0");
            alphaRect.setAttribute("y", "0");
            alphaRect.setAttribute("fill", "#ffffff");
            alphaRect.setAttribute("opacity", "0");
            maskGrouper.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
            maskGrouper.appendChild(alphaRect);
            useElement = createNS("use");
            useElement.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#" + this.layerId);
            maskGrouper.appendChild(useElement);
            if (!featureSupport.maskType) {
              maskGroup.setAttribute("mask-type", "luminance");
              fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
              gg = createNS("g");
              maskGrouper.appendChild(alphaRect);
              gg.appendChild(this.layerElement);
              maskGrouper.appendChild(gg);
            }
            this.globalData.defs.appendChild(maskGroup);
          }
          this.matteMasks[matteType] = id2;
        }
        return this.matteMasks[matteType];
      },
      setMatte: function setMatte(id2) {
        if (!this.matteElement) {
          return;
        }
        this.matteElement.setAttribute("mask", "url(" + getLocationHref() + "#" + id2 + ")");
      }
    };
    function HierarchyElement() {
    }
    HierarchyElement.prototype = {
      /**
         * @function
         * Initializes hierarchy properties
         *
         */
      initHierarchy: function initHierarchy() {
        this.hierarchy = [];
        this._isParent = false;
        this.checkParenting();
      },
      /**
         * @function
         * Sets layer's hierarchy.
         * @param {array} hierarch
         * layer's parent list
         *
         */
      setHierarchy: function setHierarchy(hierarchy) {
        this.hierarchy = hierarchy;
      },
      /**
         * @function
         * Sets layer as parent.
         *
         */
      setAsParent: function setAsParent() {
        this._isParent = true;
      },
      /**
         * @function
         * Searches layer's parenting chain
         *
         */
      checkParenting: function checkParenting() {
        if (this.data.parent !== void 0) {
          this.comp.buildElementParenting(this, this.data.parent, []);
        }
      }
    };
    function RenderableDOMElement() {
    }
    (function() {
      var _prototype = {
        initElement: function initElement(data2, globalData2, comp2) {
          this.initFrame();
          this.initBaseData(data2, globalData2, comp2);
          this.initTransform(data2, globalData2, comp2);
          this.initHierarchy();
          this.initRenderable();
          this.initRendererElement();
          this.createContainerElements();
          this.createRenderableComponents();
          this.createContent();
          this.hide();
        },
        hide: function hide2() {
          if (!this.hidden && (!this.isInRange || this.isTransparent)) {
            var elem2 = this.baseElement || this.layerElement;
            elem2.style.display = "none";
            this.hidden = true;
          }
        },
        show: function show() {
          if (this.isInRange && !this.isTransparent) {
            if (!this.data.hd) {
              var elem2 = this.baseElement || this.layerElement;
              elem2.style.display = "block";
            }
            this.hidden = false;
            this._isFirstFrame = true;
          }
        },
        renderFrame: function renderFrame() {
          if (this.data.hd || this.hidden) {
            return;
          }
          this.renderTransform();
          this.renderRenderable();
          this.renderLocalTransform();
          this.renderElement();
          this.renderInnerContent();
          if (this._isFirstFrame) {
            this._isFirstFrame = false;
          }
        },
        renderInnerContent: function renderInnerContent() {
        },
        prepareFrame: function prepareFrame(num) {
          this._mdf = false;
          this.prepareRenderableFrame(num);
          this.prepareProperties(num, this.isInRange);
          this.checkTransparency();
        },
        destroy: function destroy() {
          this.innerElem = null;
          this.destroyBaseElement();
        }
      };
      extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
    })();
    function IImageElement(data2, globalData2, comp2) {
      this.assetData = globalData2.getAssetData(data2.refId);
      if (this.assetData && this.assetData.sid) {
        this.assetData = globalData2.slotManager.getProp(this.assetData);
      }
      this.initElement(data2, globalData2, comp2);
      this.sourceRect = {
        top: 0,
        left: 0,
        width: this.assetData.w,
        height: this.assetData.h
      };
    }
    extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], IImageElement);
    IImageElement.prototype.createContent = function() {
      var assetPath = this.globalData.getAssetsPath(this.assetData);
      this.innerElem = createNS("image");
      this.innerElem.setAttribute("width", this.assetData.w + "px");
      this.innerElem.setAttribute("height", this.assetData.h + "px");
      this.innerElem.setAttribute("preserveAspectRatio", this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);
      this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", assetPath);
      this.layerElement.appendChild(this.innerElem);
    };
    IImageElement.prototype.sourceRectAtTime = function() {
      return this.sourceRect;
    };
    function ProcessedElement(element, position2) {
      this.elem = element;
      this.pos = position2;
    }
    function IShapeElement() {
    }
    IShapeElement.prototype = {
      addShapeToModifiers: function addShapeToModifiers(data2) {
        var i2;
        var len = this.shapeModifiers.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.shapeModifiers[i2].addShape(data2);
        }
      },
      isShapeInAnimatedModifiers: function isShapeInAnimatedModifiers(data2) {
        var i2 = 0;
        var len = this.shapeModifiers.length;
        while (i2 < len) {
          if (this.shapeModifiers[i2].isAnimatedWithShape(data2)) {
            return true;
          }
        }
        return false;
      },
      renderModifiers: function renderModifiers() {
        if (!this.shapeModifiers.length) {
          return;
        }
        var i2;
        var len = this.shapes.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.shapes[i2].sh.reset();
        }
        len = this.shapeModifiers.length;
        var shouldBreakProcess;
        for (i2 = len - 1; i2 >= 0; i2 -= 1) {
          shouldBreakProcess = this.shapeModifiers[i2].processShapes(this._isFirstFrame);
          if (shouldBreakProcess) {
            break;
          }
        }
      },
      searchProcessedElement: function searchProcessedElement(elem2) {
        var elements = this.processedElements;
        var i2 = 0;
        var len = elements.length;
        while (i2 < len) {
          if (elements[i2].elem === elem2) {
            return elements[i2].pos;
          }
          i2 += 1;
        }
        return 0;
      },
      addProcessedElement: function addProcessedElement(elem2, pos) {
        var elements = this.processedElements;
        var i2 = elements.length;
        while (i2) {
          i2 -= 1;
          if (elements[i2].elem === elem2) {
            elements[i2].pos = pos;
            return;
          }
        }
        elements.push(new ProcessedElement(elem2, pos));
      },
      prepareFrame: function prepareFrame(num) {
        this.prepareRenderableFrame(num);
        this.prepareProperties(num, this.isInRange);
      }
    };
    var lineCapEnum = {
      1: "butt",
      2: "round",
      3: "square"
    };
    var lineJoinEnum = {
      1: "miter",
      2: "round",
      3: "bevel"
    };
    function SVGShapeData(transformers, level, shape) {
      this.caches = [];
      this.styles = [];
      this.transformers = transformers;
      this.lStr = "";
      this.sh = shape;
      this.lvl = level;
      this._isAnimated = !!shape.k;
      var i2 = 0;
      var len = transformers.length;
      while (i2 < len) {
        if (transformers[i2].mProps.dynamicProperties.length) {
          this._isAnimated = true;
          break;
        }
        i2 += 1;
      }
    }
    SVGShapeData.prototype.setAsAnimated = function() {
      this._isAnimated = true;
    };
    function SVGStyleData(data2, level) {
      this.data = data2;
      this.type = data2.ty;
      this.d = "";
      this.lvl = level;
      this._mdf = false;
      this.closed = data2.hd === true;
      this.pElem = createNS("path");
      this.msElem = null;
    }
    SVGStyleData.prototype.reset = function() {
      this.d = "";
      this._mdf = false;
    };
    function DashProperty(elem2, data2, renderer, container2) {
      this.elem = elem2;
      this.frameId = -1;
      this.dataProps = createSizedArray(data2.length);
      this.renderer = renderer;
      this.k = false;
      this.dashStr = "";
      this.dashArray = createTypedArray("float32", data2.length ? data2.length - 1 : 0);
      this.dashoffset = createTypedArray("float32", 1);
      this.initDynamicPropertyContainer(container2);
      var i2;
      var len = data2.length || 0;
      var prop;
      for (i2 = 0; i2 < len; i2 += 1) {
        prop = PropertyFactory.getProp(elem2, data2[i2].v, 0, 0, this);
        this.k = prop.k || this.k;
        this.dataProps[i2] = {
          n: data2[i2].n,
          p: prop
        };
      }
      if (!this.k) {
        this.getValue(true);
      }
      this._isAnimated = this.k;
    }
    DashProperty.prototype.getValue = function(forceRender) {
      if (this.elem.globalData.frameId === this.frameId && !forceRender) {
        return;
      }
      this.frameId = this.elem.globalData.frameId;
      this.iterateDynamicProperties();
      this._mdf = this._mdf || forceRender;
      if (this._mdf) {
        var i2 = 0;
        var len = this.dataProps.length;
        if (this.renderer === "svg") {
          this.dashStr = "";
        }
        for (i2 = 0; i2 < len; i2 += 1) {
          if (this.dataProps[i2].n !== "o") {
            if (this.renderer === "svg") {
              this.dashStr += " " + this.dataProps[i2].p.v;
            } else {
              this.dashArray[i2] = this.dataProps[i2].p.v;
            }
          } else {
            this.dashoffset[0] = this.dataProps[i2].p.v;
          }
        }
      }
    };
    extendPrototype([DynamicPropertyContainer], DashProperty);
    function SVGStrokeStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
      this.w = PropertyFactory.getProp(elem2, data2.w, 0, null, this);
      this.d = new DashProperty(elem2, data2.d || {}, "svg", this);
      this.c = PropertyFactory.getProp(elem2, data2.c, 1, 255, this);
      this.style = styleOb;
      this._isAnimated = !!this._isAnimated;
    }
    extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);
    function SVGFillStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
      this.c = PropertyFactory.getProp(elem2, data2.c, 1, 255, this);
      this.style = styleOb;
    }
    extendPrototype([DynamicPropertyContainer], SVGFillStyleData);
    function SVGNoStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.style = styleOb;
    }
    extendPrototype([DynamicPropertyContainer], SVGNoStyleData);
    function GradientProperty(elem2, data2, container2) {
      this.data = data2;
      this.c = createTypedArray("uint8c", data2.p * 4);
      var cLength = data2.k.k[0].s ? data2.k.k[0].s.length - data2.p * 4 : data2.k.k.length - data2.p * 4;
      this.o = createTypedArray("float32", cLength);
      this._cmdf = false;
      this._omdf = false;
      this._collapsable = this.checkCollapsable();
      this._hasOpacity = cLength;
      this.initDynamicPropertyContainer(container2);
      this.prop = PropertyFactory.getProp(elem2, data2.k, 1, null, this);
      this.k = this.prop.k;
      this.getValue(true);
    }
    GradientProperty.prototype.comparePoints = function(values, points) {
      var i2 = 0;
      var len = this.o.length / 2;
      var diff;
      while (i2 < len) {
        diff = Math.abs(values[i2 * 4] - values[points * 4 + i2 * 2]);
        if (diff > 0.01) {
          return false;
        }
        i2 += 1;
      }
      return true;
    };
    GradientProperty.prototype.checkCollapsable = function() {
      if (this.o.length / 2 !== this.c.length / 4) {
        return false;
      }
      if (this.data.k.k[0].s) {
        var i2 = 0;
        var len = this.data.k.k.length;
        while (i2 < len) {
          if (!this.comparePoints(this.data.k.k[i2].s, this.data.p)) {
            return false;
          }
          i2 += 1;
        }
      } else if (!this.comparePoints(this.data.k.k, this.data.p)) {
        return false;
      }
      return true;
    };
    GradientProperty.prototype.getValue = function(forceRender) {
      this.prop.getValue();
      this._mdf = false;
      this._cmdf = false;
      this._omdf = false;
      if (this.prop._mdf || forceRender) {
        var i2;
        var len = this.data.p * 4;
        var mult;
        var val2;
        for (i2 = 0; i2 < len; i2 += 1) {
          mult = i2 % 4 === 0 ? 100 : 255;
          val2 = Math.round(this.prop.v[i2] * mult);
          if (this.c[i2] !== val2) {
            this.c[i2] = val2;
            this._cmdf = !forceRender;
          }
        }
        if (this.o.length) {
          len = this.prop.v.length;
          for (i2 = this.data.p * 4; i2 < len; i2 += 1) {
            mult = i2 % 2 === 0 ? 100 : 1;
            val2 = i2 % 2 === 0 ? Math.round(this.prop.v[i2] * 100) : this.prop.v[i2];
            if (this.o[i2 - this.data.p * 4] !== val2) {
              this.o[i2 - this.data.p * 4] = val2;
              this._omdf = !forceRender;
            }
          }
        }
        this._mdf = !forceRender;
      }
    };
    extendPrototype([DynamicPropertyContainer], GradientProperty);
    function SVGGradientFillStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.initGradientData(elem2, data2, styleOb);
    }
    SVGGradientFillStyleData.prototype.initGradientData = function(elem2, data2, styleOb) {
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
      this.s = PropertyFactory.getProp(elem2, data2.s, 1, null, this);
      this.e = PropertyFactory.getProp(elem2, data2.e, 1, null, this);
      this.h = PropertyFactory.getProp(elem2, data2.h || {
        k: 0
      }, 0, 0.01, this);
      this.a = PropertyFactory.getProp(elem2, data2.a || {
        k: 0
      }, 0, degToRads, this);
      this.g = new GradientProperty(elem2, data2.g, this);
      this.style = styleOb;
      this.stops = [];
      this.setGradientData(styleOb.pElem, data2);
      this.setGradientOpacity(data2, styleOb);
      this._isAnimated = !!this._isAnimated;
    };
    SVGGradientFillStyleData.prototype.setGradientData = function(pathElement, data2) {
      var gradientId = createElementID();
      var gfill = createNS(data2.t === 1 ? "linearGradient" : "radialGradient");
      gfill.setAttribute("id", gradientId);
      gfill.setAttribute("spreadMethod", "pad");
      gfill.setAttribute("gradientUnits", "userSpaceOnUse");
      var stops = [];
      var stop;
      var j2;
      var jLen;
      jLen = data2.g.p * 4;
      for (j2 = 0; j2 < jLen; j2 += 4) {
        stop = createNS("stop");
        gfill.appendChild(stop);
        stops.push(stop);
      }
      pathElement.setAttribute(data2.ty === "gf" ? "fill" : "stroke", "url(" + getLocationHref() + "#" + gradientId + ")");
      this.gf = gfill;
      this.cst = stops;
    };
    SVGGradientFillStyleData.prototype.setGradientOpacity = function(data2, styleOb) {
      if (this.g._hasOpacity && !this.g._collapsable) {
        var stop;
        var j2;
        var jLen;
        var mask2 = createNS("mask");
        var maskElement = createNS("path");
        mask2.appendChild(maskElement);
        var opacityId = createElementID();
        var maskId = createElementID();
        mask2.setAttribute("id", maskId);
        var opFill = createNS(data2.t === 1 ? "linearGradient" : "radialGradient");
        opFill.setAttribute("id", opacityId);
        opFill.setAttribute("spreadMethod", "pad");
        opFill.setAttribute("gradientUnits", "userSpaceOnUse");
        jLen = data2.g.k.k[0].s ? data2.g.k.k[0].s.length : data2.g.k.k.length;
        var stops = this.stops;
        for (j2 = data2.g.p * 4; j2 < jLen; j2 += 2) {
          stop = createNS("stop");
          stop.setAttribute("stop-color", "rgb(255,255,255)");
          opFill.appendChild(stop);
          stops.push(stop);
        }
        maskElement.setAttribute(data2.ty === "gf" ? "fill" : "stroke", "url(" + getLocationHref() + "#" + opacityId + ")");
        if (data2.ty === "gs") {
          maskElement.setAttribute("stroke-linecap", lineCapEnum[data2.lc || 2]);
          maskElement.setAttribute("stroke-linejoin", lineJoinEnum[data2.lj || 2]);
          if (data2.lj === 1) {
            maskElement.setAttribute("stroke-miterlimit", data2.ml);
          }
        }
        this.of = opFill;
        this.ms = mask2;
        this.ost = stops;
        this.maskId = maskId;
        styleOb.msElem = maskElement;
      }
    };
    extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);
    function SVGGradientStrokeStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.w = PropertyFactory.getProp(elem2, data2.w, 0, null, this);
      this.d = new DashProperty(elem2, data2.d || {}, "svg", this);
      this.initGradientData(elem2, data2, styleOb);
      this._isAnimated = !!this._isAnimated;
    }
    extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);
    function ShapeGroupData() {
      this.it = [];
      this.prevViewData = [];
      this.gr = createNS("g");
    }
    function SVGTransformData(mProps, op, container2) {
      this.transform = {
        mProps,
        op,
        container: container2
      };
      this.elements = [];
      this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
    }
    var buildShapeString = function buildShapeString2(pathNodes, length2, closed, mat) {
      if (length2 === 0) {
        return "";
      }
      var _o = pathNodes.o;
      var _i = pathNodes.i;
      var _v = pathNodes.v;
      var i2;
      var shapeString = " M" + mat.applyToPointStringified(_v[0][0], _v[0][1]);
      for (i2 = 1; i2 < length2; i2 += 1) {
        shapeString += " C" + mat.applyToPointStringified(_o[i2 - 1][0], _o[i2 - 1][1]) + " " + mat.applyToPointStringified(_i[i2][0], _i[i2][1]) + " " + mat.applyToPointStringified(_v[i2][0], _v[i2][1]);
      }
      if (closed && length2) {
        shapeString += " C" + mat.applyToPointStringified(_o[i2 - 1][0], _o[i2 - 1][1]) + " " + mat.applyToPointStringified(_i[0][0], _i[0][1]) + " " + mat.applyToPointStringified(_v[0][0], _v[0][1]);
        shapeString += "z";
      }
      return shapeString;
    };
    var SVGElementsRenderer = function() {
      var _identityMatrix = new Matrix();
      var _matrixHelper = new Matrix();
      var ob2 = {
        createRenderFunction
      };
      function createRenderFunction(data2) {
        switch (data2.ty) {
          case "fl":
            return renderFill;
          case "gf":
            return renderGradient;
          case "gs":
            return renderGradientStroke;
          case "st":
            return renderStroke;
          case "sh":
          case "el":
          case "rc":
          case "sr":
            return renderPath;
          case "tr":
            return renderContentTransform;
          case "no":
            return renderNoop;
          default:
            return null;
        }
      }
      function renderContentTransform(styleData, itemData, isFirstFrame) {
        if (isFirstFrame || itemData.transform.op._mdf) {
          itemData.transform.container.setAttribute("opacity", itemData.transform.op.v);
        }
        if (isFirstFrame || itemData.transform.mProps._mdf) {
          itemData.transform.container.setAttribute("transform", itemData.transform.mProps.v.to2dCSS());
        }
      }
      function renderNoop() {
      }
      function renderPath(styleData, itemData, isFirstFrame) {
        var j2;
        var jLen;
        var pathStringTransformed;
        var redraw;
        var pathNodes;
        var l;
        var lLen = itemData.styles.length;
        var lvl = itemData.lvl;
        var paths;
        var mat;
        var iterations;
        var k2;
        for (l = 0; l < lLen; l += 1) {
          redraw = itemData.sh._mdf || isFirstFrame;
          if (itemData.styles[l].lvl < lvl) {
            mat = _matrixHelper.reset();
            iterations = lvl - itemData.styles[l].lvl;
            k2 = itemData.transformers.length - 1;
            while (!redraw && iterations > 0) {
              redraw = itemData.transformers[k2].mProps._mdf || redraw;
              iterations -= 1;
              k2 -= 1;
            }
            if (redraw) {
              iterations = lvl - itemData.styles[l].lvl;
              k2 = itemData.transformers.length - 1;
              while (iterations > 0) {
                mat.multiply(itemData.transformers[k2].mProps.v);
                iterations -= 1;
                k2 -= 1;
              }
            }
          } else {
            mat = _identityMatrix;
          }
          paths = itemData.sh.paths;
          jLen = paths._length;
          if (redraw) {
            pathStringTransformed = "";
            for (j2 = 0; j2 < jLen; j2 += 1) {
              pathNodes = paths.shapes[j2];
              if (pathNodes && pathNodes._length) {
                pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
              }
            }
            itemData.caches[l] = pathStringTransformed;
          } else {
            pathStringTransformed = itemData.caches[l];
          }
          itemData.styles[l].d += styleData.hd === true ? "" : pathStringTransformed;
          itemData.styles[l]._mdf = redraw || itemData.styles[l]._mdf;
        }
      }
      function renderFill(styleData, itemData, isFirstFrame) {
        var styleElem = itemData.style;
        if (itemData.c._mdf || isFirstFrame) {
          styleElem.pElem.setAttribute("fill", "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")");
        }
        if (itemData.o._mdf || isFirstFrame) {
          styleElem.pElem.setAttribute("fill-opacity", itemData.o.v);
        }
      }
      function renderGradientStroke(styleData, itemData, isFirstFrame) {
        renderGradient(styleData, itemData, isFirstFrame);
        renderStroke(styleData, itemData, isFirstFrame);
      }
      function renderGradient(styleData, itemData, isFirstFrame) {
        var gfill = itemData.gf;
        var hasOpacity = itemData.g._hasOpacity;
        var pt1 = itemData.s.v;
        var pt2 = itemData.e.v;
        if (itemData.o._mdf || isFirstFrame) {
          var attr = styleData.ty === "gf" ? "fill-opacity" : "stroke-opacity";
          itemData.style.pElem.setAttribute(attr, itemData.o.v);
        }
        if (itemData.s._mdf || isFirstFrame) {
          var attr1 = styleData.t === 1 ? "x1" : "cx";
          var attr2 = attr1 === "x1" ? "y1" : "cy";
          gfill.setAttribute(attr1, pt1[0]);
          gfill.setAttribute(attr2, pt1[1]);
          if (hasOpacity && !itemData.g._collapsable) {
            itemData.of.setAttribute(attr1, pt1[0]);
            itemData.of.setAttribute(attr2, pt1[1]);
          }
        }
        var stops;
        var i2;
        var len;
        var stop;
        if (itemData.g._cmdf || isFirstFrame) {
          stops = itemData.cst;
          var cValues = itemData.g.c;
          len = stops.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            stop = stops[i2];
            stop.setAttribute("offset", cValues[i2 * 4] + "%");
            stop.setAttribute("stop-color", "rgb(" + cValues[i2 * 4 + 1] + "," + cValues[i2 * 4 + 2] + "," + cValues[i2 * 4 + 3] + ")");
          }
        }
        if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
          var oValues = itemData.g.o;
          if (itemData.g._collapsable) {
            stops = itemData.cst;
          } else {
            stops = itemData.ost;
          }
          len = stops.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            stop = stops[i2];
            if (!itemData.g._collapsable) {
              stop.setAttribute("offset", oValues[i2 * 2] + "%");
            }
            stop.setAttribute("stop-opacity", oValues[i2 * 2 + 1]);
          }
        }
        if (styleData.t === 1) {
          if (itemData.e._mdf || isFirstFrame) {
            gfill.setAttribute("x2", pt2[0]);
            gfill.setAttribute("y2", pt2[1]);
            if (hasOpacity && !itemData.g._collapsable) {
              itemData.of.setAttribute("x2", pt2[0]);
              itemData.of.setAttribute("y2", pt2[1]);
            }
          }
        } else {
          var rad;
          if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
            rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
            gfill.setAttribute("r", rad);
            if (hasOpacity && !itemData.g._collapsable) {
              itemData.of.setAttribute("r", rad);
            }
          }
          if (itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {
            if (!rad) {
              rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
            }
            var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
            var percent = itemData.h.v;
            if (percent >= 1) {
              percent = 0.99;
            } else if (percent <= -1) {
              percent = -0.99;
            }
            var dist2 = rad * percent;
            var x = Math.cos(ang + itemData.a.v) * dist2 + pt1[0];
            var y = Math.sin(ang + itemData.a.v) * dist2 + pt1[1];
            gfill.setAttribute("fx", x);
            gfill.setAttribute("fy", y);
            if (hasOpacity && !itemData.g._collapsable) {
              itemData.of.setAttribute("fx", x);
              itemData.of.setAttribute("fy", y);
            }
          }
        }
      }
      function renderStroke(styleData, itemData, isFirstFrame) {
        var styleElem = itemData.style;
        var d = itemData.d;
        if (d && (d._mdf || isFirstFrame) && d.dashStr) {
          styleElem.pElem.setAttribute("stroke-dasharray", d.dashStr);
          styleElem.pElem.setAttribute("stroke-dashoffset", d.dashoffset[0]);
        }
        if (itemData.c && (itemData.c._mdf || isFirstFrame)) {
          styleElem.pElem.setAttribute("stroke", "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")");
        }
        if (itemData.o._mdf || isFirstFrame) {
          styleElem.pElem.setAttribute("stroke-opacity", itemData.o.v);
        }
        if (itemData.w._mdf || isFirstFrame) {
          styleElem.pElem.setAttribute("stroke-width", itemData.w.v);
          if (styleElem.msElem) {
            styleElem.msElem.setAttribute("stroke-width", itemData.w.v);
          }
        }
      }
      return ob2;
    }();
    function SVGShapeElement(data2, globalData2, comp2) {
      this.shapes = [];
      this.shapesData = data2.shapes;
      this.stylesList = [];
      this.shapeModifiers = [];
      this.itemsData = [];
      this.processedElements = [];
      this.animatedContents = [];
      this.initElement(data2, globalData2, comp2);
      this.prevViewData = [];
    }
    extendPrototype([BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableDOMElement], SVGShapeElement);
    SVGShapeElement.prototype.initSecondaryElement = function() {
    };
    SVGShapeElement.prototype.identityMatrix = new Matrix();
    SVGShapeElement.prototype.buildExpressionInterface = function() {
    };
    SVGShapeElement.prototype.createContent = function() {
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
      this.filterUniqueShapes();
    };
    SVGShapeElement.prototype.filterUniqueShapes = function() {
      var i2;
      var len = this.shapes.length;
      var shape;
      var j2;
      var jLen = this.stylesList.length;
      var style;
      var tempShapes = [];
      var areAnimated = false;
      for (j2 = 0; j2 < jLen; j2 += 1) {
        style = this.stylesList[j2];
        areAnimated = false;
        tempShapes.length = 0;
        for (i2 = 0; i2 < len; i2 += 1) {
          shape = this.shapes[i2];
          if (shape.styles.indexOf(style) !== -1) {
            tempShapes.push(shape);
            areAnimated = shape._isAnimated || areAnimated;
          }
        }
        if (tempShapes.length > 1 && areAnimated) {
          this.setShapesAsAnimated(tempShapes);
        }
      }
    };
    SVGShapeElement.prototype.setShapesAsAnimated = function(shapes) {
      var i2;
      var len = shapes.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        shapes[i2].setAsAnimated();
      }
    };
    SVGShapeElement.prototype.createStyleElement = function(data2, level) {
      var elementData;
      var styleOb = new SVGStyleData(data2, level);
      var pathElement = styleOb.pElem;
      if (data2.ty === "st") {
        elementData = new SVGStrokeStyleData(this, data2, styleOb);
      } else if (data2.ty === "fl") {
        elementData = new SVGFillStyleData(this, data2, styleOb);
      } else if (data2.ty === "gf" || data2.ty === "gs") {
        var GradientConstructor = data2.ty === "gf" ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
        elementData = new GradientConstructor(this, data2, styleOb);
        this.globalData.defs.appendChild(elementData.gf);
        if (elementData.maskId) {
          this.globalData.defs.appendChild(elementData.ms);
          this.globalData.defs.appendChild(elementData.of);
          pathElement.setAttribute("mask", "url(" + getLocationHref() + "#" + elementData.maskId + ")");
        }
      } else if (data2.ty === "no") {
        elementData = new SVGNoStyleData(this, data2, styleOb);
      }
      if (data2.ty === "st" || data2.ty === "gs") {
        pathElement.setAttribute("stroke-linecap", lineCapEnum[data2.lc || 2]);
        pathElement.setAttribute("stroke-linejoin", lineJoinEnum[data2.lj || 2]);
        pathElement.setAttribute("fill-opacity", "0");
        if (data2.lj === 1) {
          pathElement.setAttribute("stroke-miterlimit", data2.ml);
        }
      }
      if (data2.r === 2) {
        pathElement.setAttribute("fill-rule", "evenodd");
      }
      if (data2.ln) {
        pathElement.setAttribute("id", data2.ln);
      }
      if (data2.cl) {
        pathElement.setAttribute("class", data2.cl);
      }
      if (data2.bm) {
        pathElement.style["mix-blend-mode"] = getBlendMode(data2.bm);
      }
      this.stylesList.push(styleOb);
      this.addToAnimatedContents(data2, elementData);
      return elementData;
    };
    SVGShapeElement.prototype.createGroupElement = function(data2) {
      var elementData = new ShapeGroupData();
      if (data2.ln) {
        elementData.gr.setAttribute("id", data2.ln);
      }
      if (data2.cl) {
        elementData.gr.setAttribute("class", data2.cl);
      }
      if (data2.bm) {
        elementData.gr.style["mix-blend-mode"] = getBlendMode(data2.bm);
      }
      return elementData;
    };
    SVGShapeElement.prototype.createTransformElement = function(data2, container2) {
      var transformProperty = TransformPropertyFactory.getTransformProperty(this, data2, this);
      var elementData = new SVGTransformData(transformProperty, transformProperty.o, container2);
      this.addToAnimatedContents(data2, elementData);
      return elementData;
    };
    SVGShapeElement.prototype.createShapeElement = function(data2, ownTransformers, level) {
      var ty = 4;
      if (data2.ty === "rc") {
        ty = 5;
      } else if (data2.ty === "el") {
        ty = 6;
      } else if (data2.ty === "sr") {
        ty = 7;
      }
      var shapeProperty = ShapePropertyFactory.getShapeProp(this, data2, ty, this);
      var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
      this.shapes.push(elementData);
      this.addShapeToModifiers(elementData);
      this.addToAnimatedContents(data2, elementData);
      return elementData;
    };
    SVGShapeElement.prototype.addToAnimatedContents = function(data2, element) {
      var i2 = 0;
      var len = this.animatedContents.length;
      while (i2 < len) {
        if (this.animatedContents[i2].element === element) {
          return;
        }
        i2 += 1;
      }
      this.animatedContents.push({
        fn: SVGElementsRenderer.createRenderFunction(data2),
        element,
        data: data2
      });
    };
    SVGShapeElement.prototype.setElementStyles = function(elementData) {
      var arr = elementData.styles;
      var j2;
      var jLen = this.stylesList.length;
      for (j2 = 0; j2 < jLen; j2 += 1) {
        if (!this.stylesList[j2].closed) {
          arr.push(this.stylesList[j2]);
        }
      }
    };
    SVGShapeElement.prototype.reloadShapes = function() {
      this._isFirstFrame = true;
      var i2;
      var len = this.itemsData.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.prevViewData[i2] = this.itemsData[i2];
      }
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
      this.filterUniqueShapes();
      len = this.dynamicProperties.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.dynamicProperties[i2].getValue();
      }
      this.renderModifiers();
    };
    SVGShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, container2, level, transformers, render2) {
      var ownTransformers = [].concat(transformers);
      var i2;
      var len = arr.length - 1;
      var j2;
      var jLen;
      var ownStyles = [];
      var ownModifiers = [];
      var currentTransform;
      var modifier;
      var processedPos;
      for (i2 = len; i2 >= 0; i2 -= 1) {
        processedPos = this.searchProcessedElement(arr[i2]);
        if (!processedPos) {
          arr[i2]._render = render2;
        } else {
          itemsData[i2] = prevViewData[processedPos - 1];
        }
        if (arr[i2].ty === "fl" || arr[i2].ty === "st" || arr[i2].ty === "gf" || arr[i2].ty === "gs" || arr[i2].ty === "no") {
          if (!processedPos) {
            itemsData[i2] = this.createStyleElement(arr[i2], level);
          } else {
            itemsData[i2].style.closed = false;
          }
          if (arr[i2]._render) {
            if (itemsData[i2].style.pElem.parentNode !== container2) {
              container2.appendChild(itemsData[i2].style.pElem);
            }
          }
          ownStyles.push(itemsData[i2].style);
        } else if (arr[i2].ty === "gr") {
          if (!processedPos) {
            itemsData[i2] = this.createGroupElement(arr[i2]);
          } else {
            jLen = itemsData[i2].it.length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              itemsData[i2].prevViewData[j2] = itemsData[i2].it[j2];
            }
          }
          this.searchShapes(arr[i2].it, itemsData[i2].it, itemsData[i2].prevViewData, itemsData[i2].gr, level + 1, ownTransformers, render2);
          if (arr[i2]._render) {
            if (itemsData[i2].gr.parentNode !== container2) {
              container2.appendChild(itemsData[i2].gr);
            }
          }
        } else if (arr[i2].ty === "tr") {
          if (!processedPos) {
            itemsData[i2] = this.createTransformElement(arr[i2], container2);
          }
          currentTransform = itemsData[i2].transform;
          ownTransformers.push(currentTransform);
        } else if (arr[i2].ty === "sh" || arr[i2].ty === "rc" || arr[i2].ty === "el" || arr[i2].ty === "sr") {
          if (!processedPos) {
            itemsData[i2] = this.createShapeElement(arr[i2], ownTransformers, level);
          }
          this.setElementStyles(itemsData[i2]);
        } else if (arr[i2].ty === "tm" || arr[i2].ty === "rd" || arr[i2].ty === "ms" || arr[i2].ty === "pb" || arr[i2].ty === "zz" || arr[i2].ty === "op") {
          if (!processedPos) {
            modifier = ShapeModifiers.getModifier(arr[i2].ty);
            modifier.init(this, arr[i2]);
            itemsData[i2] = modifier;
            this.shapeModifiers.push(modifier);
          } else {
            modifier = itemsData[i2];
            modifier.closed = false;
          }
          ownModifiers.push(modifier);
        } else if (arr[i2].ty === "rp") {
          if (!processedPos) {
            modifier = ShapeModifiers.getModifier(arr[i2].ty);
            itemsData[i2] = modifier;
            modifier.init(this, arr, i2, itemsData);
            this.shapeModifiers.push(modifier);
            render2 = false;
          } else {
            modifier = itemsData[i2];
            modifier.closed = true;
          }
          ownModifiers.push(modifier);
        }
        this.addProcessedElement(arr[i2], i2 + 1);
      }
      len = ownStyles.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        ownStyles[i2].closed = true;
      }
      len = ownModifiers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        ownModifiers[i2].closed = true;
      }
    };
    SVGShapeElement.prototype.renderInnerContent = function() {
      this.renderModifiers();
      var i2;
      var len = this.stylesList.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.stylesList[i2].reset();
      }
      this.renderShape();
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.stylesList[i2]._mdf || this._isFirstFrame) {
          if (this.stylesList[i2].msElem) {
            this.stylesList[i2].msElem.setAttribute("d", this.stylesList[i2].d);
            this.stylesList[i2].d = "M0 0" + this.stylesList[i2].d;
          }
          this.stylesList[i2].pElem.setAttribute("d", this.stylesList[i2].d || "M0 0");
        }
      }
    };
    SVGShapeElement.prototype.renderShape = function() {
      var i2;
      var len = this.animatedContents.length;
      var animatedContent;
      for (i2 = 0; i2 < len; i2 += 1) {
        animatedContent = this.animatedContents[i2];
        if ((this._isFirstFrame || animatedContent.element._isAnimated) && animatedContent.data !== true) {
          animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);
        }
      }
    };
    SVGShapeElement.prototype.destroy = function() {
      this.destroyBaseElement();
      this.shapesData = null;
      this.itemsData = null;
    };
    function LetterProps(o, sw, sc, fc, m, p) {
      this.o = o;
      this.sw = sw;
      this.sc = sc;
      this.fc = fc;
      this.m = m;
      this.p = p;
      this._mdf = {
        o: true,
        sw: !!sw,
        sc: !!sc,
        fc: !!fc,
        m: true,
        p: true
      };
    }
    LetterProps.prototype.update = function(o, sw, sc, fc, m, p) {
      this._mdf.o = false;
      this._mdf.sw = false;
      this._mdf.sc = false;
      this._mdf.fc = false;
      this._mdf.m = false;
      this._mdf.p = false;
      var updated = false;
      if (this.o !== o) {
        this.o = o;
        this._mdf.o = true;
        updated = true;
      }
      if (this.sw !== sw) {
        this.sw = sw;
        this._mdf.sw = true;
        updated = true;
      }
      if (this.sc !== sc) {
        this.sc = sc;
        this._mdf.sc = true;
        updated = true;
      }
      if (this.fc !== fc) {
        this.fc = fc;
        this._mdf.fc = true;
        updated = true;
      }
      if (this.m !== m) {
        this.m = m;
        this._mdf.m = true;
        updated = true;
      }
      if (p.length && (this.p[0] !== p[0] || this.p[1] !== p[1] || this.p[4] !== p[4] || this.p[5] !== p[5] || this.p[12] !== p[12] || this.p[13] !== p[13])) {
        this.p = p;
        this._mdf.p = true;
        updated = true;
      }
      return updated;
    };
    function TextProperty(elem2, data2) {
      this._frameId = initialDefaultFrame;
      this.pv = "";
      this.v = "";
      this.kf = false;
      this._isFirstFrame = true;
      this._mdf = false;
      if (data2.d && data2.d.sid) {
        data2.d = elem2.globalData.slotManager.getProp(data2.d);
      }
      this.data = data2;
      this.elem = elem2;
      this.comp = this.elem.comp;
      this.keysIndex = 0;
      this.canResize = false;
      this.minimumFontSize = 1;
      this.effectsSequence = [];
      this.currentData = {
        ascent: 0,
        boxWidth: this.defaultBoxWidth,
        f: "",
        fStyle: "",
        fWeight: "",
        fc: "",
        j: "",
        justifyOffset: "",
        l: [],
        lh: 0,
        lineWidths: [],
        ls: "",
        of: "",
        s: "",
        sc: "",
        sw: 0,
        t: 0,
        tr: 0,
        sz: 0,
        ps: null,
        fillColorAnim: false,
        strokeColorAnim: false,
        strokeWidthAnim: false,
        yOffset: 0,
        finalSize: 0,
        finalText: [],
        finalLineHeight: 0,
        __complete: false
      };
      this.copyData(this.currentData, this.data.d.k[0].s);
      if (!this.searchProperty()) {
        this.completeTextData(this.currentData);
      }
    }
    TextProperty.prototype.defaultBoxWidth = [0, 0];
    TextProperty.prototype.copyData = function(obj, data2) {
      for (var s in data2) {
        if (Object.prototype.hasOwnProperty.call(data2, s)) {
          obj[s] = data2[s];
        }
      }
      return obj;
    };
    TextProperty.prototype.setCurrentData = function(data2) {
      if (!data2.__complete) {
        this.completeTextData(data2);
      }
      this.currentData = data2;
      this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
      this._mdf = true;
    };
    TextProperty.prototype.searchProperty = function() {
      return this.searchKeyframes();
    };
    TextProperty.prototype.searchKeyframes = function() {
      this.kf = this.data.d.k.length > 1;
      if (this.kf) {
        this.addEffect(this.getKeyframeValue.bind(this));
      }
      return this.kf;
    };
    TextProperty.prototype.addEffect = function(effectFunction) {
      this.effectsSequence.push(effectFunction);
      this.elem.addDynamicProperty(this);
    };
    TextProperty.prototype.getValue = function(_finalValue) {
      if ((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
        return;
      }
      this.currentData.t = this.data.d.k[this.keysIndex].s.t;
      var currentValue = this.currentData;
      var currentIndex = this.keysIndex;
      if (this.lock) {
        this.setCurrentData(this.currentData);
        return;
      }
      this.lock = true;
      this._mdf = false;
      var i2;
      var len = this.effectsSequence.length;
      var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (currentIndex !== this.keysIndex) {
          finalValue = this.effectsSequence[i2](finalValue, finalValue.t);
        } else {
          finalValue = this.effectsSequence[i2](this.currentData, finalValue.t);
        }
      }
      if (currentValue !== finalValue) {
        this.setCurrentData(finalValue);
      }
      this.v = this.currentData;
      this.pv = this.v;
      this.lock = false;
      this.frameId = this.elem.globalData.frameId;
    };
    TextProperty.prototype.getKeyframeValue = function() {
      var textKeys = this.data.d.k;
      var frameNum = this.elem.comp.renderedFrame;
      var i2 = 0;
      var len = textKeys.length;
      while (i2 <= len - 1) {
        if (i2 === len - 1 || textKeys[i2 + 1].t > frameNum) {
          break;
        }
        i2 += 1;
      }
      if (this.keysIndex !== i2) {
        this.keysIndex = i2;
      }
      return this.data.d.k[this.keysIndex].s;
    };
    TextProperty.prototype.buildFinalText = function(text2) {
      var charactersArray = [];
      var i2 = 0;
      var len = text2.length;
      var charCode;
      var secondCharCode;
      var shouldCombine = false;
      var shouldCombineNext = false;
      var currentChars = "";
      while (i2 < len) {
        shouldCombine = shouldCombineNext;
        shouldCombineNext = false;
        charCode = text2.charCodeAt(i2);
        currentChars = text2.charAt(i2);
        if (FontManager.isCombinedCharacter(charCode)) {
          shouldCombine = true;
        } else if (charCode >= 55296 && charCode <= 56319) {
          if (FontManager.isRegionalFlag(text2, i2)) {
            currentChars = text2.substr(i2, 14);
          } else {
            secondCharCode = text2.charCodeAt(i2 + 1);
            if (secondCharCode >= 56320 && secondCharCode <= 57343) {
              if (FontManager.isModifier(charCode, secondCharCode)) {
                currentChars = text2.substr(i2, 2);
                shouldCombine = true;
              } else if (FontManager.isFlagEmoji(text2.substr(i2, 4))) {
                currentChars = text2.substr(i2, 4);
              } else {
                currentChars = text2.substr(i2, 2);
              }
            }
          }
        } else if (charCode > 56319) {
          secondCharCode = text2.charCodeAt(i2 + 1);
          if (FontManager.isVariationSelector(charCode)) {
            shouldCombine = true;
          }
        } else if (FontManager.isZeroWidthJoiner(charCode)) {
          shouldCombine = true;
          shouldCombineNext = true;
        }
        if (shouldCombine) {
          charactersArray[charactersArray.length - 1] += currentChars;
          shouldCombine = false;
        } else {
          charactersArray.push(currentChars);
        }
        i2 += currentChars.length;
      }
      return charactersArray;
    };
    TextProperty.prototype.completeTextData = function(documentData) {
      documentData.__complete = true;
      var fontManager = this.elem.globalData.fontManager;
      var data2 = this.data;
      var letters = [];
      var i2;
      var len;
      var newLineFlag;
      var index2 = 0;
      var val2;
      var anchorGrouping = data2.m.g;
      var currentSize = 0;
      var currentPos = 0;
      var currentLine = 0;
      var lineWidths = [];
      var lineWidth = 0;
      var maxLineWidth = 0;
      var j2;
      var jLen;
      var fontData = fontManager.getFontByName(documentData.f);
      var charData;
      var cLength = 0;
      var fontProps = getFontProperties(fontData);
      documentData.fWeight = fontProps.weight;
      documentData.fStyle = fontProps.style;
      documentData.finalSize = documentData.s;
      documentData.finalText = this.buildFinalText(documentData.t);
      len = documentData.finalText.length;
      documentData.finalLineHeight = documentData.lh;
      var trackingOffset = documentData.tr / 1e3 * documentData.finalSize;
      var charCode;
      if (documentData.sz) {
        var flag = true;
        var boxWidth = documentData.sz[0];
        var boxHeight = documentData.sz[1];
        var currentHeight;
        var finalText;
        while (flag) {
          finalText = this.buildFinalText(documentData.t);
          currentHeight = 0;
          lineWidth = 0;
          len = finalText.length;
          trackingOffset = documentData.tr / 1e3 * documentData.finalSize;
          var lastSpaceIndex = -1;
          for (i2 = 0; i2 < len; i2 += 1) {
            charCode = finalText[i2].charCodeAt(0);
            newLineFlag = false;
            if (finalText[i2] === " ") {
              lastSpaceIndex = i2;
            } else if (charCode === 13 || charCode === 3) {
              lineWidth = 0;
              newLineFlag = true;
              currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
            }
            if (fontManager.chars) {
              charData = fontManager.getCharData(finalText[i2], fontData.fStyle, fontData.fFamily);
              cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
            } else {
              cLength = fontManager.measureText(finalText[i2], documentData.f, documentData.finalSize);
            }
            if (lineWidth + cLength > boxWidth && finalText[i2] !== " ") {
              if (lastSpaceIndex === -1) {
                len += 1;
              } else {
                i2 = lastSpaceIndex;
              }
              currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
              finalText.splice(i2, lastSpaceIndex === i2 ? 1 : 0, "\r");
              lastSpaceIndex = -1;
              lineWidth = 0;
            } else {
              lineWidth += cLength;
              lineWidth += trackingOffset;
            }
          }
          currentHeight += fontData.ascent * documentData.finalSize / 100;
          if (this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
            documentData.finalSize -= 1;
            documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
          } else {
            documentData.finalText = finalText;
            len = documentData.finalText.length;
            flag = false;
          }
        }
      }
      lineWidth = -trackingOffset;
      cLength = 0;
      var uncollapsedSpaces = 0;
      var currentChar;
      for (i2 = 0; i2 < len; i2 += 1) {
        newLineFlag = false;
        currentChar = documentData.finalText[i2];
        charCode = currentChar.charCodeAt(0);
        if (charCode === 13 || charCode === 3) {
          uncollapsedSpaces = 0;
          lineWidths.push(lineWidth);
          maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
          lineWidth = -2 * trackingOffset;
          val2 = "";
          newLineFlag = true;
          currentLine += 1;
        } else {
          val2 = currentChar;
        }
        if (fontManager.chars) {
          charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
          cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
        } else {
          cLength = fontManager.measureText(val2, documentData.f, documentData.finalSize);
        }
        if (currentChar === " ") {
          uncollapsedSpaces += cLength + trackingOffset;
        } else {
          lineWidth += cLength + trackingOffset + uncollapsedSpaces;
          uncollapsedSpaces = 0;
        }
        letters.push({
          l: cLength,
          an: cLength,
          add: currentSize,
          n: newLineFlag,
          anIndexes: [],
          val: val2,
          line: currentLine,
          animatorJustifyOffset: 0
        });
        if (anchorGrouping == 2) {
          currentSize += cLength;
          if (val2 === "" || val2 === " " || i2 === len - 1) {
            if (val2 === "" || val2 === " ") {
              currentSize -= cLength;
            }
            while (currentPos <= i2) {
              letters[currentPos].an = currentSize;
              letters[currentPos].ind = index2;
              letters[currentPos].extra = cLength;
              currentPos += 1;
            }
            index2 += 1;
            currentSize = 0;
          }
        } else if (anchorGrouping == 3) {
          currentSize += cLength;
          if (val2 === "" || i2 === len - 1) {
            if (val2 === "") {
              currentSize -= cLength;
            }
            while (currentPos <= i2) {
              letters[currentPos].an = currentSize;
              letters[currentPos].ind = index2;
              letters[currentPos].extra = cLength;
              currentPos += 1;
            }
            currentSize = 0;
            index2 += 1;
          }
        } else {
          letters[index2].ind = index2;
          letters[index2].extra = 0;
          index2 += 1;
        }
      }
      documentData.l = letters;
      maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
      lineWidths.push(lineWidth);
      if (documentData.sz) {
        documentData.boxWidth = documentData.sz[0];
        documentData.justifyOffset = 0;
      } else {
        documentData.boxWidth = maxLineWidth;
        switch (documentData.j) {
          case 1:
            documentData.justifyOffset = -documentData.boxWidth;
            break;
          case 2:
            documentData.justifyOffset = -documentData.boxWidth / 2;
            break;
          default:
            documentData.justifyOffset = 0;
        }
      }
      documentData.lineWidths = lineWidths;
      var animators = data2.a;
      var animatorData;
      var letterData;
      jLen = animators.length;
      var based;
      var ind;
      var indexes = [];
      for (j2 = 0; j2 < jLen; j2 += 1) {
        animatorData = animators[j2];
        if (animatorData.a.sc) {
          documentData.strokeColorAnim = true;
        }
        if (animatorData.a.sw) {
          documentData.strokeWidthAnim = true;
        }
        if (animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb) {
          documentData.fillColorAnim = true;
        }
        ind = 0;
        based = animatorData.s.b;
        for (i2 = 0; i2 < len; i2 += 1) {
          letterData = letters[i2];
          letterData.anIndexes[j2] = ind;
          if (based == 1 && letterData.val !== "" || based == 2 && letterData.val !== "" && letterData.val !== " " || based == 3 && (letterData.n || letterData.val == " " || i2 == len - 1) || based == 4 && (letterData.n || i2 == len - 1)) {
            if (animatorData.s.rn === 1) {
              indexes.push(ind);
            }
            ind += 1;
          }
        }
        data2.a[j2].s.totalChars = ind;
        var currentInd = -1;
        var newInd;
        if (animatorData.s.rn === 1) {
          for (i2 = 0; i2 < len; i2 += 1) {
            letterData = letters[i2];
            if (currentInd != letterData.anIndexes[j2]) {
              currentInd = letterData.anIndexes[j2];
              newInd = indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0];
            }
            letterData.anIndexes[j2] = newInd;
          }
        }
      }
      documentData.yOffset = documentData.finalLineHeight || documentData.finalSize * 1.2;
      documentData.ls = documentData.ls || 0;
      documentData.ascent = fontData.ascent * documentData.finalSize / 100;
    };
    TextProperty.prototype.updateDocumentData = function(newData, index2) {
      index2 = index2 === void 0 ? this.keysIndex : index2;
      var dData = this.copyData({}, this.data.d.k[index2].s);
      dData = this.copyData(dData, newData);
      this.data.d.k[index2].s = dData;
      this.recalculate(index2);
      this.setCurrentData(dData);
      this.elem.addDynamicProperty(this);
    };
    TextProperty.prototype.recalculate = function(index2) {
      var dData = this.data.d.k[index2].s;
      dData.__complete = false;
      this.keysIndex = 0;
      this._isFirstFrame = true;
      this.getValue(dData);
    };
    TextProperty.prototype.canResizeFont = function(_canResize) {
      this.canResize = _canResize;
      this.recalculate(this.keysIndex);
      this.elem.addDynamicProperty(this);
    };
    TextProperty.prototype.setMinimumFontSize = function(_fontValue) {
      this.minimumFontSize = Math.floor(_fontValue) || 1;
      this.recalculate(this.keysIndex);
      this.elem.addDynamicProperty(this);
    };
    var TextSelectorProp = function() {
      var max2 = Math.max;
      var min2 = Math.min;
      var floor2 = Math.floor;
      function TextSelectorPropFactory(elem2, data2) {
        this._currentTextLength = -1;
        this.k = false;
        this.data = data2;
        this.elem = elem2;
        this.comp = elem2.comp;
        this.finalS = 0;
        this.finalE = 0;
        this.initDynamicPropertyContainer(elem2);
        this.s = PropertyFactory.getProp(elem2, data2.s || {
          k: 0
        }, 0, 0, this);
        if ("e" in data2) {
          this.e = PropertyFactory.getProp(elem2, data2.e, 0, 0, this);
        } else {
          this.e = {
            v: 100
          };
        }
        this.o = PropertyFactory.getProp(elem2, data2.o || {
          k: 0
        }, 0, 0, this);
        this.xe = PropertyFactory.getProp(elem2, data2.xe || {
          k: 0
        }, 0, 0, this);
        this.ne = PropertyFactory.getProp(elem2, data2.ne || {
          k: 0
        }, 0, 0, this);
        this.sm = PropertyFactory.getProp(elem2, data2.sm || {
          k: 100
        }, 0, 0, this);
        this.a = PropertyFactory.getProp(elem2, data2.a, 0, 0.01, this);
        if (!this.dynamicProperties.length) {
          this.getValue();
        }
      }
      TextSelectorPropFactory.prototype = {
        getMult: function getMult(ind) {
          if (this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
            this.getValue();
          }
          var x1 = 0;
          var y1 = 0;
          var x2 = 1;
          var y2 = 1;
          if (this.ne.v > 0) {
            x1 = this.ne.v / 100;
          } else {
            y1 = -this.ne.v / 100;
          }
          if (this.xe.v > 0) {
            x2 = 1 - this.xe.v / 100;
          } else {
            y2 = 1 + this.xe.v / 100;
          }
          var easer = BezierFactory.getBezierEasing(x1, y1, x2, y2).get;
          var mult = 0;
          var s = this.finalS;
          var e = this.finalE;
          var type = this.data.sh;
          if (type === 2) {
            if (e === s) {
              mult = ind >= e ? 1 : 0;
            } else {
              mult = max2(0, min2(0.5 / (e - s) + (ind - s) / (e - s), 1));
            }
            mult = easer(mult);
          } else if (type === 3) {
            if (e === s) {
              mult = ind >= e ? 0 : 1;
            } else {
              mult = 1 - max2(0, min2(0.5 / (e - s) + (ind - s) / (e - s), 1));
            }
            mult = easer(mult);
          } else if (type === 4) {
            if (e === s) {
              mult = 0;
            } else {
              mult = max2(0, min2(0.5 / (e - s) + (ind - s) / (e - s), 1));
              if (mult < 0.5) {
                mult *= 2;
              } else {
                mult = 1 - 2 * (mult - 0.5);
              }
            }
            mult = easer(mult);
          } else if (type === 5) {
            if (e === s) {
              mult = 0;
            } else {
              var tot = e - s;
              ind = min2(max2(0, ind + 0.5 - s), e - s);
              var x = -tot / 2 + ind;
              var a = tot / 2;
              mult = Math.sqrt(1 - x * x / (a * a));
            }
            mult = easer(mult);
          } else if (type === 6) {
            if (e === s) {
              mult = 0;
            } else {
              ind = min2(max2(0, ind + 0.5 - s), e - s);
              mult = (1 + Math.cos(Math.PI + Math.PI * 2 * ind / (e - s))) / 2;
            }
            mult = easer(mult);
          } else {
            if (ind >= floor2(s)) {
              if (ind - s < 0) {
                mult = max2(0, min2(min2(e, 1) - (s - ind), 1));
              } else {
                mult = max2(0, min2(e - ind, 1));
              }
            }
            mult = easer(mult);
          }
          if (this.sm.v !== 100) {
            var smoothness = this.sm.v * 0.01;
            if (smoothness === 0) {
              smoothness = 1e-8;
            }
            var threshold = 0.5 - smoothness * 0.5;
            if (mult < threshold) {
              mult = 0;
            } else {
              mult = (mult - threshold) / smoothness;
              if (mult > 1) {
                mult = 1;
              }
            }
          }
          return mult * this.a.v;
        },
        getValue: function getValue(newCharsFlag) {
          this.iterateDynamicProperties();
          this._mdf = newCharsFlag || this._mdf;
          this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;
          if (newCharsFlag && this.data.r === 2) {
            this.e.v = this._currentTextLength;
          }
          var divisor = this.data.r === 2 ? 1 : 100 / this.data.totalChars;
          var o = this.o.v / divisor;
          var s = this.s.v / divisor + o;
          var e = this.e.v / divisor + o;
          if (s > e) {
            var _s = s;
            s = e;
            e = _s;
          }
          this.finalS = s;
          this.finalE = e;
        }
      };
      extendPrototype([DynamicPropertyContainer], TextSelectorPropFactory);
      function getTextSelectorProp(elem2, data2, arr) {
        return new TextSelectorPropFactory(elem2, data2);
      }
      return {
        getTextSelectorProp
      };
    }();
    function TextAnimatorDataProperty(elem2, animatorProps, container2) {
      var defaultData = {
        propType: false
      };
      var getProp = PropertyFactory.getProp;
      var textAnimatorAnimatables = animatorProps.a;
      this.a = {
        r: textAnimatorAnimatables.r ? getProp(elem2, textAnimatorAnimatables.r, 0, degToRads, container2) : defaultData,
        rx: textAnimatorAnimatables.rx ? getProp(elem2, textAnimatorAnimatables.rx, 0, degToRads, container2) : defaultData,
        ry: textAnimatorAnimatables.ry ? getProp(elem2, textAnimatorAnimatables.ry, 0, degToRads, container2) : defaultData,
        sk: textAnimatorAnimatables.sk ? getProp(elem2, textAnimatorAnimatables.sk, 0, degToRads, container2) : defaultData,
        sa: textAnimatorAnimatables.sa ? getProp(elem2, textAnimatorAnimatables.sa, 0, degToRads, container2) : defaultData,
        s: textAnimatorAnimatables.s ? getProp(elem2, textAnimatorAnimatables.s, 1, 0.01, container2) : defaultData,
        a: textAnimatorAnimatables.a ? getProp(elem2, textAnimatorAnimatables.a, 1, 0, container2) : defaultData,
        o: textAnimatorAnimatables.o ? getProp(elem2, textAnimatorAnimatables.o, 0, 0.01, container2) : defaultData,
        p: textAnimatorAnimatables.p ? getProp(elem2, textAnimatorAnimatables.p, 1, 0, container2) : defaultData,
        sw: textAnimatorAnimatables.sw ? getProp(elem2, textAnimatorAnimatables.sw, 0, 0, container2) : defaultData,
        sc: textAnimatorAnimatables.sc ? getProp(elem2, textAnimatorAnimatables.sc, 1, 0, container2) : defaultData,
        fc: textAnimatorAnimatables.fc ? getProp(elem2, textAnimatorAnimatables.fc, 1, 0, container2) : defaultData,
        fh: textAnimatorAnimatables.fh ? getProp(elem2, textAnimatorAnimatables.fh, 0, 0, container2) : defaultData,
        fs: textAnimatorAnimatables.fs ? getProp(elem2, textAnimatorAnimatables.fs, 0, 0.01, container2) : defaultData,
        fb: textAnimatorAnimatables.fb ? getProp(elem2, textAnimatorAnimatables.fb, 0, 0.01, container2) : defaultData,
        t: textAnimatorAnimatables.t ? getProp(elem2, textAnimatorAnimatables.t, 0, 0, container2) : defaultData
      };
      this.s = TextSelectorProp.getTextSelectorProp(elem2, animatorProps.s, container2);
      this.s.t = animatorProps.s.t;
    }
    function TextAnimatorProperty(textData, renderType, elem2) {
      this._isFirstFrame = true;
      this._hasMaskedPath = false;
      this._frameId = -1;
      this._textData = textData;
      this._renderType = renderType;
      this._elem = elem2;
      this._animatorsData = createSizedArray(this._textData.a.length);
      this._pathData = {};
      this._moreOptions = {
        alignment: {}
      };
      this.renderedLetters = [];
      this.lettersChangedFlag = false;
      this.initDynamicPropertyContainer(elem2);
    }
    TextAnimatorProperty.prototype.searchProperties = function() {
      var i2;
      var len = this._textData.a.length;
      var animatorProps;
      var getProp = PropertyFactory.getProp;
      for (i2 = 0; i2 < len; i2 += 1) {
        animatorProps = this._textData.a[i2];
        this._animatorsData[i2] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
      }
      if (this._textData.p && "m" in this._textData.p) {
        this._pathData = {
          a: getProp(this._elem, this._textData.p.a, 0, 0, this),
          f: getProp(this._elem, this._textData.p.f, 0, 0, this),
          l: getProp(this._elem, this._textData.p.l, 0, 0, this),
          r: getProp(this._elem, this._textData.p.r, 0, 0, this),
          p: getProp(this._elem, this._textData.p.p, 0, 0, this),
          m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
        };
        this._hasMaskedPath = true;
      } else {
        this._hasMaskedPath = false;
      }
      this._moreOptions.alignment = getProp(this._elem, this._textData.m.a, 1, 0, this);
    };
    TextAnimatorProperty.prototype.getMeasures = function(documentData, lettersChangedFlag) {
      this.lettersChangedFlag = lettersChangedFlag;
      if (!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
        return;
      }
      this._isFirstFrame = false;
      var alignment = this._moreOptions.alignment.v;
      var animators = this._animatorsData;
      var textData = this._textData;
      var matrixHelper = this.mHelper;
      var renderType = this._renderType;
      var renderedLettersCount = this.renderedLetters.length;
      var xPos;
      var yPos;
      var i2;
      var len;
      var letters = documentData.l;
      var pathInfo;
      var currentLength;
      var currentPoint;
      var segmentLength;
      var flag;
      var pointInd;
      var segmentInd;
      var prevPoint;
      var points;
      var segments;
      var partialLength;
      var totalLength;
      var perc;
      var tanAngle;
      var mask2;
      if (this._hasMaskedPath) {
        mask2 = this._pathData.m;
        if (!this._pathData.n || this._pathData._mdf) {
          var paths = mask2.v;
          if (this._pathData.r.v) {
            paths = paths.reverse();
          }
          pathInfo = {
            tLength: 0,
            segments: []
          };
          len = paths._length - 1;
          var bezierData;
          totalLength = 0;
          for (i2 = 0; i2 < len; i2 += 1) {
            bezierData = bez.buildBezierData(paths.v[i2], paths.v[i2 + 1], [paths.o[i2][0] - paths.v[i2][0], paths.o[i2][1] - paths.v[i2][1]], [paths.i[i2 + 1][0] - paths.v[i2 + 1][0], paths.i[i2 + 1][1] - paths.v[i2 + 1][1]]);
            pathInfo.tLength += bezierData.segmentLength;
            pathInfo.segments.push(bezierData);
            totalLength += bezierData.segmentLength;
          }
          i2 = len;
          if (mask2.v.c) {
            bezierData = bez.buildBezierData(paths.v[i2], paths.v[0], [paths.o[i2][0] - paths.v[i2][0], paths.o[i2][1] - paths.v[i2][1]], [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]);
            pathInfo.tLength += bezierData.segmentLength;
            pathInfo.segments.push(bezierData);
            totalLength += bezierData.segmentLength;
          }
          this._pathData.pi = pathInfo;
        }
        pathInfo = this._pathData.pi;
        currentLength = this._pathData.f.v;
        segmentInd = 0;
        pointInd = 1;
        segmentLength = 0;
        flag = true;
        segments = pathInfo.segments;
        if (currentLength < 0 && mask2.v.c) {
          if (pathInfo.tLength < Math.abs(currentLength)) {
            currentLength = -Math.abs(currentLength) % pathInfo.tLength;
          }
          segmentInd = segments.length - 1;
          points = segments[segmentInd].points;
          pointInd = points.length - 1;
          while (currentLength < 0) {
            currentLength += points[pointInd].partialLength;
            pointInd -= 1;
            if (pointInd < 0) {
              segmentInd -= 1;
              points = segments[segmentInd].points;
              pointInd = points.length - 1;
            }
          }
        }
        points = segments[segmentInd].points;
        prevPoint = points[pointInd - 1];
        currentPoint = points[pointInd];
        partialLength = currentPoint.partialLength;
      }
      len = letters.length;
      xPos = 0;
      yPos = 0;
      var yOff = documentData.finalSize * 1.2 * 0.714;
      var firstLine = true;
      var animatorProps;
      var animatorSelector;
      var j2;
      var jLen;
      var letterValue;
      jLen = animators.length;
      var mult;
      var ind = -1;
      var offf;
      var xPathPos;
      var yPathPos;
      var initPathPos = currentLength;
      var initSegmentInd = segmentInd;
      var initPointInd = pointInd;
      var currentLine = -1;
      var elemOpacity;
      var sc;
      var sw;
      var fc;
      var k2;
      var letterSw;
      var letterSc;
      var letterFc;
      var letterM = "";
      var letterP = this.defaultPropsArray;
      var letterO;
      if (documentData.j === 2 || documentData.j === 1) {
        var animatorJustifyOffset = 0;
        var animatorFirstCharOffset = 0;
        var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
        var lastIndex = 0;
        var isNewLine = true;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (letters[i2].n) {
            if (animatorJustifyOffset) {
              animatorJustifyOffset += animatorFirstCharOffset;
            }
            while (lastIndex < i2) {
              letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
              lastIndex += 1;
            }
            animatorJustifyOffset = 0;
            isNewLine = true;
          } else {
            for (j2 = 0; j2 < jLen; j2 += 1) {
              animatorProps = animators[j2].a;
              if (animatorProps.t.propType) {
                if (isNewLine && documentData.j === 2) {
                  animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
                }
                animatorSelector = animators[j2].s;
                mult = animatorSelector.getMult(letters[i2].anIndexes[j2], textData.a[j2].s.totalChars);
                if (mult.length) {
                  animatorJustifyOffset += animatorProps.t.v * mult[0] * justifyOffsetMult;
                } else {
                  animatorJustifyOffset += animatorProps.t.v * mult * justifyOffsetMult;
                }
              }
            }
            isNewLine = false;
          }
        }
        if (animatorJustifyOffset) {
          animatorJustifyOffset += animatorFirstCharOffset;
        }
        while (lastIndex < i2) {
          letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
          lastIndex += 1;
        }
      }
      for (i2 = 0; i2 < len; i2 += 1) {
        matrixHelper.reset();
        elemOpacity = 1;
        if (letters[i2].n) {
          xPos = 0;
          yPos += documentData.yOffset;
          yPos += firstLine ? 1 : 0;
          currentLength = initPathPos;
          firstLine = false;
          if (this._hasMaskedPath) {
            segmentInd = initSegmentInd;
            pointInd = initPointInd;
            points = segments[segmentInd].points;
            prevPoint = points[pointInd - 1];
            currentPoint = points[pointInd];
            partialLength = currentPoint.partialLength;
            segmentLength = 0;
          }
          letterM = "";
          letterFc = "";
          letterSw = "";
          letterO = "";
          letterP = this.defaultPropsArray;
        } else {
          if (this._hasMaskedPath) {
            if (currentLine !== letters[i2].line) {
              switch (documentData.j) {
                case 1:
                  currentLength += totalLength - documentData.lineWidths[letters[i2].line];
                  break;
                case 2:
                  currentLength += (totalLength - documentData.lineWidths[letters[i2].line]) / 2;
                  break;
              }
              currentLine = letters[i2].line;
            }
            if (ind !== letters[i2].ind) {
              if (letters[ind]) {
                currentLength += letters[ind].extra;
              }
              currentLength += letters[i2].an / 2;
              ind = letters[i2].ind;
            }
            currentLength += alignment[0] * letters[i2].an * 5e-3;
            var animatorOffset = 0;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              animatorProps = animators[j2].a;
              if (animatorProps.p.propType) {
                animatorSelector = animators[j2].s;
                mult = animatorSelector.getMult(letters[i2].anIndexes[j2], textData.a[j2].s.totalChars);
                if (mult.length) {
                  animatorOffset += animatorProps.p.v[0] * mult[0];
                } else {
                  animatorOffset += animatorProps.p.v[0] * mult;
                }
              }
              if (animatorProps.a.propType) {
                animatorSelector = animators[j2].s;
                mult = animatorSelector.getMult(letters[i2].anIndexes[j2], textData.a[j2].s.totalChars);
                if (mult.length) {
                  animatorOffset += animatorProps.a.v[0] * mult[0];
                } else {
                  animatorOffset += animatorProps.a.v[0] * mult;
                }
              }
            }
            flag = true;
            if (this._pathData.a.v) {
              currentLength = letters[0].an * 0.5 + (totalLength - this._pathData.f.v - letters[0].an * 0.5 - letters[letters.length - 1].an * 0.5) * ind / (len - 1);
              currentLength += this._pathData.f.v;
            }
            while (flag) {
              if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
                perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
                xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
                yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
                matrixHelper.translate(-alignment[0] * letters[i2].an * 5e-3, -(alignment[1] * yOff) * 0.01);
                flag = false;
              } else if (points) {
                segmentLength += currentPoint.partialLength;
                pointInd += 1;
                if (pointInd >= points.length) {
                  pointInd = 0;
                  segmentInd += 1;
                  if (!segments[segmentInd]) {
                    if (mask2.v.c) {
                      pointInd = 0;
                      segmentInd = 0;
                      points = segments[segmentInd].points;
                    } else {
                      segmentLength -= currentPoint.partialLength;
                      points = null;
                    }
                  } else {
                    points = segments[segmentInd].points;
                  }
                }
                if (points) {
                  prevPoint = currentPoint;
                  currentPoint = points[pointInd];
                  partialLength = currentPoint.partialLength;
                }
              }
            }
            offf = letters[i2].an / 2 - letters[i2].add;
            matrixHelper.translate(-offf, 0, 0);
          } else {
            offf = letters[i2].an / 2 - letters[i2].add;
            matrixHelper.translate(-offf, 0, 0);
            matrixHelper.translate(-alignment[0] * letters[i2].an * 5e-3, -alignment[1] * yOff * 0.01, 0);
          }
          for (j2 = 0; j2 < jLen; j2 += 1) {
            animatorProps = animators[j2].a;
            if (animatorProps.t.propType) {
              animatorSelector = animators[j2].s;
              mult = animatorSelector.getMult(letters[i2].anIndexes[j2], textData.a[j2].s.totalChars);
              if (xPos !== 0 || documentData.j !== 0) {
                if (this._hasMaskedPath) {
                  if (mult.length) {
                    currentLength += animatorProps.t.v * mult[0];
                  } else {
                    currentLength += animatorProps.t.v * mult;
                  }
                } else if (mult.length) {
                  xPos += animatorProps.t.v * mult[0];
                } else {
                  xPos += animatorProps.t.v * mult;
                }
              }
            }
          }
          if (documentData.strokeWidthAnim) {
            sw = documentData.sw || 0;
          }
          if (documentData.strokeColorAnim) {
            if (documentData.sc) {
              sc = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
            } else {
              sc = [0, 0, 0];
            }
          }
          if (documentData.fillColorAnim && documentData.fc) {
            fc = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
          }
          for (j2 = 0; j2 < jLen; j2 += 1) {
            animatorProps = animators[j2].a;
            if (animatorProps.a.propType) {
              animatorSelector = animators[j2].s;
              mult = animatorSelector.getMult(letters[i2].anIndexes[j2], textData.a[j2].s.totalChars);
              if (mult.length) {
                matrixHelper.translate(-animatorProps.a.v[0] * mult[0], -animatorProps.a.v[1] * mult[1], animatorProps.a.v[2] * mult[2]);
              } else {
                matrixHelper.translate(-animatorProps.a.v[0] * mult, -animatorProps.a.v[1] * mult, animatorProps.a.v[2] * mult);
              }
            }
          }
          for (j2 = 0; j2 < jLen; j2 += 1) {
            animatorProps = animators[j2].a;
            if (animatorProps.s.propType) {
              animatorSelector = animators[j2].s;
              mult = animatorSelector.getMult(letters[i2].anIndexes[j2], textData.a[j2].s.totalChars);
              if (mult.length) {
                matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult[0], 1 + (animatorProps.s.v[1] - 1) * mult[1], 1);
              } else {
                matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult, 1 + (animatorProps.s.v[1] - 1) * mult, 1);
              }
            }
          }
          for (j2 = 0; j2 < jLen; j2 += 1) {
            animatorProps = animators[j2].a;
            animatorSelector = animators[j2].s;
            mult = animatorSelector.getMult(letters[i2].anIndexes[j2], textData.a[j2].s.totalChars);
            if (animatorProps.sk.propType) {
              if (mult.length) {
                matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
              } else {
                matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
              }
            }
            if (animatorProps.r.propType) {
              if (mult.length) {
                matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
              } else {
                matrixHelper.rotateZ(-animatorProps.r.v * mult);
              }
            }
            if (animatorProps.ry.propType) {
              if (mult.length) {
                matrixHelper.rotateY(animatorProps.ry.v * mult[1]);
              } else {
                matrixHelper.rotateY(animatorProps.ry.v * mult);
              }
            }
            if (animatorProps.rx.propType) {
              if (mult.length) {
                matrixHelper.rotateX(animatorProps.rx.v * mult[0]);
              } else {
                matrixHelper.rotateX(animatorProps.rx.v * mult);
              }
            }
            if (animatorProps.o.propType) {
              if (mult.length) {
                elemOpacity += (animatorProps.o.v * mult[0] - elemOpacity) * mult[0];
              } else {
                elemOpacity += (animatorProps.o.v * mult - elemOpacity) * mult;
              }
            }
            if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
              if (mult.length) {
                sw += animatorProps.sw.v * mult[0];
              } else {
                sw += animatorProps.sw.v * mult;
              }
            }
            if (documentData.strokeColorAnim && animatorProps.sc.propType) {
              for (k2 = 0; k2 < 3; k2 += 1) {
                if (mult.length) {
                  sc[k2] += (animatorProps.sc.v[k2] - sc[k2]) * mult[0];
                } else {
                  sc[k2] += (animatorProps.sc.v[k2] - sc[k2]) * mult;
                }
              }
            }
            if (documentData.fillColorAnim && documentData.fc) {
              if (animatorProps.fc.propType) {
                for (k2 = 0; k2 < 3; k2 += 1) {
                  if (mult.length) {
                    fc[k2] += (animatorProps.fc.v[k2] - fc[k2]) * mult[0];
                  } else {
                    fc[k2] += (animatorProps.fc.v[k2] - fc[k2]) * mult;
                  }
                }
              }
              if (animatorProps.fh.propType) {
                if (mult.length) {
                  fc = addHueToRGB(fc, animatorProps.fh.v * mult[0]);
                } else {
                  fc = addHueToRGB(fc, animatorProps.fh.v * mult);
                }
              }
              if (animatorProps.fs.propType) {
                if (mult.length) {
                  fc = addSaturationToRGB(fc, animatorProps.fs.v * mult[0]);
                } else {
                  fc = addSaturationToRGB(fc, animatorProps.fs.v * mult);
                }
              }
              if (animatorProps.fb.propType) {
                if (mult.length) {
                  fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult[0]);
                } else {
                  fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult);
                }
              }
            }
          }
          for (j2 = 0; j2 < jLen; j2 += 1) {
            animatorProps = animators[j2].a;
            if (animatorProps.p.propType) {
              animatorSelector = animators[j2].s;
              mult = animatorSelector.getMult(letters[i2].anIndexes[j2], textData.a[j2].s.totalChars);
              if (this._hasMaskedPath) {
                if (mult.length) {
                  matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
                } else {
                  matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                }
              } else if (mult.length) {
                matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
              } else {
                matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
              }
            }
          }
          if (documentData.strokeWidthAnim) {
            letterSw = sw < 0 ? 0 : sw;
          }
          if (documentData.strokeColorAnim) {
            letterSc = "rgb(" + Math.round(sc[0] * 255) + "," + Math.round(sc[1] * 255) + "," + Math.round(sc[2] * 255) + ")";
          }
          if (documentData.fillColorAnim && documentData.fc) {
            letterFc = "rgb(" + Math.round(fc[0] * 255) + "," + Math.round(fc[1] * 255) + "," + Math.round(fc[2] * 255) + ")";
          }
          if (this._hasMaskedPath) {
            matrixHelper.translate(0, -documentData.ls);
            matrixHelper.translate(0, alignment[1] * yOff * 0.01 + yPos, 0);
            if (this._pathData.p.v) {
              tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
              var rot = Math.atan(tanAngle) * 180 / Math.PI;
              if (currentPoint.point[0] < prevPoint.point[0]) {
                rot += 180;
              }
              matrixHelper.rotate(-rot * Math.PI / 180);
            }
            matrixHelper.translate(xPathPos, yPathPos, 0);
            currentLength -= alignment[0] * letters[i2].an * 5e-3;
            if (letters[i2 + 1] && ind !== letters[i2 + 1].ind) {
              currentLength += letters[i2].an / 2;
              currentLength += documentData.tr * 1e-3 * documentData.finalSize;
            }
          } else {
            matrixHelper.translate(xPos, yPos, 0);
            if (documentData.ps) {
              matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
            }
            switch (documentData.j) {
              case 1:
                matrixHelper.translate(letters[i2].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i2].line]), 0, 0);
                break;
              case 2:
                matrixHelper.translate(letters[i2].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i2].line]) / 2, 0, 0);
                break;
            }
            matrixHelper.translate(0, -documentData.ls);
            matrixHelper.translate(offf, 0, 0);
            matrixHelper.translate(alignment[0] * letters[i2].an * 5e-3, alignment[1] * yOff * 0.01, 0);
            xPos += letters[i2].l + documentData.tr * 1e-3 * documentData.finalSize;
          }
          if (renderType === "html") {
            letterM = matrixHelper.toCSS();
          } else if (renderType === "svg") {
            letterM = matrixHelper.to2dCSS();
          } else {
            letterP = [matrixHelper.props[0], matrixHelper.props[1], matrixHelper.props[2], matrixHelper.props[3], matrixHelper.props[4], matrixHelper.props[5], matrixHelper.props[6], matrixHelper.props[7], matrixHelper.props[8], matrixHelper.props[9], matrixHelper.props[10], matrixHelper.props[11], matrixHelper.props[12], matrixHelper.props[13], matrixHelper.props[14], matrixHelper.props[15]];
          }
          letterO = elemOpacity;
        }
        if (renderedLettersCount <= i2) {
          letterValue = new LetterProps(letterO, letterSw, letterSc, letterFc, letterM, letterP);
          this.renderedLetters.push(letterValue);
          renderedLettersCount += 1;
          this.lettersChangedFlag = true;
        } else {
          letterValue = this.renderedLetters[i2];
          this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
        }
      }
    };
    TextAnimatorProperty.prototype.getValue = function() {
      if (this._elem.globalData.frameId === this._frameId) {
        return;
      }
      this._frameId = this._elem.globalData.frameId;
      this.iterateDynamicProperties();
    };
    TextAnimatorProperty.prototype.mHelper = new Matrix();
    TextAnimatorProperty.prototype.defaultPropsArray = [];
    extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);
    function ITextElement() {
    }
    ITextElement.prototype.initElement = function(data2, globalData2, comp2) {
      this.lettersChangedFlag = true;
      this.initFrame();
      this.initBaseData(data2, globalData2, comp2);
      this.textProperty = new TextProperty(this, data2.t, this.dynamicProperties);
      this.textAnimator = new TextAnimatorProperty(data2.t, this.renderType, this);
      this.initTransform(data2, globalData2, comp2);
      this.initHierarchy();
      this.initRenderable();
      this.initRendererElement();
      this.createContainerElements();
      this.createRenderableComponents();
      this.createContent();
      this.hide();
      this.textAnimator.searchProperties(this.dynamicProperties);
    };
    ITextElement.prototype.prepareFrame = function(num) {
      this._mdf = false;
      this.prepareRenderableFrame(num);
      this.prepareProperties(num, this.isInRange);
    };
    ITextElement.prototype.createPathShape = function(matrixHelper, shapes) {
      var j2;
      var jLen = shapes.length;
      var pathNodes;
      var shapeStr = "";
      for (j2 = 0; j2 < jLen; j2 += 1) {
        if (shapes[j2].ty === "sh") {
          pathNodes = shapes[j2].ks.k;
          shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
        }
      }
      return shapeStr;
    };
    ITextElement.prototype.updateDocumentData = function(newData, index2) {
      this.textProperty.updateDocumentData(newData, index2);
    };
    ITextElement.prototype.canResizeFont = function(_canResize) {
      this.textProperty.canResizeFont(_canResize);
    };
    ITextElement.prototype.setMinimumFontSize = function(_fontSize) {
      this.textProperty.setMinimumFontSize(_fontSize);
    };
    ITextElement.prototype.applyTextPropertiesToMatrix = function(documentData, matrixHelper, lineNumber, xPos, yPos) {
      if (documentData.ps) {
        matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
      }
      matrixHelper.translate(0, -documentData.ls, 0);
      switch (documentData.j) {
        case 1:
          matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]), 0, 0);
          break;
        case 2:
          matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]) / 2, 0, 0);
          break;
      }
      matrixHelper.translate(xPos, yPos, 0);
    };
    ITextElement.prototype.buildColor = function(colorData) {
      return "rgb(" + Math.round(colorData[0] * 255) + "," + Math.round(colorData[1] * 255) + "," + Math.round(colorData[2] * 255) + ")";
    };
    ITextElement.prototype.emptyProp = new LetterProps();
    ITextElement.prototype.destroy = function() {
    };
    ITextElement.prototype.validateText = function() {
      if (this.textProperty._mdf || this.textProperty._isFirstFrame) {
        this.buildNewText();
        this.textProperty._isFirstFrame = false;
        this.textProperty._mdf = false;
      }
    };
    var emptyShapeData = {
      shapes: []
    };
    function SVGTextLottieElement(data2, globalData2, comp2) {
      this.textSpans = [];
      this.renderType = "svg";
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], SVGTextLottieElement);
    SVGTextLottieElement.prototype.createContent = function() {
      if (this.data.singleShape && !this.globalData.fontManager.chars) {
        this.textContainer = createNS("text");
      }
    };
    SVGTextLottieElement.prototype.buildTextContents = function(textArray) {
      var i2 = 0;
      var len = textArray.length;
      var textContents = [];
      var currentTextContent = "";
      while (i2 < len) {
        if (textArray[i2] === String.fromCharCode(13) || textArray[i2] === String.fromCharCode(3)) {
          textContents.push(currentTextContent);
          currentTextContent = "";
        } else {
          currentTextContent += textArray[i2];
        }
        i2 += 1;
      }
      textContents.push(currentTextContent);
      return textContents;
    };
    SVGTextLottieElement.prototype.buildShapeData = function(data2, scale2) {
      if (data2.shapes && data2.shapes.length) {
        var shape = data2.shapes[0];
        if (shape.it) {
          var shapeItem = shape.it[shape.it.length - 1];
          if (shapeItem.s) {
            shapeItem.s.k[0] = scale2;
            shapeItem.s.k[1] = scale2;
          }
        }
      }
      return data2;
    };
    SVGTextLottieElement.prototype.buildNewText = function() {
      this.addDynamicProperty(this);
      var i2;
      var len;
      var documentData = this.textProperty.currentData;
      this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);
      if (documentData.fc) {
        this.layerElement.setAttribute("fill", this.buildColor(documentData.fc));
      } else {
        this.layerElement.setAttribute("fill", "rgba(0,0,0,0)");
      }
      if (documentData.sc) {
        this.layerElement.setAttribute("stroke", this.buildColor(documentData.sc));
        this.layerElement.setAttribute("stroke-width", documentData.sw);
      }
      this.layerElement.setAttribute("font-size", documentData.finalSize);
      var fontData = this.globalData.fontManager.getFontByName(documentData.f);
      if (fontData.fClass) {
        this.layerElement.setAttribute("class", fontData.fClass);
      } else {
        this.layerElement.setAttribute("font-family", fontData.fFamily);
        var fWeight = documentData.fWeight;
        var fStyle = documentData.fStyle;
        this.layerElement.setAttribute("font-style", fStyle);
        this.layerElement.setAttribute("font-weight", fWeight);
      }
      this.layerElement.setAttribute("aria-label", documentData.t);
      var letters = documentData.l || [];
      var usesGlyphs = !!this.globalData.fontManager.chars;
      len = letters.length;
      var tSpan;
      var matrixHelper = this.mHelper;
      var shapeStr = "";
      var singleShape = this.data.singleShape;
      var xPos = 0;
      var yPos = 0;
      var firstLine = true;
      var trackingOffset = documentData.tr * 1e-3 * documentData.finalSize;
      if (singleShape && !usesGlyphs && !documentData.sz) {
        var tElement = this.textContainer;
        var justify = "start";
        switch (documentData.j) {
          case 1:
            justify = "end";
            break;
          case 2:
            justify = "middle";
            break;
          default:
            justify = "start";
            break;
        }
        tElement.setAttribute("text-anchor", justify);
        tElement.setAttribute("letter-spacing", trackingOffset);
        var textContent = this.buildTextContents(documentData.finalText);
        len = textContent.length;
        yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;
        for (i2 = 0; i2 < len; i2 += 1) {
          tSpan = this.textSpans[i2].span || createNS("tspan");
          tSpan.textContent = textContent[i2];
          tSpan.setAttribute("x", 0);
          tSpan.setAttribute("y", yPos);
          tSpan.style.display = "inherit";
          tElement.appendChild(tSpan);
          if (!this.textSpans[i2]) {
            this.textSpans[i2] = {
              span: null,
              glyph: null
            };
          }
          this.textSpans[i2].span = tSpan;
          yPos += documentData.finalLineHeight;
        }
        this.layerElement.appendChild(tElement);
      } else {
        var cachedSpansLength = this.textSpans.length;
        var charData;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (!this.textSpans[i2]) {
            this.textSpans[i2] = {
              span: null,
              childSpan: null,
              glyph: null
            };
          }
          if (!usesGlyphs || !singleShape || i2 === 0) {
            tSpan = cachedSpansLength > i2 ? this.textSpans[i2].span : createNS(usesGlyphs ? "g" : "text");
            if (cachedSpansLength <= i2) {
              tSpan.setAttribute("stroke-linecap", "butt");
              tSpan.setAttribute("stroke-linejoin", "round");
              tSpan.setAttribute("stroke-miterlimit", "4");
              this.textSpans[i2].span = tSpan;
              if (usesGlyphs) {
                var childSpan = createNS("g");
                tSpan.appendChild(childSpan);
                this.textSpans[i2].childSpan = childSpan;
              }
              this.textSpans[i2].span = tSpan;
              this.layerElement.appendChild(tSpan);
            }
            tSpan.style.display = "inherit";
          }
          matrixHelper.reset();
          if (singleShape) {
            if (letters[i2].n) {
              xPos = -trackingOffset;
              yPos += documentData.yOffset;
              yPos += firstLine ? 1 : 0;
              firstLine = false;
            }
            this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i2].line, xPos, yPos);
            xPos += letters[i2].l || 0;
            xPos += trackingOffset;
          }
          if (usesGlyphs) {
            charData = this.globalData.fontManager.getCharData(documentData.finalText[i2], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
            var glyphElement;
            if (charData.t === 1) {
              glyphElement = new SVGCompElement(charData.data, this.globalData, this);
            } else {
              var data2 = emptyShapeData;
              if (charData.data && charData.data.shapes) {
                data2 = this.buildShapeData(charData.data, documentData.finalSize);
              }
              glyphElement = new SVGShapeElement(data2, this.globalData, this);
            }
            if (this.textSpans[i2].glyph) {
              var glyph = this.textSpans[i2].glyph;
              this.textSpans[i2].childSpan.removeChild(glyph.layerElement);
              glyph.destroy();
            }
            this.textSpans[i2].glyph = glyphElement;
            glyphElement._debug = true;
            glyphElement.prepareFrame(0);
            glyphElement.renderFrame();
            this.textSpans[i2].childSpan.appendChild(glyphElement.layerElement);
            if (charData.t === 1) {
              this.textSpans[i2].childSpan.setAttribute("transform", "scale(" + documentData.finalSize / 100 + "," + documentData.finalSize / 100 + ")");
            }
          } else {
            if (singleShape) {
              tSpan.setAttribute("transform", "translate(" + matrixHelper.props[12] + "," + matrixHelper.props[13] + ")");
            }
            tSpan.textContent = letters[i2].val;
            tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
          }
        }
        if (singleShape && tSpan) {
          tSpan.setAttribute("d", shapeStr);
        }
      }
      while (i2 < this.textSpans.length) {
        this.textSpans[i2].span.style.display = "none";
        i2 += 1;
      }
      this._sizeChanged = true;
    };
    SVGTextLottieElement.prototype.sourceRectAtTime = function() {
      this.prepareFrame(this.comp.renderedFrame - this.data.st);
      this.renderInnerContent();
      if (this._sizeChanged) {
        this._sizeChanged = false;
        var textBox = this.layerElement.getBBox();
        this.bbox = {
          top: textBox.y,
          left: textBox.x,
          width: textBox.width,
          height: textBox.height
        };
      }
      return this.bbox;
    };
    SVGTextLottieElement.prototype.getValue = function() {
      var i2;
      var len = this.textSpans.length;
      var glyphElement;
      this.renderedFrame = this.comp.renderedFrame;
      for (i2 = 0; i2 < len; i2 += 1) {
        glyphElement = this.textSpans[i2].glyph;
        if (glyphElement) {
          glyphElement.prepareFrame(this.comp.renderedFrame - this.data.st);
          if (glyphElement._mdf) {
            this._mdf = true;
          }
        }
      }
    };
    SVGTextLottieElement.prototype.renderInnerContent = function() {
      this.validateText();
      if (!this.data.singleShape || this._mdf) {
        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
        if (this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {
          this._sizeChanged = true;
          var i2;
          var len;
          var renderedLetters = this.textAnimator.renderedLetters;
          var letters = this.textProperty.currentData.l;
          len = letters.length;
          var renderedLetter;
          var textSpan;
          var glyphElement;
          for (i2 = 0; i2 < len; i2 += 1) {
            if (!letters[i2].n) {
              renderedLetter = renderedLetters[i2];
              textSpan = this.textSpans[i2].span;
              glyphElement = this.textSpans[i2].glyph;
              if (glyphElement) {
                glyphElement.renderFrame();
              }
              if (renderedLetter._mdf.m) {
                textSpan.setAttribute("transform", renderedLetter.m);
              }
              if (renderedLetter._mdf.o) {
                textSpan.setAttribute("opacity", renderedLetter.o);
              }
              if (renderedLetter._mdf.sw) {
                textSpan.setAttribute("stroke-width", renderedLetter.sw);
              }
              if (renderedLetter._mdf.sc) {
                textSpan.setAttribute("stroke", renderedLetter.sc);
              }
              if (renderedLetter._mdf.fc) {
                textSpan.setAttribute("fill", renderedLetter.fc);
              }
            }
          }
        }
      }
    };
    function ISolidElement(data2, globalData2, comp2) {
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([IImageElement], ISolidElement);
    ISolidElement.prototype.createContent = function() {
      var rect = createNS("rect");
      rect.setAttribute("width", this.data.sw);
      rect.setAttribute("height", this.data.sh);
      rect.setAttribute("fill", this.data.sc);
      this.layerElement.appendChild(rect);
    };
    function NullElement(data2, globalData2, comp2) {
      this.initFrame();
      this.initBaseData(data2, globalData2, comp2);
      this.initFrame();
      this.initTransform(data2, globalData2, comp2);
      this.initHierarchy();
    }
    NullElement.prototype.prepareFrame = function(num) {
      this.prepareProperties(num, true);
    };
    NullElement.prototype.renderFrame = function() {
    };
    NullElement.prototype.getBaseElement = function() {
      return null;
    };
    NullElement.prototype.destroy = function() {
    };
    NullElement.prototype.sourceRectAtTime = function() {
    };
    NullElement.prototype.hide = function() {
    };
    extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement], NullElement);
    function SVGRendererBase() {
    }
    extendPrototype([BaseRenderer], SVGRendererBase);
    SVGRendererBase.prototype.createNull = function(data2) {
      return new NullElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.createShape = function(data2) {
      return new SVGShapeElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.createText = function(data2) {
      return new SVGTextLottieElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.createImage = function(data2) {
      return new IImageElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.createSolid = function(data2) {
      return new ISolidElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.configAnimation = function(animData) {
      this.svgElement.setAttribute("xmlns", "http://www.w3.org/2000/svg");
      this.svgElement.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
      if (this.renderConfig.viewBoxSize) {
        this.svgElement.setAttribute("viewBox", this.renderConfig.viewBoxSize);
      } else {
        this.svgElement.setAttribute("viewBox", "0 0 " + animData.w + " " + animData.h);
      }
      if (!this.renderConfig.viewBoxOnly) {
        this.svgElement.setAttribute("width", animData.w);
        this.svgElement.setAttribute("height", animData.h);
        this.svgElement.style.width = "100%";
        this.svgElement.style.height = "100%";
        this.svgElement.style.transform = "translate3d(0,0,0)";
        this.svgElement.style.contentVisibility = this.renderConfig.contentVisibility;
      }
      if (this.renderConfig.width) {
        this.svgElement.setAttribute("width", this.renderConfig.width);
      }
      if (this.renderConfig.height) {
        this.svgElement.setAttribute("height", this.renderConfig.height);
      }
      if (this.renderConfig.className) {
        this.svgElement.setAttribute("class", this.renderConfig.className);
      }
      if (this.renderConfig.id) {
        this.svgElement.setAttribute("id", this.renderConfig.id);
      }
      if (this.renderConfig.focusable !== void 0) {
        this.svgElement.setAttribute("focusable", this.renderConfig.focusable);
      }
      this.svgElement.setAttribute("preserveAspectRatio", this.renderConfig.preserveAspectRatio);
      this.animationItem.wrapper.appendChild(this.svgElement);
      var defs = this.globalData.defs;
      this.setupGlobalData(animData, defs);
      this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
      this.data = animData;
      var maskElement = createNS("clipPath");
      var rect = createNS("rect");
      rect.setAttribute("width", animData.w);
      rect.setAttribute("height", animData.h);
      rect.setAttribute("x", 0);
      rect.setAttribute("y", 0);
      var maskId = createElementID();
      maskElement.setAttribute("id", maskId);
      maskElement.appendChild(rect);
      this.layerElement.setAttribute("clip-path", "url(" + getLocationHref() + "#" + maskId + ")");
      defs.appendChild(maskElement);
      this.layers = animData.layers;
      this.elements = createSizedArray(animData.layers.length);
    };
    SVGRendererBase.prototype.destroy = function() {
      if (this.animationItem.wrapper) {
        this.animationItem.wrapper.innerText = "";
      }
      this.layerElement = null;
      this.globalData.defs = null;
      var i2;
      var len = this.layers ? this.layers.length : 0;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.elements[i2] && this.elements[i2].destroy) {
          this.elements[i2].destroy();
        }
      }
      this.elements.length = 0;
      this.destroyed = true;
      this.animationItem = null;
    };
    SVGRendererBase.prototype.updateContainerSize = function() {
    };
    SVGRendererBase.prototype.findIndexByInd = function(ind) {
      var i2 = 0;
      var len = this.layers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.layers[i2].ind === ind) {
          return i2;
        }
      }
      return -1;
    };
    SVGRendererBase.prototype.buildItem = function(pos) {
      var elements = this.elements;
      if (elements[pos] || this.layers[pos].ty === 99) {
        return;
      }
      elements[pos] = true;
      var element = this.createItem(this.layers[pos]);
      elements[pos] = element;
      if (getExpressionsPlugin()) {
        if (this.layers[pos].ty === 0) {
          this.globalData.projectInterface.registerComposition(element);
        }
        element.initExpressions();
      }
      this.appendElementInPos(element, pos);
      if (this.layers[pos].tt) {
        var elementIndex = "tp" in this.layers[pos] ? this.findIndexByInd(this.layers[pos].tp) : pos - 1;
        if (elementIndex === -1) {
          return;
        }
        if (!this.elements[elementIndex] || this.elements[elementIndex] === true) {
          this.buildItem(elementIndex);
          this.addPendingElement(element);
        } else {
          var matteElement = elements[elementIndex];
          var matteMask = matteElement.getMatte(this.layers[pos].tt);
          element.setMatte(matteMask);
        }
      }
    };
    SVGRendererBase.prototype.checkPendingElements = function() {
      while (this.pendingElements.length) {
        var element = this.pendingElements.pop();
        element.checkParenting();
        if (element.data.tt) {
          var i2 = 0;
          var len = this.elements.length;
          while (i2 < len) {
            if (this.elements[i2] === element) {
              var elementIndex = "tp" in element.data ? this.findIndexByInd(element.data.tp) : i2 - 1;
              var matteElement = this.elements[elementIndex];
              var matteMask = matteElement.getMatte(this.layers[i2].tt);
              element.setMatte(matteMask);
              break;
            }
            i2 += 1;
          }
        }
      }
    };
    SVGRendererBase.prototype.renderFrame = function(num) {
      if (this.renderedFrame === num || this.destroyed) {
        return;
      }
      if (num === null) {
        num = this.renderedFrame;
      } else {
        this.renderedFrame = num;
      }
      this.globalData.frameNum = num;
      this.globalData.frameId += 1;
      this.globalData.projectInterface.currentFrame = num;
      this.globalData._mdf = false;
      var i2;
      var len = this.layers.length;
      if (!this.completeLayers) {
        this.checkLayers(num);
      }
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (this.completeLayers || this.elements[i2]) {
          this.elements[i2].prepareFrame(num - this.layers[i2].st);
        }
      }
      if (this.globalData._mdf) {
        for (i2 = 0; i2 < len; i2 += 1) {
          if (this.completeLayers || this.elements[i2]) {
            this.elements[i2].renderFrame();
          }
        }
      }
    };
    SVGRendererBase.prototype.appendElementInPos = function(element, pos) {
      var newElement = element.getBaseElement();
      if (!newElement) {
        return;
      }
      var i2 = 0;
      var nextElement;
      while (i2 < pos) {
        if (this.elements[i2] && this.elements[i2] !== true && this.elements[i2].getBaseElement()) {
          nextElement = this.elements[i2].getBaseElement();
        }
        i2 += 1;
      }
      if (nextElement) {
        this.layerElement.insertBefore(newElement, nextElement);
      } else {
        this.layerElement.appendChild(newElement);
      }
    };
    SVGRendererBase.prototype.hide = function() {
      this.layerElement.style.display = "none";
    };
    SVGRendererBase.prototype.show = function() {
      this.layerElement.style.display = "block";
    };
    function ICompElement() {
    }
    extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);
    ICompElement.prototype.initElement = function(data2, globalData2, comp2) {
      this.initFrame();
      this.initBaseData(data2, globalData2, comp2);
      this.initTransform(data2, globalData2, comp2);
      this.initRenderable();
      this.initHierarchy();
      this.initRendererElement();
      this.createContainerElements();
      this.createRenderableComponents();
      if (this.data.xt || !globalData2.progressiveLoad) {
        this.buildAllItems();
      }
      this.hide();
    };
    ICompElement.prototype.prepareFrame = function(num) {
      this._mdf = false;
      this.prepareRenderableFrame(num);
      this.prepareProperties(num, this.isInRange);
      if (!this.isInRange && !this.data.xt) {
        return;
      }
      if (!this.tm._placeholder) {
        var timeRemapped = this.tm.v;
        if (timeRemapped === this.data.op) {
          timeRemapped = this.data.op - 1;
        }
        this.renderedFrame = timeRemapped;
      } else {
        this.renderedFrame = num / this.data.sr;
      }
      var i2;
      var len = this.elements.length;
      if (!this.completeLayers) {
        this.checkLayers(this.renderedFrame);
      }
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (this.completeLayers || this.elements[i2]) {
          this.elements[i2].prepareFrame(this.renderedFrame - this.layers[i2].st);
          if (this.elements[i2]._mdf) {
            this._mdf = true;
          }
        }
      }
    };
    ICompElement.prototype.renderInnerContent = function() {
      var i2;
      var len = this.layers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.completeLayers || this.elements[i2]) {
          this.elements[i2].renderFrame();
        }
      }
    };
    ICompElement.prototype.setElements = function(elems) {
      this.elements = elems;
    };
    ICompElement.prototype.getElements = function() {
      return this.elements;
    };
    ICompElement.prototype.destroyElements = function() {
      var i2;
      var len = this.layers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.elements[i2]) {
          this.elements[i2].destroy();
        }
      }
    };
    ICompElement.prototype.destroy = function() {
      this.destroyElements();
      this.destroyBaseElement();
    };
    function SVGCompElement(data2, globalData2, comp2) {
      this.layers = data2.layers;
      this.supports3d = true;
      this.completeLayers = false;
      this.pendingElements = [];
      this.elements = this.layers ? createSizedArray(this.layers.length) : [];
      this.initElement(data2, globalData2, comp2);
      this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
        _placeholder: true
      };
    }
    extendPrototype([SVGRendererBase, ICompElement, SVGBaseElement], SVGCompElement);
    SVGCompElement.prototype.createComp = function(data2) {
      return new SVGCompElement(data2, this.globalData, this);
    };
    function SVGRenderer(animationItem, config) {
      this.animationItem = animationItem;
      this.layers = null;
      this.renderedFrame = -1;
      this.svgElement = createNS("svg");
      var ariaLabel = "";
      if (config && config.title) {
        var titleElement = createNS("title");
        var titleId = createElementID();
        titleElement.setAttribute("id", titleId);
        titleElement.textContent = config.title;
        this.svgElement.appendChild(titleElement);
        ariaLabel += titleId;
      }
      if (config && config.description) {
        var descElement = createNS("desc");
        var descId = createElementID();
        descElement.setAttribute("id", descId);
        descElement.textContent = config.description;
        this.svgElement.appendChild(descElement);
        ariaLabel += " " + descId;
      }
      if (ariaLabel) {
        this.svgElement.setAttribute("aria-labelledby", ariaLabel);
      }
      var defs = createNS("defs");
      this.svgElement.appendChild(defs);
      var maskElement = createNS("g");
      this.svgElement.appendChild(maskElement);
      this.layerElement = maskElement;
      this.renderConfig = {
        preserveAspectRatio: config && config.preserveAspectRatio || "xMidYMid meet",
        imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || "xMidYMid slice",
        contentVisibility: config && config.contentVisibility || "visible",
        progressiveLoad: config && config.progressiveLoad || false,
        hideOnTransparent: !(config && config.hideOnTransparent === false),
        viewBoxOnly: config && config.viewBoxOnly || false,
        viewBoxSize: config && config.viewBoxSize || false,
        className: config && config.className || "",
        id: config && config.id || "",
        focusable: config && config.focusable,
        filterSize: {
          width: config && config.filterSize && config.filterSize.width || "100%",
          height: config && config.filterSize && config.filterSize.height || "100%",
          x: config && config.filterSize && config.filterSize.x || "0%",
          y: config && config.filterSize && config.filterSize.y || "0%"
        },
        width: config && config.width,
        height: config && config.height,
        runExpressions: !config || config.runExpressions === void 0 || config.runExpressions
      };
      this.globalData = {
        _mdf: false,
        frameNum: -1,
        defs,
        renderConfig: this.renderConfig
      };
      this.elements = [];
      this.pendingElements = [];
      this.destroyed = false;
      this.rendererType = "svg";
    }
    extendPrototype([SVGRendererBase], SVGRenderer);
    SVGRenderer.prototype.createComp = function(data2) {
      return new SVGCompElement(data2, this.globalData, this);
    };
    function ShapeTransformManager() {
      this.sequences = {};
      this.sequenceList = [];
      this.transform_key_count = 0;
    }
    ShapeTransformManager.prototype = {
      addTransformSequence: function addTransformSequence(transforms) {
        var i2;
        var len = transforms.length;
        var key2 = "_";
        for (i2 = 0; i2 < len; i2 += 1) {
          key2 += transforms[i2].transform.key + "_";
        }
        var sequence = this.sequences[key2];
        if (!sequence) {
          sequence = {
            transforms: [].concat(transforms),
            finalTransform: new Matrix(),
            _mdf: false
          };
          this.sequences[key2] = sequence;
          this.sequenceList.push(sequence);
        }
        return sequence;
      },
      processSequence: function processSequence(sequence, isFirstFrame) {
        var i2 = 0;
        var len = sequence.transforms.length;
        var _mdf = isFirstFrame;
        while (i2 < len && !isFirstFrame) {
          if (sequence.transforms[i2].transform.mProps._mdf) {
            _mdf = true;
            break;
          }
          i2 += 1;
        }
        if (_mdf) {
          sequence.finalTransform.reset();
          for (i2 = len - 1; i2 >= 0; i2 -= 1) {
            sequence.finalTransform.multiply(sequence.transforms[i2].transform.mProps.v);
          }
        }
        sequence._mdf = _mdf;
      },
      processSequences: function processSequences(isFirstFrame) {
        var i2;
        var len = this.sequenceList.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.processSequence(this.sequenceList[i2], isFirstFrame);
        }
      },
      getNewKey: function getNewKey() {
        this.transform_key_count += 1;
        return "_" + this.transform_key_count;
      }
    };
    var lumaLoader = function lumaLoader2() {
      var id2 = "__lottie_element_luma_buffer";
      var lumaBuffer = null;
      var lumaBufferCtx = null;
      var svg = null;
      function createLumaSvgFilter() {
        var _svg = createNS("svg");
        var fil = createNS("filter");
        var matrix = createNS("feColorMatrix");
        fil.setAttribute("id", id2);
        matrix.setAttribute("type", "matrix");
        matrix.setAttribute("color-interpolation-filters", "sRGB");
        matrix.setAttribute("values", "0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0");
        fil.appendChild(matrix);
        _svg.appendChild(fil);
        _svg.setAttribute("id", id2 + "_svg");
        if (featureSupport.svgLumaHidden) {
          _svg.style.display = "none";
        }
        return _svg;
      }
      function loadLuma() {
        if (!lumaBuffer) {
          svg = createLumaSvgFilter();
          document.body.appendChild(svg);
          lumaBuffer = createTag("canvas");
          lumaBufferCtx = lumaBuffer.getContext("2d");
          lumaBufferCtx.filter = "url(#" + id2 + ")";
          lumaBufferCtx.fillStyle = "rgba(0,0,0,0)";
          lumaBufferCtx.fillRect(0, 0, 1, 1);
        }
      }
      function getLuma(canvas) {
        if (!lumaBuffer) {
          loadLuma();
        }
        lumaBuffer.width = canvas.width;
        lumaBuffer.height = canvas.height;
        lumaBufferCtx.filter = "url(#" + id2 + ")";
        return lumaBuffer;
      }
      return {
        load: loadLuma,
        get: getLuma
      };
    };
    function createCanvas(width2, height2) {
      if (featureSupport.offscreenCanvas) {
        return new OffscreenCanvas(width2, height2);
      }
      var canvas = createTag("canvas");
      canvas.width = width2;
      canvas.height = height2;
      return canvas;
    }
    var assetLoader = function() {
      return {
        loadLumaCanvas: lumaLoader.load,
        getLumaCanvas: lumaLoader.get,
        createCanvas
      };
    }();
    var registeredEffects = {};
    function CVEffects(elem2) {
      var i2;
      var len = elem2.data.ef ? elem2.data.ef.length : 0;
      this.filters = [];
      var filterManager;
      for (i2 = 0; i2 < len; i2 += 1) {
        filterManager = null;
        var type = elem2.data.ef[i2].ty;
        if (registeredEffects[type]) {
          var Effect = registeredEffects[type].effect;
          filterManager = new Effect(elem2.effectsManager.effectElements[i2], elem2);
        }
        if (filterManager) {
          this.filters.push(filterManager);
        }
      }
      if (this.filters.length) {
        elem2.addRenderableComponent(this);
      }
    }
    CVEffects.prototype.renderFrame = function(_isFirstFrame) {
      var i2;
      var len = this.filters.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.filters[i2].renderFrame(_isFirstFrame);
      }
    };
    CVEffects.prototype.getEffects = function(type) {
      var i2;
      var len = this.filters.length;
      var effects = [];
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.filters[i2].type === type) {
          effects.push(this.filters[i2]);
        }
      }
      return effects;
    };
    function registerEffect(id2, effect2) {
      registeredEffects[id2] = {
        effect: effect2
      };
    }
    function CVMaskElement(data2, element) {
      this.data = data2;
      this.element = element;
      this.masksProperties = this.data.masksProperties || [];
      this.viewData = createSizedArray(this.masksProperties.length);
      var i2;
      var len = this.masksProperties.length;
      var hasMasks = false;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.masksProperties[i2].mode !== "n") {
          hasMasks = true;
        }
        this.viewData[i2] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[i2], 3);
      }
      this.hasMasks = hasMasks;
      if (hasMasks) {
        this.element.addRenderableComponent(this);
      }
    }
    CVMaskElement.prototype.renderFrame = function() {
      if (!this.hasMasks) {
        return;
      }
      var transform2 = this.element.finalTransform.mat;
      var ctx2 = this.element.canvasContext;
      var i2;
      var len = this.masksProperties.length;
      var pt;
      var pts;
      var data2;
      ctx2.beginPath();
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.masksProperties[i2].mode !== "n") {
          if (this.masksProperties[i2].inv) {
            ctx2.moveTo(0, 0);
            ctx2.lineTo(this.element.globalData.compSize.w, 0);
            ctx2.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h);
            ctx2.lineTo(0, this.element.globalData.compSize.h);
            ctx2.lineTo(0, 0);
          }
          data2 = this.viewData[i2].v;
          pt = transform2.applyToPointArray(data2.v[0][0], data2.v[0][1], 0);
          ctx2.moveTo(pt[0], pt[1]);
          var j2;
          var jLen = data2._length;
          for (j2 = 1; j2 < jLen; j2 += 1) {
            pts = transform2.applyToTriplePoints(data2.o[j2 - 1], data2.i[j2], data2.v[j2]);
            ctx2.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
          }
          pts = transform2.applyToTriplePoints(data2.o[j2 - 1], data2.i[0], data2.v[0]);
          ctx2.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
        }
      }
      this.element.globalData.renderer.save(true);
      ctx2.clip();
    };
    CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;
    CVMaskElement.prototype.destroy = function() {
      this.element = null;
    };
    function CVBaseElement() {
    }
    var operationsMap = {
      1: "source-in",
      2: "source-out",
      3: "source-in",
      4: "source-out"
    };
    CVBaseElement.prototype = {
      createElements: function createElements() {
      },
      initRendererElement: function initRendererElement() {
      },
      createContainerElements: function createContainerElements() {
        if (this.data.tt >= 1) {
          this.buffers = [];
          var canvasContext = this.globalData.canvasContext;
          var bufferCanvas = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
          this.buffers.push(bufferCanvas);
          var bufferCanvas2 = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
          this.buffers.push(bufferCanvas2);
          if (this.data.tt >= 3 && !document._isProxy) {
            assetLoader.loadLumaCanvas();
          }
        }
        this.canvasContext = this.globalData.canvasContext;
        this.transformCanvas = this.globalData.transformCanvas;
        this.renderableEffectsManager = new CVEffects(this);
        this.searchEffectTransforms();
      },
      createContent: function createContent() {
      },
      setBlendMode: function setBlendMode() {
        var globalData2 = this.globalData;
        if (globalData2.blendMode !== this.data.bm) {
          globalData2.blendMode = this.data.bm;
          var blendModeValue = getBlendMode(this.data.bm);
          globalData2.canvasContext.globalCompositeOperation = blendModeValue;
        }
      },
      createRenderableComponents: function createRenderableComponents() {
        this.maskManager = new CVMaskElement(this.data, this);
        this.transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);
      },
      hideElement: function hideElement() {
        if (!this.hidden && (!this.isInRange || this.isTransparent)) {
          this.hidden = true;
        }
      },
      showElement: function showElement() {
        if (this.isInRange && !this.isTransparent) {
          this.hidden = false;
          this._isFirstFrame = true;
          this.maskManager._isFirstFrame = true;
        }
      },
      clearCanvas: function clearCanvas(canvasContext) {
        canvasContext.clearRect(this.transformCanvas.tx, this.transformCanvas.ty, this.transformCanvas.w * this.transformCanvas.sx, this.transformCanvas.h * this.transformCanvas.sy);
      },
      prepareLayer: function prepareLayer() {
        if (this.data.tt >= 1) {
          var buffer = this.buffers[0];
          var bufferCtx = buffer.getContext("2d");
          this.clearCanvas(bufferCtx);
          bufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
          this.currentTransform = this.canvasContext.getTransform();
          this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
          this.clearCanvas(this.canvasContext);
          this.canvasContext.setTransform(this.currentTransform);
        }
      },
      exitLayer: function exitLayer() {
        if (this.data.tt >= 1) {
          var buffer = this.buffers[1];
          var bufferCtx = buffer.getContext("2d");
          this.clearCanvas(bufferCtx);
          bufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
          this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
          this.clearCanvas(this.canvasContext);
          this.canvasContext.setTransform(this.currentTransform);
          var mask2 = this.comp.getElementById("tp" in this.data ? this.data.tp : this.data.ind - 1);
          mask2.renderFrame(true);
          this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
          if (this.data.tt >= 3 && !document._isProxy) {
            var lumaBuffer = assetLoader.getLumaCanvas(this.canvasContext.canvas);
            var lumaBufferCtx = lumaBuffer.getContext("2d");
            lumaBufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
            this.clearCanvas(this.canvasContext);
            this.canvasContext.drawImage(lumaBuffer, 0, 0);
          }
          this.canvasContext.globalCompositeOperation = operationsMap[this.data.tt];
          this.canvasContext.drawImage(buffer, 0, 0);
          this.canvasContext.globalCompositeOperation = "destination-over";
          this.canvasContext.drawImage(this.buffers[0], 0, 0);
          this.canvasContext.setTransform(this.currentTransform);
          this.canvasContext.globalCompositeOperation = "source-over";
        }
      },
      renderFrame: function renderFrame(forceRender) {
        if (this.hidden || this.data.hd) {
          return;
        }
        if (this.data.td === 1 && !forceRender) {
          return;
        }
        this.renderTransform();
        this.renderRenderable();
        this.renderLocalTransform();
        this.setBlendMode();
        var forceRealStack = this.data.ty === 0;
        this.prepareLayer();
        this.globalData.renderer.save(forceRealStack);
        this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props);
        this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity);
        this.renderInnerContent();
        this.globalData.renderer.restore(forceRealStack);
        this.exitLayer();
        if (this.maskManager.hasMasks) {
          this.globalData.renderer.restore(true);
        }
        if (this._isFirstFrame) {
          this._isFirstFrame = false;
        }
      },
      destroy: function destroy() {
        this.canvasContext = null;
        this.data = null;
        this.globalData = null;
        this.maskManager.destroy();
      },
      mHelper: new Matrix()
    };
    CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;
    CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;
    function CVShapeData(element, data2, styles2, transformsManager) {
      this.styledShapes = [];
      this.tr = [0, 0, 0, 0, 0, 0];
      var ty = 4;
      if (data2.ty === "rc") {
        ty = 5;
      } else if (data2.ty === "el") {
        ty = 6;
      } else if (data2.ty === "sr") {
        ty = 7;
      }
      this.sh = ShapePropertyFactory.getShapeProp(element, data2, ty, element);
      var i2;
      var len = styles2.length;
      var styledShape;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (!styles2[i2].closed) {
          styledShape = {
            transforms: transformsManager.addTransformSequence(styles2[i2].transforms),
            trNodes: []
          };
          this.styledShapes.push(styledShape);
          styles2[i2].elements.push(styledShape);
        }
      }
    }
    CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;
    function CVShapeElement(data2, globalData2, comp2) {
      this.shapes = [];
      this.shapesData = data2.shapes;
      this.stylesList = [];
      this.itemsData = [];
      this.prevViewData = [];
      this.shapeModifiers = [];
      this.processedElements = [];
      this.transformsManager = new ShapeTransformManager();
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableElement], CVShapeElement);
    CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;
    CVShapeElement.prototype.transformHelper = {
      opacity: 1,
      _opMdf: false
    };
    CVShapeElement.prototype.dashResetter = [];
    CVShapeElement.prototype.createContent = function() {
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
    };
    CVShapeElement.prototype.createStyleElement = function(data2, transforms) {
      var styleElem = {
        data: data2,
        type: data2.ty,
        preTransforms: this.transformsManager.addTransformSequence(transforms),
        transforms: [],
        elements: [],
        closed: data2.hd === true
      };
      var elementData = {};
      if (data2.ty === "fl" || data2.ty === "st") {
        elementData.c = PropertyFactory.getProp(this, data2.c, 1, 255, this);
        if (!elementData.c.k) {
          styleElem.co = "rgb(" + bmFloor(elementData.c.v[0]) + "," + bmFloor(elementData.c.v[1]) + "," + bmFloor(elementData.c.v[2]) + ")";
        }
      } else if (data2.ty === "gf" || data2.ty === "gs") {
        elementData.s = PropertyFactory.getProp(this, data2.s, 1, null, this);
        elementData.e = PropertyFactory.getProp(this, data2.e, 1, null, this);
        elementData.h = PropertyFactory.getProp(this, data2.h || {
          k: 0
        }, 0, 0.01, this);
        elementData.a = PropertyFactory.getProp(this, data2.a || {
          k: 0
        }, 0, degToRads, this);
        elementData.g = new GradientProperty(this, data2.g, this);
      }
      elementData.o = PropertyFactory.getProp(this, data2.o, 0, 0.01, this);
      if (data2.ty === "st" || data2.ty === "gs") {
        styleElem.lc = lineCapEnum[data2.lc || 2];
        styleElem.lj = lineJoinEnum[data2.lj || 2];
        if (data2.lj == 1) {
          styleElem.ml = data2.ml;
        }
        elementData.w = PropertyFactory.getProp(this, data2.w, 0, null, this);
        if (!elementData.w.k) {
          styleElem.wi = elementData.w.v;
        }
        if (data2.d) {
          var d = new DashProperty(this, data2.d, "canvas", this);
          elementData.d = d;
          if (!elementData.d.k) {
            styleElem.da = elementData.d.dashArray;
            styleElem["do"] = elementData.d.dashoffset[0];
          }
        }
      } else {
        styleElem.r = data2.r === 2 ? "evenodd" : "nonzero";
      }
      this.stylesList.push(styleElem);
      elementData.style = styleElem;
      return elementData;
    };
    CVShapeElement.prototype.createGroupElement = function() {
      var elementData = {
        it: [],
        prevViewData: []
      };
      return elementData;
    };
    CVShapeElement.prototype.createTransformElement = function(data2) {
      var elementData = {
        transform: {
          opacity: 1,
          _opMdf: false,
          key: this.transformsManager.getNewKey(),
          op: PropertyFactory.getProp(this, data2.o, 0, 0.01, this),
          mProps: TransformPropertyFactory.getTransformProperty(this, data2, this)
        }
      };
      return elementData;
    };
    CVShapeElement.prototype.createShapeElement = function(data2) {
      var elementData = new CVShapeData(this, data2, this.stylesList, this.transformsManager);
      this.shapes.push(elementData);
      this.addShapeToModifiers(elementData);
      return elementData;
    };
    CVShapeElement.prototype.reloadShapes = function() {
      this._isFirstFrame = true;
      var i2;
      var len = this.itemsData.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.prevViewData[i2] = this.itemsData[i2];
      }
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
      len = this.dynamicProperties.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.dynamicProperties[i2].getValue();
      }
      this.renderModifiers();
      this.transformsManager.processSequences(this._isFirstFrame);
    };
    CVShapeElement.prototype.addTransformToStyleList = function(transform2) {
      var i2;
      var len = this.stylesList.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (!this.stylesList[i2].closed) {
          this.stylesList[i2].transforms.push(transform2);
        }
      }
    };
    CVShapeElement.prototype.removeTransformFromStyleList = function() {
      var i2;
      var len = this.stylesList.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (!this.stylesList[i2].closed) {
          this.stylesList[i2].transforms.pop();
        }
      }
    };
    CVShapeElement.prototype.closeStyles = function(styles2) {
      var i2;
      var len = styles2.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        styles2[i2].closed = true;
      }
    };
    CVShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, shouldRender, transforms) {
      var i2;
      var len = arr.length - 1;
      var j2;
      var jLen;
      var ownStyles = [];
      var ownModifiers = [];
      var processedPos;
      var modifier;
      var currentTransform;
      var ownTransforms = [].concat(transforms);
      for (i2 = len; i2 >= 0; i2 -= 1) {
        processedPos = this.searchProcessedElement(arr[i2]);
        if (!processedPos) {
          arr[i2]._shouldRender = shouldRender;
        } else {
          itemsData[i2] = prevViewData[processedPos - 1];
        }
        if (arr[i2].ty === "fl" || arr[i2].ty === "st" || arr[i2].ty === "gf" || arr[i2].ty === "gs") {
          if (!processedPos) {
            itemsData[i2] = this.createStyleElement(arr[i2], ownTransforms);
          } else {
            itemsData[i2].style.closed = false;
          }
          ownStyles.push(itemsData[i2].style);
        } else if (arr[i2].ty === "gr") {
          if (!processedPos) {
            itemsData[i2] = this.createGroupElement(arr[i2]);
          } else {
            jLen = itemsData[i2].it.length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              itemsData[i2].prevViewData[j2] = itemsData[i2].it[j2];
            }
          }
          this.searchShapes(arr[i2].it, itemsData[i2].it, itemsData[i2].prevViewData, shouldRender, ownTransforms);
        } else if (arr[i2].ty === "tr") {
          if (!processedPos) {
            currentTransform = this.createTransformElement(arr[i2]);
            itemsData[i2] = currentTransform;
          }
          ownTransforms.push(itemsData[i2]);
          this.addTransformToStyleList(itemsData[i2]);
        } else if (arr[i2].ty === "sh" || arr[i2].ty === "rc" || arr[i2].ty === "el" || arr[i2].ty === "sr") {
          if (!processedPos) {
            itemsData[i2] = this.createShapeElement(arr[i2]);
          }
        } else if (arr[i2].ty === "tm" || arr[i2].ty === "rd" || arr[i2].ty === "pb" || arr[i2].ty === "zz" || arr[i2].ty === "op") {
          if (!processedPos) {
            modifier = ShapeModifiers.getModifier(arr[i2].ty);
            modifier.init(this, arr[i2]);
            itemsData[i2] = modifier;
            this.shapeModifiers.push(modifier);
          } else {
            modifier = itemsData[i2];
            modifier.closed = false;
          }
          ownModifiers.push(modifier);
        } else if (arr[i2].ty === "rp") {
          if (!processedPos) {
            modifier = ShapeModifiers.getModifier(arr[i2].ty);
            itemsData[i2] = modifier;
            modifier.init(this, arr, i2, itemsData);
            this.shapeModifiers.push(modifier);
            shouldRender = false;
          } else {
            modifier = itemsData[i2];
            modifier.closed = true;
          }
          ownModifiers.push(modifier);
        }
        this.addProcessedElement(arr[i2], i2 + 1);
      }
      this.removeTransformFromStyleList();
      this.closeStyles(ownStyles);
      len = ownModifiers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        ownModifiers[i2].closed = true;
      }
    };
    CVShapeElement.prototype.renderInnerContent = function() {
      this.transformHelper.opacity = 1;
      this.transformHelper._opMdf = false;
      this.renderModifiers();
      this.transformsManager.processSequences(this._isFirstFrame);
      this.renderShape(this.transformHelper, this.shapesData, this.itemsData, true);
    };
    CVShapeElement.prototype.renderShapeTransform = function(parentTransform, groupTransform) {
      if (parentTransform._opMdf || groupTransform.op._mdf || this._isFirstFrame) {
        groupTransform.opacity = parentTransform.opacity;
        groupTransform.opacity *= groupTransform.op.v;
        groupTransform._opMdf = true;
      }
    };
    CVShapeElement.prototype.drawLayer = function() {
      var i2;
      var len = this.stylesList.length;
      var j2;
      var jLen;
      var k2;
      var kLen;
      var elems;
      var nodes;
      var renderer = this.globalData.renderer;
      var ctx2 = this.globalData.canvasContext;
      var type;
      var currentStyle;
      for (i2 = 0; i2 < len; i2 += 1) {
        currentStyle = this.stylesList[i2];
        type = currentStyle.type;
        if (!((type === "st" || type === "gs") && currentStyle.wi === 0 || !currentStyle.data._shouldRender || currentStyle.coOp === 0 || this.globalData.currentGlobalAlpha === 0)) {
          renderer.save();
          elems = currentStyle.elements;
          if (type === "st" || type === "gs") {
            renderer.ctxStrokeStyle(type === "st" ? currentStyle.co : currentStyle.grd);
            renderer.ctxLineWidth(currentStyle.wi);
            renderer.ctxLineCap(currentStyle.lc);
            renderer.ctxLineJoin(currentStyle.lj);
            renderer.ctxMiterLimit(currentStyle.ml || 0);
          } else {
            renderer.ctxFillStyle(type === "fl" ? currentStyle.co : currentStyle.grd);
          }
          renderer.ctxOpacity(currentStyle.coOp);
          if (type !== "st" && type !== "gs") {
            ctx2.beginPath();
          }
          renderer.ctxTransform(currentStyle.preTransforms.finalTransform.props);
          jLen = elems.length;
          for (j2 = 0; j2 < jLen; j2 += 1) {
            if (type === "st" || type === "gs") {
              ctx2.beginPath();
              if (currentStyle.da) {
                ctx2.setLineDash(currentStyle.da);
                ctx2.lineDashOffset = currentStyle["do"];
              }
            }
            nodes = elems[j2].trNodes;
            kLen = nodes.length;
            for (k2 = 0; k2 < kLen; k2 += 1) {
              if (nodes[k2].t === "m") {
                ctx2.moveTo(nodes[k2].p[0], nodes[k2].p[1]);
              } else if (nodes[k2].t === "c") {
                ctx2.bezierCurveTo(nodes[k2].pts[0], nodes[k2].pts[1], nodes[k2].pts[2], nodes[k2].pts[3], nodes[k2].pts[4], nodes[k2].pts[5]);
              } else {
                ctx2.closePath();
              }
            }
            if (type === "st" || type === "gs") {
              renderer.ctxStroke();
              if (currentStyle.da) {
                ctx2.setLineDash(this.dashResetter);
              }
            }
          }
          if (type !== "st" && type !== "gs") {
            this.globalData.renderer.ctxFill(currentStyle.r);
          }
          renderer.restore();
        }
      }
    };
    CVShapeElement.prototype.renderShape = function(parentTransform, items, data2, isMain) {
      var i2;
      var len = items.length - 1;
      var groupTransform;
      groupTransform = parentTransform;
      for (i2 = len; i2 >= 0; i2 -= 1) {
        if (items[i2].ty === "tr") {
          groupTransform = data2[i2].transform;
          this.renderShapeTransform(parentTransform, groupTransform);
        } else if (items[i2].ty === "sh" || items[i2].ty === "el" || items[i2].ty === "rc" || items[i2].ty === "sr") {
          this.renderPath(items[i2], data2[i2]);
        } else if (items[i2].ty === "fl") {
          this.renderFill(items[i2], data2[i2], groupTransform);
        } else if (items[i2].ty === "st") {
          this.renderStroke(items[i2], data2[i2], groupTransform);
        } else if (items[i2].ty === "gf" || items[i2].ty === "gs") {
          this.renderGradientFill(items[i2], data2[i2], groupTransform);
        } else if (items[i2].ty === "gr") {
          this.renderShape(groupTransform, items[i2].it, data2[i2].it);
        } else if (items[i2].ty === "tm") ;
      }
      if (isMain) {
        this.drawLayer();
      }
    };
    CVShapeElement.prototype.renderStyledShape = function(styledShape, shape) {
      if (this._isFirstFrame || shape._mdf || styledShape.transforms._mdf) {
        var shapeNodes = styledShape.trNodes;
        var paths = shape.paths;
        var i2;
        var len;
        var j2;
        var jLen = paths._length;
        shapeNodes.length = 0;
        var groupTransformMat = styledShape.transforms.finalTransform;
        for (j2 = 0; j2 < jLen; j2 += 1) {
          var pathNodes = paths.shapes[j2];
          if (pathNodes && pathNodes.v) {
            len = pathNodes._length;
            for (i2 = 1; i2 < len; i2 += 1) {
              if (i2 === 1) {
                shapeNodes.push({
                  t: "m",
                  p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                });
              }
              shapeNodes.push({
                t: "c",
                pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i2 - 1], pathNodes.i[i2], pathNodes.v[i2])
              });
            }
            if (len === 1) {
              shapeNodes.push({
                t: "m",
                p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
              });
            }
            if (pathNodes.c && len) {
              shapeNodes.push({
                t: "c",
                pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i2 - 1], pathNodes.i[0], pathNodes.v[0])
              });
              shapeNodes.push({
                t: "z"
              });
            }
          }
        }
        styledShape.trNodes = shapeNodes;
      }
    };
    CVShapeElement.prototype.renderPath = function(pathData, itemData) {
      if (pathData.hd !== true && pathData._shouldRender) {
        var i2;
        var len = itemData.styledShapes.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.renderStyledShape(itemData.styledShapes[i2], itemData.sh);
        }
      }
    };
    CVShapeElement.prototype.renderFill = function(styleData, itemData, groupTransform) {
      var styleElem = itemData.style;
      if (itemData.c._mdf || this._isFirstFrame) {
        styleElem.co = "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")";
      }
      if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
        styleElem.coOp = itemData.o.v * groupTransform.opacity;
      }
    };
    CVShapeElement.prototype.renderGradientFill = function(styleData, itemData, groupTransform) {
      var styleElem = itemData.style;
      var grd;
      if (!styleElem.grd || itemData.g._mdf || itemData.s._mdf || itemData.e._mdf || styleData.t !== 1 && (itemData.h._mdf || itemData.a._mdf)) {
        var ctx2 = this.globalData.canvasContext;
        var pt1 = itemData.s.v;
        var pt2 = itemData.e.v;
        if (styleData.t === 1) {
          grd = ctx2.createLinearGradient(pt1[0], pt1[1], pt2[0], pt2[1]);
        } else {
          var rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
          var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
          var percent = itemData.h.v;
          if (percent >= 1) {
            percent = 0.99;
          } else if (percent <= -1) {
            percent = -0.99;
          }
          var dist2 = rad * percent;
          var x = Math.cos(ang + itemData.a.v) * dist2 + pt1[0];
          var y = Math.sin(ang + itemData.a.v) * dist2 + pt1[1];
          grd = ctx2.createRadialGradient(x, y, 0, pt1[0], pt1[1], rad);
        }
        var i2;
        var len = styleData.g.p;
        var cValues = itemData.g.c;
        var opacity = 1;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (itemData.g._hasOpacity && itemData.g._collapsable) {
            opacity = itemData.g.o[i2 * 2 + 1];
          }
          grd.addColorStop(cValues[i2 * 4] / 100, "rgba(" + cValues[i2 * 4 + 1] + "," + cValues[i2 * 4 + 2] + "," + cValues[i2 * 4 + 3] + "," + opacity + ")");
        }
        styleElem.grd = grd;
      }
      styleElem.coOp = itemData.o.v * groupTransform.opacity;
    };
    CVShapeElement.prototype.renderStroke = function(styleData, itemData, groupTransform) {
      var styleElem = itemData.style;
      var d = itemData.d;
      if (d && (d._mdf || this._isFirstFrame)) {
        styleElem.da = d.dashArray;
        styleElem["do"] = d.dashoffset[0];
      }
      if (itemData.c._mdf || this._isFirstFrame) {
        styleElem.co = "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")";
      }
      if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
        styleElem.coOp = itemData.o.v * groupTransform.opacity;
      }
      if (itemData.w._mdf || this._isFirstFrame) {
        styleElem.wi = itemData.w.v;
      }
    };
    CVShapeElement.prototype.destroy = function() {
      this.shapesData = null;
      this.globalData = null;
      this.canvasContext = null;
      this.stylesList.length = 0;
      this.itemsData.length = 0;
    };
    function CVTextElement(data2, globalData2, comp2) {
      this.textSpans = [];
      this.yOffset = 0;
      this.fillColorAnim = false;
      this.strokeColorAnim = false;
      this.strokeWidthAnim = false;
      this.stroke = false;
      this.fill = false;
      this.justifyOffset = 0;
      this.currentRender = null;
      this.renderType = "canvas";
      this.values = {
        fill: "rgba(0,0,0,0)",
        stroke: "rgba(0,0,0,0)",
        sWidth: 0,
        fValue: ""
      };
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement, ITextElement], CVTextElement);
    CVTextElement.prototype.tHelper = createTag("canvas").getContext("2d");
    CVTextElement.prototype.buildNewText = function() {
      var documentData = this.textProperty.currentData;
      this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
      var hasFill = false;
      if (documentData.fc) {
        hasFill = true;
        this.values.fill = this.buildColor(documentData.fc);
      } else {
        this.values.fill = "rgba(0,0,0,0)";
      }
      this.fill = hasFill;
      var hasStroke = false;
      if (documentData.sc) {
        hasStroke = true;
        this.values.stroke = this.buildColor(documentData.sc);
        this.values.sWidth = documentData.sw;
      }
      var fontData = this.globalData.fontManager.getFontByName(documentData.f);
      var i2;
      var len;
      var letters = documentData.l;
      var matrixHelper = this.mHelper;
      this.stroke = hasStroke;
      this.values.fValue = documentData.finalSize + "px " + this.globalData.fontManager.getFontByName(documentData.f).fFamily;
      len = documentData.finalText.length;
      var charData;
      var shapeData;
      var k2;
      var kLen;
      var shapes;
      var j2;
      var jLen;
      var pathNodes;
      var commands;
      var pathArr;
      var singleShape = this.data.singleShape;
      var trackingOffset = documentData.tr * 1e-3 * documentData.finalSize;
      var xPos = 0;
      var yPos = 0;
      var firstLine = true;
      var cnt = 0;
      for (i2 = 0; i2 < len; i2 += 1) {
        charData = this.globalData.fontManager.getCharData(documentData.finalText[i2], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
        shapeData = charData && charData.data || {};
        matrixHelper.reset();
        if (singleShape && letters[i2].n) {
          xPos = -trackingOffset;
          yPos += documentData.yOffset;
          yPos += firstLine ? 1 : 0;
          firstLine = false;
        }
        shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
        jLen = shapes.length;
        matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
        if (singleShape) {
          this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i2].line, xPos, yPos);
        }
        commands = createSizedArray(jLen - 1);
        var commandsCounter = 0;
        for (j2 = 0; j2 < jLen; j2 += 1) {
          if (shapes[j2].ty === "sh") {
            kLen = shapes[j2].ks.k.i.length;
            pathNodes = shapes[j2].ks.k;
            pathArr = [];
            for (k2 = 1; k2 < kLen; k2 += 1) {
              if (k2 === 1) {
                pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
              }
              pathArr.push(matrixHelper.applyToX(pathNodes.o[k2 - 1][0], pathNodes.o[k2 - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k2 - 1][0], pathNodes.o[k2 - 1][1], 0), matrixHelper.applyToX(pathNodes.i[k2][0], pathNodes.i[k2][1], 0), matrixHelper.applyToY(pathNodes.i[k2][0], pathNodes.i[k2][1], 0), matrixHelper.applyToX(pathNodes.v[k2][0], pathNodes.v[k2][1], 0), matrixHelper.applyToY(pathNodes.v[k2][0], pathNodes.v[k2][1], 0));
            }
            pathArr.push(matrixHelper.applyToX(pathNodes.o[k2 - 1][0], pathNodes.o[k2 - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k2 - 1][0], pathNodes.o[k2 - 1][1], 0), matrixHelper.applyToX(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToY(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
            commands[commandsCounter] = pathArr;
            commandsCounter += 1;
          }
        }
        if (singleShape) {
          xPos += letters[i2].l;
          xPos += trackingOffset;
        }
        if (this.textSpans[cnt]) {
          this.textSpans[cnt].elem = commands;
        } else {
          this.textSpans[cnt] = {
            elem: commands
          };
        }
        cnt += 1;
      }
    };
    CVTextElement.prototype.renderInnerContent = function() {
      this.validateText();
      var ctx2 = this.canvasContext;
      ctx2.font = this.values.fValue;
      this.globalData.renderer.ctxLineCap("butt");
      this.globalData.renderer.ctxLineJoin("miter");
      this.globalData.renderer.ctxMiterLimit(4);
      if (!this.data.singleShape) {
        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
      }
      var i2;
      var len;
      var j2;
      var jLen;
      var k2;
      var kLen;
      var renderedLetters = this.textAnimator.renderedLetters;
      var letters = this.textProperty.currentData.l;
      len = letters.length;
      var renderedLetter;
      var lastFill = null;
      var lastStroke = null;
      var lastStrokeW = null;
      var commands;
      var pathArr;
      var renderer = this.globalData.renderer;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (!letters[i2].n) {
          renderedLetter = renderedLetters[i2];
          if (renderedLetter) {
            renderer.save();
            renderer.ctxTransform(renderedLetter.p);
            renderer.ctxOpacity(renderedLetter.o);
          }
          if (this.fill) {
            if (renderedLetter && renderedLetter.fc) {
              if (lastFill !== renderedLetter.fc) {
                renderer.ctxFillStyle(renderedLetter.fc);
                lastFill = renderedLetter.fc;
              }
            } else if (lastFill !== this.values.fill) {
              lastFill = this.values.fill;
              renderer.ctxFillStyle(this.values.fill);
            }
            commands = this.textSpans[i2].elem;
            jLen = commands.length;
            this.globalData.canvasContext.beginPath();
            for (j2 = 0; j2 < jLen; j2 += 1) {
              pathArr = commands[j2];
              kLen = pathArr.length;
              this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
              for (k2 = 2; k2 < kLen; k2 += 6) {
                this.globalData.canvasContext.bezierCurveTo(pathArr[k2], pathArr[k2 + 1], pathArr[k2 + 2], pathArr[k2 + 3], pathArr[k2 + 4], pathArr[k2 + 5]);
              }
            }
            this.globalData.canvasContext.closePath();
            renderer.ctxFill();
          }
          if (this.stroke) {
            if (renderedLetter && renderedLetter.sw) {
              if (lastStrokeW !== renderedLetter.sw) {
                lastStrokeW = renderedLetter.sw;
                renderer.ctxLineWidth(renderedLetter.sw);
              }
            } else if (lastStrokeW !== this.values.sWidth) {
              lastStrokeW = this.values.sWidth;
              renderer.ctxLineWidth(this.values.sWidth);
            }
            if (renderedLetter && renderedLetter.sc) {
              if (lastStroke !== renderedLetter.sc) {
                lastStroke = renderedLetter.sc;
                renderer.ctxStrokeStyle(renderedLetter.sc);
              }
            } else if (lastStroke !== this.values.stroke) {
              lastStroke = this.values.stroke;
              renderer.ctxStrokeStyle(this.values.stroke);
            }
            commands = this.textSpans[i2].elem;
            jLen = commands.length;
            this.globalData.canvasContext.beginPath();
            for (j2 = 0; j2 < jLen; j2 += 1) {
              pathArr = commands[j2];
              kLen = pathArr.length;
              this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
              for (k2 = 2; k2 < kLen; k2 += 6) {
                this.globalData.canvasContext.bezierCurveTo(pathArr[k2], pathArr[k2 + 1], pathArr[k2 + 2], pathArr[k2 + 3], pathArr[k2 + 4], pathArr[k2 + 5]);
              }
            }
            this.globalData.canvasContext.closePath();
            renderer.ctxStroke();
          }
          if (renderedLetter) {
            this.globalData.renderer.restore();
          }
        }
      }
    };
    function CVImageElement(data2, globalData2, comp2) {
      this.assetData = globalData2.getAssetData(data2.refId);
      this.img = globalData2.imageLoader.getAsset(this.assetData);
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVImageElement);
    CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;
    CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
    CVImageElement.prototype.createContent = function() {
      if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {
        var canvas = createTag("canvas");
        canvas.width = this.assetData.w;
        canvas.height = this.assetData.h;
        var ctx2 = canvas.getContext("2d");
        var imgW = this.img.width;
        var imgH = this.img.height;
        var imgRel = imgW / imgH;
        var canvasRel = this.assetData.w / this.assetData.h;
        var widthCrop;
        var heightCrop;
        var par = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;
        if (imgRel > canvasRel && par === "xMidYMid slice" || imgRel < canvasRel && par !== "xMidYMid slice") {
          heightCrop = imgH;
          widthCrop = heightCrop * canvasRel;
        } else {
          widthCrop = imgW;
          heightCrop = widthCrop / canvasRel;
        }
        ctx2.drawImage(this.img, (imgW - widthCrop) / 2, (imgH - heightCrop) / 2, widthCrop, heightCrop, 0, 0, this.assetData.w, this.assetData.h);
        this.img = canvas;
      }
    };
    CVImageElement.prototype.renderInnerContent = function() {
      this.canvasContext.drawImage(this.img, 0, 0);
    };
    CVImageElement.prototype.destroy = function() {
      this.img = null;
    };
    function CVSolidElement(data2, globalData2, comp2) {
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVSolidElement);
    CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;
    CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
    CVSolidElement.prototype.renderInnerContent = function() {
      this.globalData.renderer.ctxFillStyle(this.data.sc);
      this.globalData.renderer.ctxFillRect(0, 0, this.data.sw, this.data.sh);
    };
    function CanvasRendererBase() {
    }
    extendPrototype([BaseRenderer], CanvasRendererBase);
    CanvasRendererBase.prototype.createShape = function(data2) {
      return new CVShapeElement(data2, this.globalData, this);
    };
    CanvasRendererBase.prototype.createText = function(data2) {
      return new CVTextElement(data2, this.globalData, this);
    };
    CanvasRendererBase.prototype.createImage = function(data2) {
      return new CVImageElement(data2, this.globalData, this);
    };
    CanvasRendererBase.prototype.createSolid = function(data2) {
      return new CVSolidElement(data2, this.globalData, this);
    };
    CanvasRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;
    CanvasRendererBase.prototype.ctxTransform = function(props) {
      if (props[0] === 1 && props[1] === 0 && props[4] === 0 && props[5] === 1 && props[12] === 0 && props[13] === 0) {
        return;
      }
      this.canvasContext.transform(props[0], props[1], props[4], props[5], props[12], props[13]);
    };
    CanvasRendererBase.prototype.ctxOpacity = function(op) {
      this.canvasContext.globalAlpha *= op < 0 ? 0 : op;
    };
    CanvasRendererBase.prototype.ctxFillStyle = function(value2) {
      this.canvasContext.fillStyle = value2;
    };
    CanvasRendererBase.prototype.ctxStrokeStyle = function(value2) {
      this.canvasContext.strokeStyle = value2;
    };
    CanvasRendererBase.prototype.ctxLineWidth = function(value2) {
      this.canvasContext.lineWidth = value2;
    };
    CanvasRendererBase.prototype.ctxLineCap = function(value2) {
      this.canvasContext.lineCap = value2;
    };
    CanvasRendererBase.prototype.ctxLineJoin = function(value2) {
      this.canvasContext.lineJoin = value2;
    };
    CanvasRendererBase.prototype.ctxMiterLimit = function(value2) {
      this.canvasContext.miterLimit = value2;
    };
    CanvasRendererBase.prototype.ctxFill = function(rule) {
      this.canvasContext.fill(rule);
    };
    CanvasRendererBase.prototype.ctxFillRect = function(x, y, w, h) {
      this.canvasContext.fillRect(x, y, w, h);
    };
    CanvasRendererBase.prototype.ctxStroke = function() {
      this.canvasContext.stroke();
    };
    CanvasRendererBase.prototype.reset = function() {
      if (!this.renderConfig.clearCanvas) {
        this.canvasContext.restore();
        return;
      }
      this.contextData.reset();
    };
    CanvasRendererBase.prototype.save = function() {
      this.canvasContext.save();
    };
    CanvasRendererBase.prototype.restore = function(actionFlag) {
      if (!this.renderConfig.clearCanvas) {
        this.canvasContext.restore();
        return;
      }
      if (actionFlag) {
        this.globalData.blendMode = "source-over";
      }
      this.contextData.restore(actionFlag);
    };
    CanvasRendererBase.prototype.configAnimation = function(animData) {
      if (this.animationItem.wrapper) {
        this.animationItem.container = createTag("canvas");
        var containerStyle = this.animationItem.container.style;
        containerStyle.width = "100%";
        containerStyle.height = "100%";
        var origin = "0px 0px 0px";
        containerStyle.transformOrigin = origin;
        containerStyle.mozTransformOrigin = origin;
        containerStyle.webkitTransformOrigin = origin;
        containerStyle["-webkit-transform"] = origin;
        containerStyle.contentVisibility = this.renderConfig.contentVisibility;
        this.animationItem.wrapper.appendChild(this.animationItem.container);
        this.canvasContext = this.animationItem.container.getContext("2d");
        if (this.renderConfig.className) {
          this.animationItem.container.setAttribute("class", this.renderConfig.className);
        }
        if (this.renderConfig.id) {
          this.animationItem.container.setAttribute("id", this.renderConfig.id);
        }
      } else {
        this.canvasContext = this.renderConfig.context;
      }
      this.contextData.setContext(this.canvasContext);
      this.data = animData;
      this.layers = animData.layers;
      this.transformCanvas = {
        w: animData.w,
        h: animData.h,
        sx: 0,
        sy: 0,
        tx: 0,
        ty: 0
      };
      this.setupGlobalData(animData, document.body);
      this.globalData.canvasContext = this.canvasContext;
      this.globalData.renderer = this;
      this.globalData.isDashed = false;
      this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
      this.globalData.transformCanvas = this.transformCanvas;
      this.elements = createSizedArray(animData.layers.length);
      this.updateContainerSize();
    };
    CanvasRendererBase.prototype.updateContainerSize = function(width2, height2) {
      this.reset();
      var elementWidth;
      var elementHeight;
      if (width2) {
        elementWidth = width2;
        elementHeight = height2;
        this.canvasContext.canvas.width = elementWidth;
        this.canvasContext.canvas.height = elementHeight;
      } else {
        if (this.animationItem.wrapper && this.animationItem.container) {
          elementWidth = this.animationItem.wrapper.offsetWidth;
          elementHeight = this.animationItem.wrapper.offsetHeight;
        } else {
          elementWidth = this.canvasContext.canvas.width;
          elementHeight = this.canvasContext.canvas.height;
        }
        this.canvasContext.canvas.width = elementWidth * this.renderConfig.dpr;
        this.canvasContext.canvas.height = elementHeight * this.renderConfig.dpr;
      }
      var elementRel;
      var animationRel;
      if (this.renderConfig.preserveAspectRatio.indexOf("meet") !== -1 || this.renderConfig.preserveAspectRatio.indexOf("slice") !== -1) {
        var par = this.renderConfig.preserveAspectRatio.split(" ");
        var fillType = par[1] || "meet";
        var pos = par[0] || "xMidYMid";
        var xPos = pos.substr(0, 4);
        var yPos = pos.substr(4);
        elementRel = elementWidth / elementHeight;
        animationRel = this.transformCanvas.w / this.transformCanvas.h;
        if (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice") {
          this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
          this.transformCanvas.sy = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
        } else {
          this.transformCanvas.sx = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
          this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
        }
        if (xPos === "xMid" && (animationRel < elementRel && fillType === "meet" || animationRel > elementRel && fillType === "slice")) {
          this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) / 2 * this.renderConfig.dpr;
        } else if (xPos === "xMax" && (animationRel < elementRel && fillType === "meet" || animationRel > elementRel && fillType === "slice")) {
          this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) * this.renderConfig.dpr;
        } else {
          this.transformCanvas.tx = 0;
        }
        if (yPos === "YMid" && (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice")) {
          this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) / 2 * this.renderConfig.dpr;
        } else if (yPos === "YMax" && (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice")) {
          this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) * this.renderConfig.dpr;
        } else {
          this.transformCanvas.ty = 0;
        }
      } else if (this.renderConfig.preserveAspectRatio === "none") {
        this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
        this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
        this.transformCanvas.tx = 0;
        this.transformCanvas.ty = 0;
      } else {
        this.transformCanvas.sx = this.renderConfig.dpr;
        this.transformCanvas.sy = this.renderConfig.dpr;
        this.transformCanvas.tx = 0;
        this.transformCanvas.ty = 0;
      }
      this.transformCanvas.props = [this.transformCanvas.sx, 0, 0, 0, 0, this.transformCanvas.sy, 0, 0, 0, 0, 1, 0, this.transformCanvas.tx, this.transformCanvas.ty, 0, 1];
      this.ctxTransform(this.transformCanvas.props);
      this.canvasContext.beginPath();
      this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
      this.canvasContext.closePath();
      this.canvasContext.clip();
      this.renderFrame(this.renderedFrame, true);
    };
    CanvasRendererBase.prototype.destroy = function() {
      if (this.renderConfig.clearCanvas && this.animationItem.wrapper) {
        this.animationItem.wrapper.innerText = "";
      }
      var i2;
      var len = this.layers ? this.layers.length : 0;
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (this.elements[i2] && this.elements[i2].destroy) {
          this.elements[i2].destroy();
        }
      }
      this.elements.length = 0;
      this.globalData.canvasContext = null;
      this.animationItem.container = null;
      this.destroyed = true;
    };
    CanvasRendererBase.prototype.renderFrame = function(num, forceRender) {
      if (this.renderedFrame === num && this.renderConfig.clearCanvas === true && !forceRender || this.destroyed || num === -1) {
        return;
      }
      this.renderedFrame = num;
      this.globalData.frameNum = num - this.animationItem._isFirstFrame;
      this.globalData.frameId += 1;
      this.globalData._mdf = !this.renderConfig.clearCanvas || forceRender;
      this.globalData.projectInterface.currentFrame = num;
      var i2;
      var len = this.layers.length;
      if (!this.completeLayers) {
        this.checkLayers(num);
      }
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (this.completeLayers || this.elements[i2]) {
          this.elements[i2].prepareFrame(num - this.layers[i2].st);
        }
      }
      if (this.globalData._mdf) {
        if (this.renderConfig.clearCanvas === true) {
          this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
        } else {
          this.save();
        }
        for (i2 = len - 1; i2 >= 0; i2 -= 1) {
          if (this.completeLayers || this.elements[i2]) {
            this.elements[i2].renderFrame();
          }
        }
        if (this.renderConfig.clearCanvas !== true) {
          this.restore();
        }
      }
    };
    CanvasRendererBase.prototype.buildItem = function(pos) {
      var elements = this.elements;
      if (elements[pos] || this.layers[pos].ty === 99) {
        return;
      }
      var element = this.createItem(this.layers[pos], this, this.globalData);
      elements[pos] = element;
      element.initExpressions();
    };
    CanvasRendererBase.prototype.checkPendingElements = function() {
      while (this.pendingElements.length) {
        var element = this.pendingElements.pop();
        element.checkParenting();
      }
    };
    CanvasRendererBase.prototype.hide = function() {
      this.animationItem.container.style.display = "none";
    };
    CanvasRendererBase.prototype.show = function() {
      this.animationItem.container.style.display = "block";
    };
    function CanvasContext() {
      this.opacity = -1;
      this.transform = createTypedArray("float32", 16);
      this.fillStyle = "";
      this.strokeStyle = "";
      this.lineWidth = "";
      this.lineCap = "";
      this.lineJoin = "";
      this.miterLimit = "";
      this.id = Math.random();
    }
    function CVContextData() {
      this.stack = [];
      this.cArrPos = 0;
      this.cTr = new Matrix();
      var i2;
      var len = 15;
      for (i2 = 0; i2 < len; i2 += 1) {
        var canvasContext = new CanvasContext();
        this.stack[i2] = canvasContext;
      }
      this._length = len;
      this.nativeContext = null;
      this.transformMat = new Matrix();
      this.currentOpacity = 1;
      this.currentFillStyle = "";
      this.appliedFillStyle = "";
      this.currentStrokeStyle = "";
      this.appliedStrokeStyle = "";
      this.currentLineWidth = "";
      this.appliedLineWidth = "";
      this.currentLineCap = "";
      this.appliedLineCap = "";
      this.currentLineJoin = "";
      this.appliedLineJoin = "";
      this.appliedMiterLimit = "";
      this.currentMiterLimit = "";
    }
    CVContextData.prototype.duplicate = function() {
      var newLength = this._length * 2;
      var i2 = 0;
      for (i2 = this._length; i2 < newLength; i2 += 1) {
        this.stack[i2] = new CanvasContext();
      }
      this._length = newLength;
    };
    CVContextData.prototype.reset = function() {
      this.cArrPos = 0;
      this.cTr.reset();
      this.stack[this.cArrPos].opacity = 1;
    };
    CVContextData.prototype.restore = function(forceRestore) {
      this.cArrPos -= 1;
      var currentContext = this.stack[this.cArrPos];
      var transform2 = currentContext.transform;
      var i2;
      var arr = this.cTr.props;
      for (i2 = 0; i2 < 16; i2 += 1) {
        arr[i2] = transform2[i2];
      }
      if (forceRestore) {
        this.nativeContext.restore();
        var prevStack = this.stack[this.cArrPos + 1];
        this.appliedFillStyle = prevStack.fillStyle;
        this.appliedStrokeStyle = prevStack.strokeStyle;
        this.appliedLineWidth = prevStack.lineWidth;
        this.appliedLineCap = prevStack.lineCap;
        this.appliedLineJoin = prevStack.lineJoin;
        this.appliedMiterLimit = prevStack.miterLimit;
      }
      this.nativeContext.setTransform(transform2[0], transform2[1], transform2[4], transform2[5], transform2[12], transform2[13]);
      if (forceRestore || currentContext.opacity !== -1 && this.currentOpacity !== currentContext.opacity) {
        this.nativeContext.globalAlpha = currentContext.opacity;
        this.currentOpacity = currentContext.opacity;
      }
      this.currentFillStyle = currentContext.fillStyle;
      this.currentStrokeStyle = currentContext.strokeStyle;
      this.currentLineWidth = currentContext.lineWidth;
      this.currentLineCap = currentContext.lineCap;
      this.currentLineJoin = currentContext.lineJoin;
      this.currentMiterLimit = currentContext.miterLimit;
    };
    CVContextData.prototype.save = function(saveOnNativeFlag) {
      if (saveOnNativeFlag) {
        this.nativeContext.save();
      }
      var props = this.cTr.props;
      if (this._length <= this.cArrPos) {
        this.duplicate();
      }
      var currentStack = this.stack[this.cArrPos];
      var i2;
      for (i2 = 0; i2 < 16; i2 += 1) {
        currentStack.transform[i2] = props[i2];
      }
      this.cArrPos += 1;
      var newStack = this.stack[this.cArrPos];
      newStack.opacity = currentStack.opacity;
      newStack.fillStyle = currentStack.fillStyle;
      newStack.strokeStyle = currentStack.strokeStyle;
      newStack.lineWidth = currentStack.lineWidth;
      newStack.lineCap = currentStack.lineCap;
      newStack.lineJoin = currentStack.lineJoin;
      newStack.miterLimit = currentStack.miterLimit;
    };
    CVContextData.prototype.setOpacity = function(value2) {
      this.stack[this.cArrPos].opacity = value2;
    };
    CVContextData.prototype.setContext = function(value2) {
      this.nativeContext = value2;
    };
    CVContextData.prototype.fillStyle = function(value2) {
      if (this.stack[this.cArrPos].fillStyle !== value2) {
        this.currentFillStyle = value2;
        this.stack[this.cArrPos].fillStyle = value2;
      }
    };
    CVContextData.prototype.strokeStyle = function(value2) {
      if (this.stack[this.cArrPos].strokeStyle !== value2) {
        this.currentStrokeStyle = value2;
        this.stack[this.cArrPos].strokeStyle = value2;
      }
    };
    CVContextData.prototype.lineWidth = function(value2) {
      if (this.stack[this.cArrPos].lineWidth !== value2) {
        this.currentLineWidth = value2;
        this.stack[this.cArrPos].lineWidth = value2;
      }
    };
    CVContextData.prototype.lineCap = function(value2) {
      if (this.stack[this.cArrPos].lineCap !== value2) {
        this.currentLineCap = value2;
        this.stack[this.cArrPos].lineCap = value2;
      }
    };
    CVContextData.prototype.lineJoin = function(value2) {
      if (this.stack[this.cArrPos].lineJoin !== value2) {
        this.currentLineJoin = value2;
        this.stack[this.cArrPos].lineJoin = value2;
      }
    };
    CVContextData.prototype.miterLimit = function(value2) {
      if (this.stack[this.cArrPos].miterLimit !== value2) {
        this.currentMiterLimit = value2;
        this.stack[this.cArrPos].miterLimit = value2;
      }
    };
    CVContextData.prototype.transform = function(props) {
      this.transformMat.cloneFromProps(props);
      var currentTransform = this.cTr;
      this.transformMat.multiply(currentTransform);
      currentTransform.cloneFromProps(this.transformMat.props);
      var trProps = currentTransform.props;
      this.nativeContext.setTransform(trProps[0], trProps[1], trProps[4], trProps[5], trProps[12], trProps[13]);
    };
    CVContextData.prototype.opacity = function(op) {
      var currentOpacity = this.stack[this.cArrPos].opacity;
      currentOpacity *= op < 0 ? 0 : op;
      if (this.stack[this.cArrPos].opacity !== currentOpacity) {
        if (this.currentOpacity !== op) {
          this.nativeContext.globalAlpha = op;
          this.currentOpacity = op;
        }
        this.stack[this.cArrPos].opacity = currentOpacity;
      }
    };
    CVContextData.prototype.fill = function(rule) {
      if (this.appliedFillStyle !== this.currentFillStyle) {
        this.appliedFillStyle = this.currentFillStyle;
        this.nativeContext.fillStyle = this.appliedFillStyle;
      }
      this.nativeContext.fill(rule);
    };
    CVContextData.prototype.fillRect = function(x, y, w, h) {
      if (this.appliedFillStyle !== this.currentFillStyle) {
        this.appliedFillStyle = this.currentFillStyle;
        this.nativeContext.fillStyle = this.appliedFillStyle;
      }
      this.nativeContext.fillRect(x, y, w, h);
    };
    CVContextData.prototype.stroke = function() {
      if (this.appliedStrokeStyle !== this.currentStrokeStyle) {
        this.appliedStrokeStyle = this.currentStrokeStyle;
        this.nativeContext.strokeStyle = this.appliedStrokeStyle;
      }
      if (this.appliedLineWidth !== this.currentLineWidth) {
        this.appliedLineWidth = this.currentLineWidth;
        this.nativeContext.lineWidth = this.appliedLineWidth;
      }
      if (this.appliedLineCap !== this.currentLineCap) {
        this.appliedLineCap = this.currentLineCap;
        this.nativeContext.lineCap = this.appliedLineCap;
      }
      if (this.appliedLineJoin !== this.currentLineJoin) {
        this.appliedLineJoin = this.currentLineJoin;
        this.nativeContext.lineJoin = this.appliedLineJoin;
      }
      if (this.appliedMiterLimit !== this.currentMiterLimit) {
        this.appliedMiterLimit = this.currentMiterLimit;
        this.nativeContext.miterLimit = this.appliedMiterLimit;
      }
      this.nativeContext.stroke();
    };
    function CVCompElement(data2, globalData2, comp2) {
      this.completeLayers = false;
      this.layers = data2.layers;
      this.pendingElements = [];
      this.elements = createSizedArray(this.layers.length);
      this.initElement(data2, globalData2, comp2);
      this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
        _placeholder: true
      };
    }
    extendPrototype([CanvasRendererBase, ICompElement, CVBaseElement], CVCompElement);
    CVCompElement.prototype.renderInnerContent = function() {
      var ctx2 = this.canvasContext;
      ctx2.beginPath();
      ctx2.moveTo(0, 0);
      ctx2.lineTo(this.data.w, 0);
      ctx2.lineTo(this.data.w, this.data.h);
      ctx2.lineTo(0, this.data.h);
      ctx2.lineTo(0, 0);
      ctx2.clip();
      var i2;
      var len = this.layers.length;
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (this.completeLayers || this.elements[i2]) {
          this.elements[i2].renderFrame();
        }
      }
    };
    CVCompElement.prototype.destroy = function() {
      var i2;
      var len = this.layers.length;
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (this.elements[i2]) {
          this.elements[i2].destroy();
        }
      }
      this.layers = null;
      this.elements = null;
    };
    CVCompElement.prototype.createComp = function(data2) {
      return new CVCompElement(data2, this.globalData, this);
    };
    function CanvasRenderer(animationItem, config) {
      this.animationItem = animationItem;
      this.renderConfig = {
        clearCanvas: config && config.clearCanvas !== void 0 ? config.clearCanvas : true,
        context: config && config.context || null,
        progressiveLoad: config && config.progressiveLoad || false,
        preserveAspectRatio: config && config.preserveAspectRatio || "xMidYMid meet",
        imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || "xMidYMid slice",
        contentVisibility: config && config.contentVisibility || "visible",
        className: config && config.className || "",
        id: config && config.id || "",
        runExpressions: !config || config.runExpressions === void 0 || config.runExpressions
      };
      this.renderConfig.dpr = config && config.dpr || 1;
      if (this.animationItem.wrapper) {
        this.renderConfig.dpr = config && config.dpr || window.devicePixelRatio || 1;
      }
      this.renderedFrame = -1;
      this.globalData = {
        frameNum: -1,
        _mdf: false,
        renderConfig: this.renderConfig,
        currentGlobalAlpha: -1
      };
      this.contextData = new CVContextData();
      this.elements = [];
      this.pendingElements = [];
      this.transformMat = new Matrix();
      this.completeLayers = false;
      this.rendererType = "canvas";
      if (this.renderConfig.clearCanvas) {
        this.ctxTransform = this.contextData.transform.bind(this.contextData);
        this.ctxOpacity = this.contextData.opacity.bind(this.contextData);
        this.ctxFillStyle = this.contextData.fillStyle.bind(this.contextData);
        this.ctxStrokeStyle = this.contextData.strokeStyle.bind(this.contextData);
        this.ctxLineWidth = this.contextData.lineWidth.bind(this.contextData);
        this.ctxLineCap = this.contextData.lineCap.bind(this.contextData);
        this.ctxLineJoin = this.contextData.lineJoin.bind(this.contextData);
        this.ctxMiterLimit = this.contextData.miterLimit.bind(this.contextData);
        this.ctxFill = this.contextData.fill.bind(this.contextData);
        this.ctxFillRect = this.contextData.fillRect.bind(this.contextData);
        this.ctxStroke = this.contextData.stroke.bind(this.contextData);
        this.save = this.contextData.save.bind(this.contextData);
      }
    }
    extendPrototype([CanvasRendererBase], CanvasRenderer);
    CanvasRenderer.prototype.createComp = function(data2) {
      return new CVCompElement(data2, this.globalData, this);
    };
    function HBaseElement() {
    }
    HBaseElement.prototype = {
      checkBlendMode: function checkBlendMode() {
      },
      initRendererElement: function initRendererElement() {
        this.baseElement = createTag(this.data.tg || "div");
        if (this.data.hasMask) {
          this.svgElement = createNS("svg");
          this.layerElement = createNS("g");
          this.maskedElement = this.layerElement;
          this.svgElement.appendChild(this.layerElement);
          this.baseElement.appendChild(this.svgElement);
        } else {
          this.layerElement = this.baseElement;
        }
        styleDiv(this.baseElement);
      },
      createContainerElements: function createContainerElements() {
        this.renderableEffectsManager = new CVEffects(this);
        this.transformedElement = this.baseElement;
        this.maskedElement = this.layerElement;
        if (this.data.ln) {
          this.layerElement.setAttribute("id", this.data.ln);
        }
        if (this.data.cl) {
          this.layerElement.setAttribute("class", this.data.cl);
        }
        if (this.data.bm !== 0) {
          this.setBlendMode();
        }
      },
      renderElement: function renderElement() {
        var transformedElementStyle = this.transformedElement ? this.transformedElement.style : {};
        if (this.finalTransform._matMdf) {
          var matrixValue = this.finalTransform.mat.toCSS();
          transformedElementStyle.transform = matrixValue;
          transformedElementStyle.webkitTransform = matrixValue;
        }
        if (this.finalTransform._opMdf) {
          transformedElementStyle.opacity = this.finalTransform.mProp.o.v;
        }
      },
      renderFrame: function renderFrame() {
        if (this.data.hd || this.hidden) {
          return;
        }
        this.renderTransform();
        this.renderRenderable();
        this.renderElement();
        this.renderInnerContent();
        if (this._isFirstFrame) {
          this._isFirstFrame = false;
        }
      },
      destroy: function destroy() {
        this.layerElement = null;
        this.transformedElement = null;
        if (this.matteElement) {
          this.matteElement = null;
        }
        if (this.maskManager) {
          this.maskManager.destroy();
          this.maskManager = null;
        }
      },
      createRenderableComponents: function createRenderableComponents() {
        this.maskManager = new MaskElement(this.data, this, this.globalData);
      },
      addEffects: function addEffects() {
      },
      setMatte: function setMatte() {
      }
    };
    HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;
    HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
    HBaseElement.prototype.buildElementParenting = BaseRenderer.prototype.buildElementParenting;
    function HSolidElement(data2, globalData2, comp2) {
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], HSolidElement);
    HSolidElement.prototype.createContent = function() {
      var rect;
      if (this.data.hasMask) {
        rect = createNS("rect");
        rect.setAttribute("width", this.data.sw);
        rect.setAttribute("height", this.data.sh);
        rect.setAttribute("fill", this.data.sc);
        this.svgElement.setAttribute("width", this.data.sw);
        this.svgElement.setAttribute("height", this.data.sh);
      } else {
        rect = createTag("div");
        rect.style.width = this.data.sw + "px";
        rect.style.height = this.data.sh + "px";
        rect.style.backgroundColor = this.data.sc;
      }
      this.layerElement.appendChild(rect);
    };
    function HShapeElement(data2, globalData2, comp2) {
      this.shapes = [];
      this.shapesData = data2.shapes;
      this.stylesList = [];
      this.shapeModifiers = [];
      this.itemsData = [];
      this.processedElements = [];
      this.animatedContents = [];
      this.shapesContainer = createNS("g");
      this.initElement(data2, globalData2, comp2);
      this.prevViewData = [];
      this.currentBBox = {
        x: 999999,
        y: -999999,
        h: 0,
        w: 0
      };
    }
    extendPrototype([BaseElement, TransformElement, HSolidElement, SVGShapeElement, HBaseElement, HierarchyElement, FrameElement, RenderableElement], HShapeElement);
    HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;
    HShapeElement.prototype.createContent = function() {
      var cont;
      this.baseElement.style.fontSize = 0;
      if (this.data.hasMask) {
        this.layerElement.appendChild(this.shapesContainer);
        cont = this.svgElement;
      } else {
        cont = createNS("svg");
        var size = this.comp.data ? this.comp.data : this.globalData.compSize;
        cont.setAttribute("width", size.w);
        cont.setAttribute("height", size.h);
        cont.appendChild(this.shapesContainer);
        this.layerElement.appendChild(cont);
      }
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], true);
      this.filterUniqueShapes();
      this.shapeCont = cont;
    };
    HShapeElement.prototype.getTransformedPoint = function(transformers, point) {
      var i2;
      var len = transformers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        point = transformers[i2].mProps.v.applyToPointArray(point[0], point[1], 0);
      }
      return point;
    };
    HShapeElement.prototype.calculateShapeBoundingBox = function(item, boundingBox) {
      var shape = item.sh.v;
      var transformers = item.transformers;
      var i2;
      var len = shape._length;
      var vPoint;
      var oPoint;
      var nextIPoint;
      var nextVPoint;
      if (len <= 1) {
        return;
      }
      for (i2 = 0; i2 < len - 1; i2 += 1) {
        vPoint = this.getTransformedPoint(transformers, shape.v[i2]);
        oPoint = this.getTransformedPoint(transformers, shape.o[i2]);
        nextIPoint = this.getTransformedPoint(transformers, shape.i[i2 + 1]);
        nextVPoint = this.getTransformedPoint(transformers, shape.v[i2 + 1]);
        this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
      }
      if (shape.c) {
        vPoint = this.getTransformedPoint(transformers, shape.v[i2]);
        oPoint = this.getTransformedPoint(transformers, shape.o[i2]);
        nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);
        nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);
        this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
      }
    };
    HShapeElement.prototype.checkBounds = function(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {
      this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
      var bounds = this.shapeBoundingBox;
      boundingBox.x = bmMin(bounds.left, boundingBox.x);
      boundingBox.xMax = bmMax(bounds.right, boundingBox.xMax);
      boundingBox.y = bmMin(bounds.top, boundingBox.y);
      boundingBox.yMax = bmMax(bounds.bottom, boundingBox.yMax);
    };
    HShapeElement.prototype.shapeBoundingBox = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    HShapeElement.prototype.tempBoundingBox = {
      x: 0,
      xMax: 0,
      y: 0,
      yMax: 0,
      width: 0,
      height: 0
    };
    HShapeElement.prototype.getBoundsOfCurve = function(p0, p1, p2, p3) {
      var bounds = [[p0[0], p3[0]], [p0[1], p3[1]]];
      for (var a, b, c, t, b2ac, t1, t2, i2 = 0; i2 < 2; ++i2) {
        b = 6 * p0[i2] - 12 * p1[i2] + 6 * p2[i2];
        a = -3 * p0[i2] + 9 * p1[i2] - 9 * p2[i2] + 3 * p3[i2];
        c = 3 * p1[i2] - 3 * p0[i2];
        b |= 0;
        a |= 0;
        c |= 0;
        if (a === 0 && b === 0) ;
        else if (a === 0) {
          t = -c / b;
          if (t > 0 && t < 1) {
            bounds[i2].push(this.calculateF(t, p0, p1, p2, p3, i2));
          }
        } else {
          b2ac = b * b - 4 * c * a;
          if (b2ac >= 0) {
            t1 = (-b + bmSqrt(b2ac)) / (2 * a);
            if (t1 > 0 && t1 < 1) bounds[i2].push(this.calculateF(t1, p0, p1, p2, p3, i2));
            t2 = (-b - bmSqrt(b2ac)) / (2 * a);
            if (t2 > 0 && t2 < 1) bounds[i2].push(this.calculateF(t2, p0, p1, p2, p3, i2));
          }
        }
      }
      this.shapeBoundingBox.left = bmMin.apply(null, bounds[0]);
      this.shapeBoundingBox.top = bmMin.apply(null, bounds[1]);
      this.shapeBoundingBox.right = bmMax.apply(null, bounds[0]);
      this.shapeBoundingBox.bottom = bmMax.apply(null, bounds[1]);
    };
    HShapeElement.prototype.calculateF = function(t, p0, p1, p2, p3, i2) {
      return bmPow(1 - t, 3) * p0[i2] + 3 * bmPow(1 - t, 2) * t * p1[i2] + 3 * (1 - t) * bmPow(t, 2) * p2[i2] + bmPow(t, 3) * p3[i2];
    };
    HShapeElement.prototype.calculateBoundingBox = function(itemsData, boundingBox) {
      var i2;
      var len = itemsData.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (itemsData[i2] && itemsData[i2].sh) {
          this.calculateShapeBoundingBox(itemsData[i2], boundingBox);
        } else if (itemsData[i2] && itemsData[i2].it) {
          this.calculateBoundingBox(itemsData[i2].it, boundingBox);
        } else if (itemsData[i2] && itemsData[i2].style && itemsData[i2].w) {
          this.expandStrokeBoundingBox(itemsData[i2].w, boundingBox);
        }
      }
    };
    HShapeElement.prototype.expandStrokeBoundingBox = function(widthProperty, boundingBox) {
      var width2 = 0;
      if (widthProperty.keyframes) {
        for (var i2 = 0; i2 < widthProperty.keyframes.length; i2 += 1) {
          var kfw = widthProperty.keyframes[i2].s;
          if (kfw > width2) {
            width2 = kfw;
          }
        }
        width2 *= widthProperty.mult;
      } else {
        width2 = widthProperty.v * widthProperty.mult;
      }
      boundingBox.x -= width2;
      boundingBox.xMax += width2;
      boundingBox.y -= width2;
      boundingBox.yMax += width2;
    };
    HShapeElement.prototype.currentBoxContains = function(box) {
      return this.currentBBox.x <= box.x && this.currentBBox.y <= box.y && this.currentBBox.width + this.currentBBox.x >= box.x + box.width && this.currentBBox.height + this.currentBBox.y >= box.y + box.height;
    };
    HShapeElement.prototype.renderInnerContent = function() {
      this._renderShapeFrame();
      if (!this.hidden && (this._isFirstFrame || this._mdf)) {
        var tempBoundingBox = this.tempBoundingBox;
        var max2 = 999999;
        tempBoundingBox.x = max2;
        tempBoundingBox.xMax = -max2;
        tempBoundingBox.y = max2;
        tempBoundingBox.yMax = -max2;
        this.calculateBoundingBox(this.itemsData, tempBoundingBox);
        tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;
        tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y;
        if (this.currentBoxContains(tempBoundingBox)) {
          return;
        }
        var changed = false;
        if (this.currentBBox.w !== tempBoundingBox.width) {
          this.currentBBox.w = tempBoundingBox.width;
          this.shapeCont.setAttribute("width", tempBoundingBox.width);
          changed = true;
        }
        if (this.currentBBox.h !== tempBoundingBox.height) {
          this.currentBBox.h = tempBoundingBox.height;
          this.shapeCont.setAttribute("height", tempBoundingBox.height);
          changed = true;
        }
        if (changed || this.currentBBox.x !== tempBoundingBox.x || this.currentBBox.y !== tempBoundingBox.y) {
          this.currentBBox.w = tempBoundingBox.width;
          this.currentBBox.h = tempBoundingBox.height;
          this.currentBBox.x = tempBoundingBox.x;
          this.currentBBox.y = tempBoundingBox.y;
          this.shapeCont.setAttribute("viewBox", this.currentBBox.x + " " + this.currentBBox.y + " " + this.currentBBox.w + " " + this.currentBBox.h);
          var shapeStyle = this.shapeCont.style;
          var shapeTransform = "translate(" + this.currentBBox.x + "px," + this.currentBBox.y + "px)";
          shapeStyle.transform = shapeTransform;
          shapeStyle.webkitTransform = shapeTransform;
        }
      }
    };
    function HTextElement(data2, globalData2, comp2) {
      this.textSpans = [];
      this.textPaths = [];
      this.currentBBox = {
        x: 999999,
        y: -999999,
        h: 0,
        w: 0
      };
      this.renderType = "svg";
      this.isMasked = false;
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], HTextElement);
    HTextElement.prototype.createContent = function() {
      this.isMasked = this.checkMasks();
      if (this.isMasked) {
        this.renderType = "svg";
        this.compW = this.comp.data.w;
        this.compH = this.comp.data.h;
        this.svgElement.setAttribute("width", this.compW);
        this.svgElement.setAttribute("height", this.compH);
        var g = createNS("g");
        this.maskedElement.appendChild(g);
        this.innerElem = g;
      } else {
        this.renderType = "html";
        this.innerElem = this.layerElement;
      }
      this.checkParenting();
    };
    HTextElement.prototype.buildNewText = function() {
      var documentData = this.textProperty.currentData;
      this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
      var innerElemStyle = this.innerElem.style;
      var textColor = documentData.fc ? this.buildColor(documentData.fc) : "rgba(0,0,0,0)";
      innerElemStyle.fill = textColor;
      innerElemStyle.color = textColor;
      if (documentData.sc) {
        innerElemStyle.stroke = this.buildColor(documentData.sc);
        innerElemStyle.strokeWidth = documentData.sw + "px";
      }
      var fontData = this.globalData.fontManager.getFontByName(documentData.f);
      if (!this.globalData.fontManager.chars) {
        innerElemStyle.fontSize = documentData.finalSize + "px";
        innerElemStyle.lineHeight = documentData.finalSize + "px";
        if (fontData.fClass) {
          this.innerElem.className = fontData.fClass;
        } else {
          innerElemStyle.fontFamily = fontData.fFamily;
          var fWeight = documentData.fWeight;
          var fStyle = documentData.fStyle;
          innerElemStyle.fontStyle = fStyle;
          innerElemStyle.fontWeight = fWeight;
        }
      }
      var i2;
      var len;
      var letters = documentData.l;
      len = letters.length;
      var tSpan;
      var tParent;
      var tCont;
      var matrixHelper = this.mHelper;
      var shapes;
      var shapeStr = "";
      var cnt = 0;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.globalData.fontManager.chars) {
          if (!this.textPaths[cnt]) {
            tSpan = createNS("path");
            tSpan.setAttribute("stroke-linecap", lineCapEnum[1]);
            tSpan.setAttribute("stroke-linejoin", lineJoinEnum[2]);
            tSpan.setAttribute("stroke-miterlimit", "4");
          } else {
            tSpan = this.textPaths[cnt];
          }
          if (!this.isMasked) {
            if (this.textSpans[cnt]) {
              tParent = this.textSpans[cnt];
              tCont = tParent.children[0];
            } else {
              tParent = createTag("div");
              tParent.style.lineHeight = 0;
              tCont = createNS("svg");
              tCont.appendChild(tSpan);
              styleDiv(tParent);
            }
          }
        } else if (!this.isMasked) {
          if (this.textSpans[cnt]) {
            tParent = this.textSpans[cnt];
            tSpan = this.textPaths[cnt];
          } else {
            tParent = createTag("span");
            styleDiv(tParent);
            tSpan = createTag("span");
            styleDiv(tSpan);
            tParent.appendChild(tSpan);
          }
        } else {
          tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS("text");
        }
        if (this.globalData.fontManager.chars) {
          var charData = this.globalData.fontManager.getCharData(documentData.finalText[i2], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
          var shapeData;
          if (charData) {
            shapeData = charData.data;
          } else {
            shapeData = null;
          }
          matrixHelper.reset();
          if (shapeData && shapeData.shapes && shapeData.shapes.length) {
            shapes = shapeData.shapes[0].it;
            matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
            shapeStr = this.createPathShape(matrixHelper, shapes);
            tSpan.setAttribute("d", shapeStr);
          }
          if (!this.isMasked) {
            this.innerElem.appendChild(tParent);
            if (shapeData && shapeData.shapes) {
              document.body.appendChild(tCont);
              var boundingBox = tCont.getBBox();
              tCont.setAttribute("width", boundingBox.width + 2);
              tCont.setAttribute("height", boundingBox.height + 2);
              tCont.setAttribute("viewBox", boundingBox.x - 1 + " " + (boundingBox.y - 1) + " " + (boundingBox.width + 2) + " " + (boundingBox.height + 2));
              var tContStyle = tCont.style;
              var tContTranslation = "translate(" + (boundingBox.x - 1) + "px," + (boundingBox.y - 1) + "px)";
              tContStyle.transform = tContTranslation;
              tContStyle.webkitTransform = tContTranslation;
              letters[i2].yOffset = boundingBox.y - 1;
            } else {
              tCont.setAttribute("width", 1);
              tCont.setAttribute("height", 1);
            }
            tParent.appendChild(tCont);
          } else {
            this.innerElem.appendChild(tSpan);
          }
        } else {
          tSpan.textContent = letters[i2].val;
          tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
          if (!this.isMasked) {
            this.innerElem.appendChild(tParent);
            var tStyle = tSpan.style;
            var tSpanTranslation = "translate3d(0," + -documentData.finalSize / 1.2 + "px,0)";
            tStyle.transform = tSpanTranslation;
            tStyle.webkitTransform = tSpanTranslation;
          } else {
            this.innerElem.appendChild(tSpan);
          }
        }
        if (!this.isMasked) {
          this.textSpans[cnt] = tParent;
        } else {
          this.textSpans[cnt] = tSpan;
        }
        this.textSpans[cnt].style.display = "block";
        this.textPaths[cnt] = tSpan;
        cnt += 1;
      }
      while (cnt < this.textSpans.length) {
        this.textSpans[cnt].style.display = "none";
        cnt += 1;
      }
    };
    HTextElement.prototype.renderInnerContent = function() {
      this.validateText();
      var svgStyle;
      if (this.data.singleShape) {
        if (!this._isFirstFrame && !this.lettersChangedFlag) {
          return;
        }
        if (this.isMasked && this.finalTransform._matMdf) {
          this.svgElement.setAttribute("viewBox", -this.finalTransform.mProp.p.v[0] + " " + -this.finalTransform.mProp.p.v[1] + " " + this.compW + " " + this.compH);
          svgStyle = this.svgElement.style;
          var translation = "translate(" + -this.finalTransform.mProp.p.v[0] + "px," + -this.finalTransform.mProp.p.v[1] + "px)";
          svgStyle.transform = translation;
          svgStyle.webkitTransform = translation;
        }
      }
      this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
      if (!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag) {
        return;
      }
      var i2;
      var len;
      var count = 0;
      var renderedLetters = this.textAnimator.renderedLetters;
      var letters = this.textProperty.currentData.l;
      len = letters.length;
      var renderedLetter;
      var textSpan;
      var textPath;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (letters[i2].n) {
          count += 1;
        } else {
          textSpan = this.textSpans[i2];
          textPath = this.textPaths[i2];
          renderedLetter = renderedLetters[count];
          count += 1;
          if (renderedLetter._mdf.m) {
            if (!this.isMasked) {
              textSpan.style.webkitTransform = renderedLetter.m;
              textSpan.style.transform = renderedLetter.m;
            } else {
              textSpan.setAttribute("transform", renderedLetter.m);
            }
          }
          textSpan.style.opacity = renderedLetter.o;
          if (renderedLetter.sw && renderedLetter._mdf.sw) {
            textPath.setAttribute("stroke-width", renderedLetter.sw);
          }
          if (renderedLetter.sc && renderedLetter._mdf.sc) {
            textPath.setAttribute("stroke", renderedLetter.sc);
          }
          if (renderedLetter.fc && renderedLetter._mdf.fc) {
            textPath.setAttribute("fill", renderedLetter.fc);
            textPath.style.color = renderedLetter.fc;
          }
        }
      }
      if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {
        var boundingBox = this.innerElem.getBBox();
        if (this.currentBBox.w !== boundingBox.width) {
          this.currentBBox.w = boundingBox.width;
          this.svgElement.setAttribute("width", boundingBox.width);
        }
        if (this.currentBBox.h !== boundingBox.height) {
          this.currentBBox.h = boundingBox.height;
          this.svgElement.setAttribute("height", boundingBox.height);
        }
        var margin = 1;
        if (this.currentBBox.w !== boundingBox.width + margin * 2 || this.currentBBox.h !== boundingBox.height + margin * 2 || this.currentBBox.x !== boundingBox.x - margin || this.currentBBox.y !== boundingBox.y - margin) {
          this.currentBBox.w = boundingBox.width + margin * 2;
          this.currentBBox.h = boundingBox.height + margin * 2;
          this.currentBBox.x = boundingBox.x - margin;
          this.currentBBox.y = boundingBox.y - margin;
          this.svgElement.setAttribute("viewBox", this.currentBBox.x + " " + this.currentBBox.y + " " + this.currentBBox.w + " " + this.currentBBox.h);
          svgStyle = this.svgElement.style;
          var svgTransform = "translate(" + this.currentBBox.x + "px," + this.currentBBox.y + "px)";
          svgStyle.transform = svgTransform;
          svgStyle.webkitTransform = svgTransform;
        }
      }
    };
    function HCameraElement(data2, globalData2, comp2) {
      this.initFrame();
      this.initBaseData(data2, globalData2, comp2);
      this.initHierarchy();
      var getProp = PropertyFactory.getProp;
      this.pe = getProp(this, data2.pe, 0, 0, this);
      if (data2.ks.p.s) {
        this.px = getProp(this, data2.ks.p.x, 1, 0, this);
        this.py = getProp(this, data2.ks.p.y, 1, 0, this);
        this.pz = getProp(this, data2.ks.p.z, 1, 0, this);
      } else {
        this.p = getProp(this, data2.ks.p, 1, 0, this);
      }
      if (data2.ks.a) {
        this.a = getProp(this, data2.ks.a, 1, 0, this);
      }
      if (data2.ks.or.k.length && data2.ks.or.k[0].to) {
        var i2;
        var len = data2.ks.or.k.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          data2.ks.or.k[i2].to = null;
          data2.ks.or.k[i2].ti = null;
        }
      }
      this.or = getProp(this, data2.ks.or, 1, degToRads, this);
      this.or.sh = true;
      this.rx = getProp(this, data2.ks.rx, 0, degToRads, this);
      this.ry = getProp(this, data2.ks.ry, 0, degToRads, this);
      this.rz = getProp(this, data2.ks.rz, 0, degToRads, this);
      this.mat = new Matrix();
      this._prevMat = new Matrix();
      this._isFirstFrame = true;
      this.finalTransform = {
        mProp: this
      };
    }
    extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement);
    HCameraElement.prototype.setup = function() {
      var i2;
      var len = this.comp.threeDElements.length;
      var comp2;
      var perspectiveStyle;
      var containerStyle;
      for (i2 = 0; i2 < len; i2 += 1) {
        comp2 = this.comp.threeDElements[i2];
        if (comp2.type === "3d") {
          perspectiveStyle = comp2.perspectiveElem.style;
          containerStyle = comp2.container.style;
          var perspective = this.pe.v + "px";
          var origin = "0px 0px 0px";
          var matrix = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
          perspectiveStyle.perspective = perspective;
          perspectiveStyle.webkitPerspective = perspective;
          containerStyle.transformOrigin = origin;
          containerStyle.mozTransformOrigin = origin;
          containerStyle.webkitTransformOrigin = origin;
          perspectiveStyle.transform = matrix;
          perspectiveStyle.webkitTransform = matrix;
        }
      }
    };
    HCameraElement.prototype.createElements = function() {
    };
    HCameraElement.prototype.hide = function() {
    };
    HCameraElement.prototype.renderFrame = function() {
      var _mdf = this._isFirstFrame;
      var i2;
      var len;
      if (this.hierarchy) {
        len = this.hierarchy.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          _mdf = this.hierarchy[i2].finalTransform.mProp._mdf || _mdf;
        }
      }
      if (_mdf || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {
        this.mat.reset();
        if (this.hierarchy) {
          len = this.hierarchy.length - 1;
          for (i2 = len; i2 >= 0; i2 -= 1) {
            var mTransf = this.hierarchy[i2].finalTransform.mProp;
            this.mat.translate(-mTransf.p.v[0], -mTransf.p.v[1], mTransf.p.v[2]);
            this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);
            this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);
            this.mat.scale(1 / mTransf.s.v[0], 1 / mTransf.s.v[1], 1 / mTransf.s.v[2]);
            this.mat.translate(mTransf.a.v[0], mTransf.a.v[1], mTransf.a.v[2]);
          }
        }
        if (this.p) {
          this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]);
        } else {
          this.mat.translate(-this.px.v, -this.py.v, this.pz.v);
        }
        if (this.a) {
          var diffVector;
          if (this.p) {
            diffVector = [this.p.v[0] - this.a.v[0], this.p.v[1] - this.a.v[1], this.p.v[2] - this.a.v[2]];
          } else {
            diffVector = [this.px.v - this.a.v[0], this.py.v - this.a.v[1], this.pz.v - this.a.v[2]];
          }
          var mag = Math.sqrt(Math.pow(diffVector[0], 2) + Math.pow(diffVector[1], 2) + Math.pow(diffVector[2], 2));
          var lookDir = [diffVector[0] / mag, diffVector[1] / mag, diffVector[2] / mag];
          var lookLengthOnXZ = Math.sqrt(lookDir[2] * lookDir[2] + lookDir[0] * lookDir[0]);
          var mRotationX = Math.atan2(lookDir[1], lookLengthOnXZ);
          var mRotationY = Math.atan2(lookDir[0], -lookDir[2]);
          this.mat.rotateY(mRotationY).rotateX(-mRotationX);
        }
        this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
        this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);
        this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0);
        this.mat.translate(0, 0, this.pe.v);
        var hasMatrixChanged = !this._prevMat.equals(this.mat);
        if ((hasMatrixChanged || this.pe._mdf) && this.comp.threeDElements) {
          len = this.comp.threeDElements.length;
          var comp2;
          var perspectiveStyle;
          var containerStyle;
          for (i2 = 0; i2 < len; i2 += 1) {
            comp2 = this.comp.threeDElements[i2];
            if (comp2.type === "3d") {
              if (hasMatrixChanged) {
                var matValue = this.mat.toCSS();
                containerStyle = comp2.container.style;
                containerStyle.transform = matValue;
                containerStyle.webkitTransform = matValue;
              }
              if (this.pe._mdf) {
                perspectiveStyle = comp2.perspectiveElem.style;
                perspectiveStyle.perspective = this.pe.v + "px";
                perspectiveStyle.webkitPerspective = this.pe.v + "px";
              }
            }
          }
          this.mat.clone(this._prevMat);
        }
      }
      this._isFirstFrame = false;
    };
    HCameraElement.prototype.prepareFrame = function(num) {
      this.prepareProperties(num, true);
    };
    HCameraElement.prototype.destroy = function() {
    };
    HCameraElement.prototype.getBaseElement = function() {
      return null;
    };
    function HImageElement(data2, globalData2, comp2) {
      this.assetData = globalData2.getAssetData(data2.refId);
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, HBaseElement, HSolidElement, HierarchyElement, FrameElement, RenderableElement], HImageElement);
    HImageElement.prototype.createContent = function() {
      var assetPath = this.globalData.getAssetsPath(this.assetData);
      var img = new Image();
      if (this.data.hasMask) {
        this.imageElem = createNS("image");
        this.imageElem.setAttribute("width", this.assetData.w + "px");
        this.imageElem.setAttribute("height", this.assetData.h + "px");
        this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", assetPath);
        this.layerElement.appendChild(this.imageElem);
        this.baseElement.setAttribute("width", this.assetData.w);
        this.baseElement.setAttribute("height", this.assetData.h);
      } else {
        this.layerElement.appendChild(img);
      }
      img.crossOrigin = "anonymous";
      img.src = assetPath;
      if (this.data.ln) {
        this.baseElement.setAttribute("id", this.data.ln);
      }
    };
    function HybridRendererBase(animationItem, config) {
      this.animationItem = animationItem;
      this.layers = null;
      this.renderedFrame = -1;
      this.renderConfig = {
        className: config && config.className || "",
        imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || "xMidYMid slice",
        hideOnTransparent: !(config && config.hideOnTransparent === false),
        filterSize: {
          width: config && config.filterSize && config.filterSize.width || "400%",
          height: config && config.filterSize && config.filterSize.height || "400%",
          x: config && config.filterSize && config.filterSize.x || "-100%",
          y: config && config.filterSize && config.filterSize.y || "-100%"
        }
      };
      this.globalData = {
        _mdf: false,
        frameNum: -1,
        renderConfig: this.renderConfig
      };
      this.pendingElements = [];
      this.elements = [];
      this.threeDElements = [];
      this.destroyed = false;
      this.camera = null;
      this.supports3d = true;
      this.rendererType = "html";
    }
    extendPrototype([BaseRenderer], HybridRendererBase);
    HybridRendererBase.prototype.buildItem = SVGRenderer.prototype.buildItem;
    HybridRendererBase.prototype.checkPendingElements = function() {
      while (this.pendingElements.length) {
        var element = this.pendingElements.pop();
        element.checkParenting();
      }
    };
    HybridRendererBase.prototype.appendElementInPos = function(element, pos) {
      var newDOMElement = element.getBaseElement();
      if (!newDOMElement) {
        return;
      }
      var layer = this.layers[pos];
      if (!layer.ddd || !this.supports3d) {
        if (this.threeDElements) {
          this.addTo3dContainer(newDOMElement, pos);
        } else {
          var i2 = 0;
          var nextDOMElement;
          var nextLayer;
          var tmpDOMElement;
          while (i2 < pos) {
            if (this.elements[i2] && this.elements[i2] !== true && this.elements[i2].getBaseElement) {
              nextLayer = this.elements[i2];
              tmpDOMElement = this.layers[i2].ddd ? this.getThreeDContainerByPos(i2) : nextLayer.getBaseElement();
              nextDOMElement = tmpDOMElement || nextDOMElement;
            }
            i2 += 1;
          }
          if (nextDOMElement) {
            if (!layer.ddd || !this.supports3d) {
              this.layerElement.insertBefore(newDOMElement, nextDOMElement);
            }
          } else if (!layer.ddd || !this.supports3d) {
            this.layerElement.appendChild(newDOMElement);
          }
        }
      } else {
        this.addTo3dContainer(newDOMElement, pos);
      }
    };
    HybridRendererBase.prototype.createShape = function(data2) {
      if (!this.supports3d) {
        return new SVGShapeElement(data2, this.globalData, this);
      }
      return new HShapeElement(data2, this.globalData, this);
    };
    HybridRendererBase.prototype.createText = function(data2) {
      if (!this.supports3d) {
        return new SVGTextLottieElement(data2, this.globalData, this);
      }
      return new HTextElement(data2, this.globalData, this);
    };
    HybridRendererBase.prototype.createCamera = function(data2) {
      this.camera = new HCameraElement(data2, this.globalData, this);
      return this.camera;
    };
    HybridRendererBase.prototype.createImage = function(data2) {
      if (!this.supports3d) {
        return new IImageElement(data2, this.globalData, this);
      }
      return new HImageElement(data2, this.globalData, this);
    };
    HybridRendererBase.prototype.createSolid = function(data2) {
      if (!this.supports3d) {
        return new ISolidElement(data2, this.globalData, this);
      }
      return new HSolidElement(data2, this.globalData, this);
    };
    HybridRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;
    HybridRendererBase.prototype.getThreeDContainerByPos = function(pos) {
      var i2 = 0;
      var len = this.threeDElements.length;
      while (i2 < len) {
        if (this.threeDElements[i2].startPos <= pos && this.threeDElements[i2].endPos >= pos) {
          return this.threeDElements[i2].perspectiveElem;
        }
        i2 += 1;
      }
      return null;
    };
    HybridRendererBase.prototype.createThreeDContainer = function(pos, type) {
      var perspectiveElem = createTag("div");
      var style;
      var containerStyle;
      styleDiv(perspectiveElem);
      var container2 = createTag("div");
      styleDiv(container2);
      if (type === "3d") {
        style = perspectiveElem.style;
        style.width = this.globalData.compSize.w + "px";
        style.height = this.globalData.compSize.h + "px";
        var center = "50% 50%";
        style.webkitTransformOrigin = center;
        style.mozTransformOrigin = center;
        style.transformOrigin = center;
        containerStyle = container2.style;
        var matrix = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
        containerStyle.transform = matrix;
        containerStyle.webkitTransform = matrix;
      }
      perspectiveElem.appendChild(container2);
      var threeDContainerData = {
        container: container2,
        perspectiveElem,
        startPos: pos,
        endPos: pos,
        type
      };
      this.threeDElements.push(threeDContainerData);
      return threeDContainerData;
    };
    HybridRendererBase.prototype.build3dContainers = function() {
      var i2;
      var len = this.layers.length;
      var lastThreeDContainerData;
      var currentContainer = "";
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.layers[i2].ddd && this.layers[i2].ty !== 3) {
          if (currentContainer !== "3d") {
            currentContainer = "3d";
            lastThreeDContainerData = this.createThreeDContainer(i2, "3d");
          }
          lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i2);
        } else {
          if (currentContainer !== "2d") {
            currentContainer = "2d";
            lastThreeDContainerData = this.createThreeDContainer(i2, "2d");
          }
          lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i2);
        }
      }
      len = this.threeDElements.length;
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        this.resizerElem.appendChild(this.threeDElements[i2].perspectiveElem);
      }
    };
    HybridRendererBase.prototype.addTo3dContainer = function(elem2, pos) {
      var i2 = 0;
      var len = this.threeDElements.length;
      while (i2 < len) {
        if (pos <= this.threeDElements[i2].endPos) {
          var j2 = this.threeDElements[i2].startPos;
          var nextElement;
          while (j2 < pos) {
            if (this.elements[j2] && this.elements[j2].getBaseElement) {
              nextElement = this.elements[j2].getBaseElement();
            }
            j2 += 1;
          }
          if (nextElement) {
            this.threeDElements[i2].container.insertBefore(elem2, nextElement);
          } else {
            this.threeDElements[i2].container.appendChild(elem2);
          }
          break;
        }
        i2 += 1;
      }
    };
    HybridRendererBase.prototype.configAnimation = function(animData) {
      var resizerElem = createTag("div");
      var wrapper2 = this.animationItem.wrapper;
      var style = resizerElem.style;
      style.width = animData.w + "px";
      style.height = animData.h + "px";
      this.resizerElem = resizerElem;
      styleDiv(resizerElem);
      style.transformStyle = "flat";
      style.mozTransformStyle = "flat";
      style.webkitTransformStyle = "flat";
      if (this.renderConfig.className) {
        resizerElem.setAttribute("class", this.renderConfig.className);
      }
      wrapper2.appendChild(resizerElem);
      style.overflow = "hidden";
      var svg = createNS("svg");
      svg.setAttribute("width", "1");
      svg.setAttribute("height", "1");
      styleDiv(svg);
      this.resizerElem.appendChild(svg);
      var defs = createNS("defs");
      svg.appendChild(defs);
      this.data = animData;
      this.setupGlobalData(animData, svg);
      this.globalData.defs = defs;
      this.layers = animData.layers;
      this.layerElement = this.resizerElem;
      this.build3dContainers();
      this.updateContainerSize();
    };
    HybridRendererBase.prototype.destroy = function() {
      if (this.animationItem.wrapper) {
        this.animationItem.wrapper.innerText = "";
      }
      this.animationItem.container = null;
      this.globalData.defs = null;
      var i2;
      var len = this.layers ? this.layers.length : 0;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.elements[i2] && this.elements[i2].destroy) {
          this.elements[i2].destroy();
        }
      }
      this.elements.length = 0;
      this.destroyed = true;
      this.animationItem = null;
    };
    HybridRendererBase.prototype.updateContainerSize = function() {
      var elementWidth = this.animationItem.wrapper.offsetWidth;
      var elementHeight = this.animationItem.wrapper.offsetHeight;
      var elementRel = elementWidth / elementHeight;
      var animationRel = this.globalData.compSize.w / this.globalData.compSize.h;
      var sx;
      var sy;
      var tx;
      var ty;
      if (animationRel > elementRel) {
        sx = elementWidth / this.globalData.compSize.w;
        sy = elementWidth / this.globalData.compSize.w;
        tx = 0;
        ty = (elementHeight - this.globalData.compSize.h * (elementWidth / this.globalData.compSize.w)) / 2;
      } else {
        sx = elementHeight / this.globalData.compSize.h;
        sy = elementHeight / this.globalData.compSize.h;
        tx = (elementWidth - this.globalData.compSize.w * (elementHeight / this.globalData.compSize.h)) / 2;
        ty = 0;
      }
      var style = this.resizerElem.style;
      style.webkitTransform = "matrix3d(" + sx + ",0,0,0,0," + sy + ",0,0,0,0,1,0," + tx + "," + ty + ",0,1)";
      style.transform = style.webkitTransform;
    };
    HybridRendererBase.prototype.renderFrame = SVGRenderer.prototype.renderFrame;
    HybridRendererBase.prototype.hide = function() {
      this.resizerElem.style.display = "none";
    };
    HybridRendererBase.prototype.show = function() {
      this.resizerElem.style.display = "block";
    };
    HybridRendererBase.prototype.initItems = function() {
      this.buildAllItems();
      if (this.camera) {
        this.camera.setup();
      } else {
        var cWidth = this.globalData.compSize.w;
        var cHeight = this.globalData.compSize.h;
        var i2;
        var len = this.threeDElements.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          var style = this.threeDElements[i2].perspectiveElem.style;
          style.webkitPerspective = Math.sqrt(Math.pow(cWidth, 2) + Math.pow(cHeight, 2)) + "px";
          style.perspective = style.webkitPerspective;
        }
      }
    };
    HybridRendererBase.prototype.searchExtraCompositions = function(assets) {
      var i2;
      var len = assets.length;
      var floatingContainer = createTag("div");
      for (i2 = 0; i2 < len; i2 += 1) {
        if (assets[i2].xt) {
          var comp2 = this.createComp(assets[i2], floatingContainer, this.globalData.comp, null);
          comp2.initExpressions();
          this.globalData.projectInterface.registerComposition(comp2);
        }
      }
    };
    function HCompElement(data2, globalData2, comp2) {
      this.layers = data2.layers;
      this.supports3d = !data2.hasMask;
      this.completeLayers = false;
      this.pendingElements = [];
      this.elements = this.layers ? createSizedArray(this.layers.length) : [];
      this.initElement(data2, globalData2, comp2);
      this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
        _placeholder: true
      };
    }
    extendPrototype([HybridRendererBase, ICompElement, HBaseElement], HCompElement);
    HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;
    HCompElement.prototype.createContainerElements = function() {
      this._createBaseContainerElements();
      if (this.data.hasMask) {
        this.svgElement.setAttribute("width", this.data.w);
        this.svgElement.setAttribute("height", this.data.h);
        this.transformedElement = this.baseElement;
      } else {
        this.transformedElement = this.layerElement;
      }
    };
    HCompElement.prototype.addTo3dContainer = function(elem2, pos) {
      var j2 = 0;
      var nextElement;
      while (j2 < pos) {
        if (this.elements[j2] && this.elements[j2].getBaseElement) {
          nextElement = this.elements[j2].getBaseElement();
        }
        j2 += 1;
      }
      if (nextElement) {
        this.layerElement.insertBefore(elem2, nextElement);
      } else {
        this.layerElement.appendChild(elem2);
      }
    };
    HCompElement.prototype.createComp = function(data2) {
      if (!this.supports3d) {
        return new SVGCompElement(data2, this.globalData, this);
      }
      return new HCompElement(data2, this.globalData, this);
    };
    function HybridRenderer(animationItem, config) {
      this.animationItem = animationItem;
      this.layers = null;
      this.renderedFrame = -1;
      this.renderConfig = {
        className: config && config.className || "",
        imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || "xMidYMid slice",
        hideOnTransparent: !(config && config.hideOnTransparent === false),
        filterSize: {
          width: config && config.filterSize && config.filterSize.width || "400%",
          height: config && config.filterSize && config.filterSize.height || "400%",
          x: config && config.filterSize && config.filterSize.x || "-100%",
          y: config && config.filterSize && config.filterSize.y || "-100%"
        },
        runExpressions: !config || config.runExpressions === void 0 || config.runExpressions
      };
      this.globalData = {
        _mdf: false,
        frameNum: -1,
        renderConfig: this.renderConfig
      };
      this.pendingElements = [];
      this.elements = [];
      this.threeDElements = [];
      this.destroyed = false;
      this.camera = null;
      this.supports3d = true;
      this.rendererType = "html";
    }
    extendPrototype([HybridRendererBase], HybridRenderer);
    HybridRenderer.prototype.createComp = function(data2) {
      if (!this.supports3d) {
        return new SVGCompElement(data2, this.globalData, this);
      }
      return new HCompElement(data2, this.globalData, this);
    };
    var CompExpressionInterface = /* @__PURE__ */ function() {
      return function(comp2) {
        function _thisLayerFunction(name2) {
          var i2 = 0;
          var len = comp2.layers.length;
          while (i2 < len) {
            if (comp2.layers[i2].nm === name2 || comp2.layers[i2].ind === name2) {
              return comp2.elements[i2].layerInterface;
            }
            i2 += 1;
          }
          return null;
        }
        Object.defineProperty(_thisLayerFunction, "_name", {
          value: comp2.data.nm
        });
        _thisLayerFunction.layer = _thisLayerFunction;
        _thisLayerFunction.pixelAspect = 1;
        _thisLayerFunction.height = comp2.data.h || comp2.globalData.compSize.h;
        _thisLayerFunction.width = comp2.data.w || comp2.globalData.compSize.w;
        _thisLayerFunction.pixelAspect = 1;
        _thisLayerFunction.frameDuration = 1 / comp2.globalData.frameRate;
        _thisLayerFunction.displayStartTime = 0;
        _thisLayerFunction.numLayers = comp2.layers.length;
        return _thisLayerFunction;
      };
    }();
    function _typeof$2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$2 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$2 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$2(obj);
    }
    function seedRandom(pool, math) {
      var global2 = this, width2 = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width2, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask2 = width2 - 1, nodecrypto;
      function seedrandom(seed, options, callback) {
        var key2 = [];
        options = options === true ? {
          entropy: true
        } : options || {};
        var shortseed = mixkey(flatten(options.entropy ? [seed, tostring(pool)] : seed === null ? autoseed() : seed, 3), key2);
        var arc4 = new ARC4(key2);
        var prng = function prng2() {
          var n = arc4.g(chunks), d = startdenom, x = 0;
          while (n < significance) {
            n = (n + x) * width2;
            d *= width2;
            x = arc4.g(1);
          }
          while (n >= overflow) {
            n /= 2;
            d /= 2;
            x >>>= 1;
          }
          return (n + x) / d;
        };
        prng.int32 = function() {
          return arc4.g(4) | 0;
        };
        prng.quick = function() {
          return arc4.g(4) / 4294967296;
        };
        prng["double"] = prng;
        mixkey(tostring(arc4.S), pool);
        return (options.pass || callback || function(prng2, seed2, is_math_call, state) {
          if (state) {
            if (state.S) {
              copy(state, arc4);
            }
            prng2.state = function() {
              return copy(arc4, {});
            };
          }
          if (is_math_call) {
            math[rngname] = prng2;
            return seed2;
          } else return prng2;
        })(prng, shortseed, "global" in options ? options.global : this == math, options.state);
      }
      math["seed" + rngname] = seedrandom;
      function ARC4(key2) {
        var t, keylen = key2.length, me = this, i2 = 0, j2 = me.i = me.j = 0, s = me.S = [];
        if (!keylen) {
          key2 = [keylen++];
        }
        while (i2 < width2) {
          s[i2] = i2++;
        }
        for (i2 = 0; i2 < width2; i2++) {
          s[i2] = s[j2 = mask2 & j2 + key2[i2 % keylen] + (t = s[i2])];
          s[j2] = t;
        }
        me.g = function(count) {
          var t2, r = 0, i3 = me.i, j3 = me.j, s2 = me.S;
          while (count--) {
            t2 = s2[i3 = mask2 & i3 + 1];
            r = r * width2 + s2[mask2 & (s2[i3] = s2[j3 = mask2 & j3 + t2]) + (s2[j3] = t2)];
          }
          me.i = i3;
          me.j = j3;
          return r;
        };
      }
      function copy(f, t) {
        t.i = f.i;
        t.j = f.j;
        t.S = f.S.slice();
        return t;
      }
      function flatten(obj, depth) {
        var result = [], typ = _typeof$2(obj), prop;
        if (depth && typ == "object") {
          for (prop in obj) {
            try {
              result.push(flatten(obj[prop], depth - 1));
            } catch (e) {
            }
          }
        }
        return result.length ? result : typ == "string" ? obj : obj + "\0";
      }
      function mixkey(seed, key2) {
        var stringseed = seed + "", smear, j2 = 0;
        while (j2 < stringseed.length) {
          key2[mask2 & j2] = mask2 & (smear ^= key2[mask2 & j2] * 19) + stringseed.charCodeAt(j2++);
        }
        return tostring(key2);
      }
      function autoseed() {
        try {
          if (nodecrypto) ;
          var out = new Uint8Array(width2);
          (global2.crypto || global2.msCrypto).getRandomValues(out);
          return tostring(out);
        } catch (e) {
          var browser = global2.navigator, plugins = browser && browser.plugins;
          return [+/* @__PURE__ */ new Date(), global2, plugins, global2.screen, tostring(pool)];
        }
      }
      function tostring(a) {
        return String.fromCharCode.apply(0, a);
      }
      mixkey(math.random(), pool);
    }
    function initialize$2(BMMath2) {
      seedRandom([], BMMath2);
    }
    var propTypes = {
      SHAPE: "shape"
    };
    function _typeof$1(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$1 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$1 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$1(obj);
    }
    var ExpressionManager = function() {
      var ob = {};
      var Math = BMMath;
      var window = null;
      var document = null;
      var XMLHttpRequest = null;
      var fetch = null;
      var frames = null;
      var _lottieGlobal = {};
      initialize$2(BMMath);
      function resetFrame() {
        _lottieGlobal = {};
      }
      function $bm_isInstanceOfArray(arr) {
        return arr.constructor === Array || arr.constructor === Float32Array;
      }
      function isNumerable(tOfV, v2) {
        return tOfV === "number" || v2 instanceof Number || tOfV === "boolean" || tOfV === "string";
      }
      function $bm_neg(a) {
        var tOfA = _typeof$1(a);
        if (tOfA === "number" || a instanceof Number || tOfA === "boolean") {
          return -a;
        }
        if ($bm_isInstanceOfArray(a)) {
          var i2;
          var lenA = a.length;
          var retArr = [];
          for (i2 = 0; i2 < lenA; i2 += 1) {
            retArr[i2] = -a[i2];
          }
          return retArr;
        }
        if (a.propType) {
          return a.v;
        }
        return -a;
      }
      var easeInBez = BezierFactory.getBezierEasing(0.333, 0, 0.833, 0.833, "easeIn").get;
      var easeOutBez = BezierFactory.getBezierEasing(0.167, 0.167, 0.667, 1, "easeOut").get;
      var easeInOutBez = BezierFactory.getBezierEasing(0.33, 0, 0.667, 1, "easeInOut").get;
      function sum(a, b) {
        var tOfA = _typeof$1(a);
        var tOfB = _typeof$1(b);
        if (isNumerable(tOfA, a) && isNumerable(tOfB, b) || tOfA === "string" || tOfB === "string") {
          return a + b;
        }
        if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
          a = a.slice(0);
          a[0] += b;
          return a;
        }
        if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
          b = b.slice(0);
          b[0] = a + b[0];
          return b;
        }
        if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
          var i2 = 0;
          var lenA = a.length;
          var lenB = b.length;
          var retArr = [];
          while (i2 < lenA || i2 < lenB) {
            if ((typeof a[i2] === "number" || a[i2] instanceof Number) && (typeof b[i2] === "number" || b[i2] instanceof Number)) {
              retArr[i2] = a[i2] + b[i2];
            } else {
              retArr[i2] = b[i2] === void 0 ? a[i2] : a[i2] || b[i2];
            }
            i2 += 1;
          }
          return retArr;
        }
        return 0;
      }
      var add = sum;
      function sub(a, b) {
        var tOfA = _typeof$1(a);
        var tOfB = _typeof$1(b);
        if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
          if (tOfA === "string") {
            a = parseInt(a, 10);
          }
          if (tOfB === "string") {
            b = parseInt(b, 10);
          }
          return a - b;
        }
        if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
          a = a.slice(0);
          a[0] -= b;
          return a;
        }
        if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
          b = b.slice(0);
          b[0] = a - b[0];
          return b;
        }
        if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
          var i2 = 0;
          var lenA = a.length;
          var lenB = b.length;
          var retArr = [];
          while (i2 < lenA || i2 < lenB) {
            if ((typeof a[i2] === "number" || a[i2] instanceof Number) && (typeof b[i2] === "number" || b[i2] instanceof Number)) {
              retArr[i2] = a[i2] - b[i2];
            } else {
              retArr[i2] = b[i2] === void 0 ? a[i2] : a[i2] || b[i2];
            }
            i2 += 1;
          }
          return retArr;
        }
        return 0;
      }
      function mul(a, b) {
        var tOfA = _typeof$1(a);
        var tOfB = _typeof$1(b);
        var arr;
        if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
          return a * b;
        }
        var i2;
        var len;
        if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
          len = a.length;
          arr = createTypedArray("float32", len);
          for (i2 = 0; i2 < len; i2 += 1) {
            arr[i2] = a[i2] * b;
          }
          return arr;
        }
        if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
          len = b.length;
          arr = createTypedArray("float32", len);
          for (i2 = 0; i2 < len; i2 += 1) {
            arr[i2] = a * b[i2];
          }
          return arr;
        }
        return 0;
      }
      function div(a, b) {
        var tOfA = _typeof$1(a);
        var tOfB = _typeof$1(b);
        var arr;
        if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
          return a / b;
        }
        var i2;
        var len;
        if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
          len = a.length;
          arr = createTypedArray("float32", len);
          for (i2 = 0; i2 < len; i2 += 1) {
            arr[i2] = a[i2] / b;
          }
          return arr;
        }
        if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
          len = b.length;
          arr = createTypedArray("float32", len);
          for (i2 = 0; i2 < len; i2 += 1) {
            arr[i2] = a / b[i2];
          }
          return arr;
        }
        return 0;
      }
      function mod(a, b) {
        if (typeof a === "string") {
          a = parseInt(a, 10);
        }
        if (typeof b === "string") {
          b = parseInt(b, 10);
        }
        return a % b;
      }
      var $bm_sum = sum;
      var $bm_sub = sub;
      var $bm_mul = mul;
      var $bm_div = div;
      var $bm_mod = mod;
      function clamp(num, min2, max2) {
        if (min2 > max2) {
          var mm = max2;
          max2 = min2;
          min2 = mm;
        }
        return Math.min(Math.max(num, min2), max2);
      }
      function radiansToDegrees(val2) {
        return val2 / degToRads;
      }
      var radians_to_degrees = radiansToDegrees;
      function degreesToRadians(val2) {
        return val2 * degToRads;
      }
      var degrees_to_radians = radiansToDegrees;
      var helperLengthArray = [0, 0, 0, 0, 0, 0];
      function length(arr1, arr2) {
        if (typeof arr1 === "number" || arr1 instanceof Number) {
          arr2 = arr2 || 0;
          return Math.abs(arr1 - arr2);
        }
        if (!arr2) {
          arr2 = helperLengthArray;
        }
        var i2;
        var len = Math.min(arr1.length, arr2.length);
        var addedLength = 0;
        for (i2 = 0; i2 < len; i2 += 1) {
          addedLength += Math.pow(arr2[i2] - arr1[i2], 2);
        }
        return Math.sqrt(addedLength);
      }
      function normalize(vec) {
        return div(vec, length(vec));
      }
      function rgbToHsl(val2) {
        var r = val2[0];
        var g = val2[1];
        var b = val2[2];
        var max2 = Math.max(r, g, b);
        var min2 = Math.min(r, g, b);
        var h;
        var s;
        var l = (max2 + min2) / 2;
        if (max2 === min2) {
          h = 0;
          s = 0;
        } else {
          var d = max2 - min2;
          s = l > 0.5 ? d / (2 - max2 - min2) : d / (max2 + min2);
          switch (max2) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;
            case g:
              h = (b - r) / d + 2;
              break;
            case b:
              h = (r - g) / d + 4;
              break;
          }
          h /= 6;
        }
        return [h, s, l, val2[3]];
      }
      function hue2rgb(p, q, t) {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1 / 6) return p + (q - p) * 6 * t;
        if (t < 1 / 2) return q;
        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
        return p;
      }
      function hslToRgb(val2) {
        var h = val2[0];
        var s = val2[1];
        var l = val2[2];
        var r;
        var g;
        var b;
        if (s === 0) {
          r = l;
          b = l;
          g = l;
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = hue2rgb(p, q, h + 1 / 3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1 / 3);
        }
        return [r, g, b, val2[3]];
      }
      function linear(t, tMin, tMax, value1, value2) {
        if (value1 === void 0 || value2 === void 0) {
          value1 = tMin;
          value2 = tMax;
          tMin = 0;
          tMax = 1;
        }
        if (tMax < tMin) {
          var _tMin = tMax;
          tMax = tMin;
          tMin = _tMin;
        }
        if (t <= tMin) {
          return value1;
        }
        if (t >= tMax) {
          return value2;
        }
        var perc = tMax === tMin ? 0 : (t - tMin) / (tMax - tMin);
        if (!value1.length) {
          return value1 + (value2 - value1) * perc;
        }
        var i2;
        var len = value1.length;
        var arr = createTypedArray("float32", len);
        for (i2 = 0; i2 < len; i2 += 1) {
          arr[i2] = value1[i2] + (value2[i2] - value1[i2]) * perc;
        }
        return arr;
      }
      function random(min2, max2) {
        if (max2 === void 0) {
          if (min2 === void 0) {
            min2 = 0;
            max2 = 1;
          } else {
            max2 = min2;
            min2 = void 0;
          }
        }
        if (max2.length) {
          var i2;
          var len = max2.length;
          if (!min2) {
            min2 = createTypedArray("float32", len);
          }
          var arr = createTypedArray("float32", len);
          var rnd = BMMath.random();
          for (i2 = 0; i2 < len; i2 += 1) {
            arr[i2] = min2[i2] + rnd * (max2[i2] - min2[i2]);
          }
          return arr;
        }
        if (min2 === void 0) {
          min2 = 0;
        }
        var rndm = BMMath.random();
        return min2 + rndm * (max2 - min2);
      }
      function createPath(points, inTangents, outTangents, closed) {
        var i2;
        var len = points.length;
        var path = shapePool.newElement();
        path.setPathData(!!closed, len);
        var arrPlaceholder = [0, 0];
        var inVertexPoint;
        var outVertexPoint;
        for (i2 = 0; i2 < len; i2 += 1) {
          inVertexPoint = inTangents && inTangents[i2] ? inTangents[i2] : arrPlaceholder;
          outVertexPoint = outTangents && outTangents[i2] ? outTangents[i2] : arrPlaceholder;
          path.setTripleAt(points[i2][0], points[i2][1], outVertexPoint[0] + points[i2][0], outVertexPoint[1] + points[i2][1], inVertexPoint[0] + points[i2][0], inVertexPoint[1] + points[i2][1], i2, true);
        }
        return path;
      }
      function initiateExpression(elem, data, property) {
        function noOp(_value) {
          return _value;
        }
        if (!elem.globalData.renderConfig.runExpressions) {
          return noOp;
        }
        var val = data.x;
        var needsVelocity = /velocity(?![\w\d])/.test(val);
        var _needsRandom = val.indexOf("random") !== -1;
        var elemType = elem.data.ty;
        var transform;
        var $bm_transform;
        var content;
        var effect;
        var thisProperty = property;
        thisProperty.valueAtTime = thisProperty.getValueAtTime;
        Object.defineProperty(thisProperty, "value", {
          get: function get2() {
            return thisProperty.v;
          }
        });
        elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate;
        elem.comp.displayStartTime = 0;
        var inPoint = elem.data.ip / elem.comp.globalData.frameRate;
        var outPoint = elem.data.op / elem.comp.globalData.frameRate;
        var width = elem.data.sw ? elem.data.sw : 0;
        var height = elem.data.sh ? elem.data.sh : 0;
        var name = elem.data.nm;
        var loopIn;
        var loop_in;
        var loopOut;
        var loop_out;
        var smooth;
        var toWorld;
        var fromWorld;
        var fromComp;
        var toComp;
        var fromCompToSurface;
        var position;
        var rotation;
        var anchorPoint;
        var scale;
        var thisLayer;
        var thisComp;
        var mask;
        var valueAtTime;
        var velocityAtTime;
        var scoped_bm_rt;
        var expression_function = eval("[function _expression_function(){" + val + ";scoped_bm_rt=$bm_rt}]")[0];
        var numKeys = property.kf ? data.k.length : 0;
        var active = !this.data || this.data.hd !== true;
        var wiggle = (function wiggle2(freq, amp) {
          var iWiggle;
          var j2;
          var lenWiggle = this.pv.length ? this.pv.length : 1;
          var addedAmps = createTypedArray("float32", lenWiggle);
          freq = 5;
          var iterations = Math.floor(time * freq);
          iWiggle = 0;
          j2 = 0;
          while (iWiggle < iterations) {
            for (j2 = 0; j2 < lenWiggle; j2 += 1) {
              addedAmps[j2] += -amp + amp * 2 * BMMath.random();
            }
            iWiggle += 1;
          }
          var periods = time * freq;
          var perc = periods - Math.floor(periods);
          var arr = createTypedArray("float32", lenWiggle);
          if (lenWiggle > 1) {
            for (j2 = 0; j2 < lenWiggle; j2 += 1) {
              arr[j2] = this.pv[j2] + addedAmps[j2] + (-amp + amp * 2 * BMMath.random()) * perc;
            }
            return arr;
          }
          return this.pv + addedAmps[0] + (-amp + amp * 2 * BMMath.random()) * perc;
        }).bind(this);
        if (thisProperty.loopIn) {
          loopIn = thisProperty.loopIn.bind(thisProperty);
          loop_in = loopIn;
        }
        if (thisProperty.loopOut) {
          loopOut = thisProperty.loopOut.bind(thisProperty);
          loop_out = loopOut;
        }
        if (thisProperty.smooth) {
          smooth = thisProperty.smooth.bind(thisProperty);
        }
        function loopInDuration(type, duration) {
          return loopIn(type, duration, true);
        }
        function loopOutDuration(type, duration) {
          return loopOut(type, duration, true);
        }
        if (this.getValueAtTime) {
          valueAtTime = this.getValueAtTime.bind(this);
        }
        if (this.getVelocityAtTime) {
          velocityAtTime = this.getVelocityAtTime.bind(this);
        }
        var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);
        function lookAt(elem1, elem2) {
          var fVec = [elem2[0] - elem1[0], elem2[1] - elem1[1], elem2[2] - elem1[2]];
          var pitch = Math.atan2(fVec[0], Math.sqrt(fVec[1] * fVec[1] + fVec[2] * fVec[2])) / degToRads;
          var yaw = -Math.atan2(fVec[1], fVec[2]) / degToRads;
          return [yaw, pitch, 0];
        }
        function easeOut(t, tMin, tMax, val1, val2) {
          return applyEase(easeOutBez, t, tMin, tMax, val1, val2);
        }
        function easeIn(t, tMin, tMax, val1, val2) {
          return applyEase(easeInBez, t, tMin, tMax, val1, val2);
        }
        function ease(t, tMin, tMax, val1, val2) {
          return applyEase(easeInOutBez, t, tMin, tMax, val1, val2);
        }
        function applyEase(fn, t, tMin, tMax, val1, val2) {
          if (val1 === void 0) {
            val1 = tMin;
            val2 = tMax;
          } else {
            t = (t - tMin) / (tMax - tMin);
          }
          if (t > 1) {
            t = 1;
          } else if (t < 0) {
            t = 0;
          }
          var mult = fn(t);
          if ($bm_isInstanceOfArray(val1)) {
            var iKey;
            var lenKey = val1.length;
            var arr = createTypedArray("float32", lenKey);
            for (iKey = 0; iKey < lenKey; iKey += 1) {
              arr[iKey] = (val2[iKey] - val1[iKey]) * mult + val1[iKey];
            }
            return arr;
          }
          return (val2 - val1) * mult + val1;
        }
        function nearestKey(time2) {
          var iKey;
          var lenKey = data.k.length;
          var index2;
          var keyTime;
          if (!data.k.length || typeof data.k[0] === "number") {
            index2 = 0;
            keyTime = 0;
          } else {
            index2 = -1;
            time2 *= elem.comp.globalData.frameRate;
            if (time2 < data.k[0].t) {
              index2 = 1;
              keyTime = data.k[0].t;
            } else {
              for (iKey = 0; iKey < lenKey - 1; iKey += 1) {
                if (time2 === data.k[iKey].t) {
                  index2 = iKey + 1;
                  keyTime = data.k[iKey].t;
                  break;
                } else if (time2 > data.k[iKey].t && time2 < data.k[iKey + 1].t) {
                  if (time2 - data.k[iKey].t > data.k[iKey + 1].t - time2) {
                    index2 = iKey + 2;
                    keyTime = data.k[iKey + 1].t;
                  } else {
                    index2 = iKey + 1;
                    keyTime = data.k[iKey].t;
                  }
                  break;
                }
              }
              if (index2 === -1) {
                index2 = iKey + 1;
                keyTime = data.k[iKey].t;
              }
            }
          }
          var obKey = {};
          obKey.index = index2;
          obKey.time = keyTime / elem.comp.globalData.frameRate;
          return obKey;
        }
        function key(ind) {
          var obKey;
          var iKey;
          var lenKey;
          if (!data.k.length || typeof data.k[0] === "number") {
            throw new Error("The property has no keyframe at index " + ind);
          }
          ind -= 1;
          obKey = {
            time: data.k[ind].t / elem.comp.globalData.frameRate,
            value: []
          };
          var arr = Object.prototype.hasOwnProperty.call(data.k[ind], "s") ? data.k[ind].s : data.k[ind - 1].e;
          lenKey = arr.length;
          for (iKey = 0; iKey < lenKey; iKey += 1) {
            obKey[iKey] = arr[iKey];
            obKey.value[iKey] = arr[iKey];
          }
          return obKey;
        }
        function framesToTime(fr, fps) {
          if (!fps) {
            fps = elem.comp.globalData.frameRate;
          }
          return fr / fps;
        }
        function timeToFrames(t, fps) {
          if (!t && t !== 0) {
            t = time;
          }
          if (!fps) {
            fps = elem.comp.globalData.frameRate;
          }
          return t * fps;
        }
        function seedRandom(seed) {
          BMMath.seedrandom(randSeed + seed);
        }
        function sourceRectAtTime() {
          return elem.sourceRectAtTime();
        }
        function substring(init, end) {
          if (typeof value === "string") {
            if (end === void 0) {
              return value.substring(init);
            }
            return value.substring(init, end);
          }
          return "";
        }
        function substr(init, end) {
          if (typeof value === "string") {
            if (end === void 0) {
              return value.substr(init);
            }
            return value.substr(init, end);
          }
          return "";
        }
        function posterizeTime(framesPerSecond) {
          time = framesPerSecond === 0 ? 0 : Math.floor(time * framesPerSecond) / framesPerSecond;
          value = valueAtTime(time);
        }
        var time;
        var velocity;
        var value;
        var text;
        var textIndex;
        var textTotal;
        var selectorValue;
        var index = elem.data.ind;
        var hasParent = !!(elem.hierarchy && elem.hierarchy.length);
        var parent;
        var randSeed = Math.floor(Math.random() * 1e6);
        var globalData = elem.globalData;
        function executeExpression(_value) {
          value = _value;
          if (this.frameExpressionId === elem.globalData.frameId && this.propType !== "textSelector") {
            return value;
          }
          if (this.propType === "textSelector") {
            textIndex = this.textIndex;
            textTotal = this.textTotal;
            selectorValue = this.selectorValue;
          }
          if (!thisLayer) {
            text = elem.layerInterface.text;
            thisLayer = elem.layerInterface;
            thisComp = elem.comp.compInterface;
            toWorld = thisLayer.toWorld.bind(thisLayer);
            fromWorld = thisLayer.fromWorld.bind(thisLayer);
            fromComp = thisLayer.fromComp.bind(thisLayer);
            toComp = thisLayer.toComp.bind(thisLayer);
            mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;
            fromCompToSurface = fromComp;
          }
          if (!transform) {
            transform = elem.layerInterface("ADBE Transform Group");
            $bm_transform = transform;
            if (transform) {
              anchorPoint = transform.anchorPoint;
            }
          }
          if (elemType === 4 && !content) {
            content = thisLayer("ADBE Root Vectors Group");
          }
          if (!effect) {
            effect = thisLayer(4);
          }
          hasParent = !!(elem.hierarchy && elem.hierarchy.length);
          if (hasParent && !parent) {
            parent = elem.hierarchy[0].layerInterface;
          }
          time = this.comp.renderedFrame / this.comp.globalData.frameRate;
          if (_needsRandom) {
            seedRandom(randSeed + time);
          }
          if (needsVelocity) {
            velocity = velocityAtTime(time);
          }
          expression_function();
          this.frameExpressionId = elem.globalData.frameId;
          scoped_bm_rt = scoped_bm_rt.propType === propTypes.SHAPE ? scoped_bm_rt.v : scoped_bm_rt;
          return scoped_bm_rt;
        }
        executeExpression.__preventDeadCodeRemoval = [$bm_transform, anchorPoint, time, velocity, inPoint, outPoint, width, height, name, loop_in, loop_out, smooth, toComp, fromCompToSurface, toWorld, fromWorld, mask, position, rotation, scale, thisComp, numKeys, active, wiggle, loopInDuration, loopOutDuration, comp, lookAt, easeOut, easeIn, ease, nearestKey, key, text, textIndex, textTotal, selectorValue, framesToTime, timeToFrames, sourceRectAtTime, substring, substr, posterizeTime, index, globalData];
        return executeExpression;
      }
      ob.initiateExpression = initiateExpression;
      ob.__preventDeadCodeRemoval = [window, document, XMLHttpRequest, fetch, frames, $bm_neg, add, $bm_sum, $bm_sub, $bm_mul, $bm_div, $bm_mod, clamp, radians_to_degrees, degreesToRadians, degrees_to_radians, normalize, rgbToHsl, hslToRgb, linear, random, createPath, _lottieGlobal];
      ob.resetFrame = resetFrame;
      return ob;
    }();
    var Expressions = function() {
      var ob2 = {};
      ob2.initExpressions = initExpressions;
      ob2.resetFrame = ExpressionManager.resetFrame;
      function initExpressions(animation) {
        var stackCount = 0;
        var registers = [];
        function pushExpression() {
          stackCount += 1;
        }
        function popExpression() {
          stackCount -= 1;
          if (stackCount === 0) {
            releaseInstances();
          }
        }
        function registerExpressionProperty(expression) {
          if (registers.indexOf(expression) === -1) {
            registers.push(expression);
          }
        }
        function releaseInstances() {
          var i2;
          var len = registers.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            registers[i2].release();
          }
          registers.length = 0;
        }
        animation.renderer.compInterface = CompExpressionInterface(animation.renderer);
        animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);
        animation.renderer.globalData.pushExpression = pushExpression;
        animation.renderer.globalData.popExpression = popExpression;
        animation.renderer.globalData.registerExpressionProperty = registerExpressionProperty;
      }
      return ob2;
    }();
    var MaskManagerInterface = function() {
      function MaskInterface(mask2, data2) {
        this._mask = mask2;
        this._data = data2;
      }
      Object.defineProperty(MaskInterface.prototype, "maskPath", {
        get: function get2() {
          if (this._mask.prop.k) {
            this._mask.prop.getValue();
          }
          return this._mask.prop;
        }
      });
      Object.defineProperty(MaskInterface.prototype, "maskOpacity", {
        get: function get2() {
          if (this._mask.op.k) {
            this._mask.op.getValue();
          }
          return this._mask.op.v * 100;
        }
      });
      var MaskManager = function MaskManager2(maskManager) {
        var _masksInterfaces = createSizedArray(maskManager.viewData.length);
        var i2;
        var len = maskManager.viewData.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          _masksInterfaces[i2] = new MaskInterface(maskManager.viewData[i2], maskManager.masksProperties[i2]);
        }
        var maskFunction = function maskFunction2(name2) {
          i2 = 0;
          while (i2 < len) {
            if (maskManager.masksProperties[i2].nm === name2) {
              return _masksInterfaces[i2];
            }
            i2 += 1;
          }
          return null;
        };
        return maskFunction;
      };
      return MaskManager;
    }();
    var ExpressionPropertyInterface = /* @__PURE__ */ function() {
      var defaultUnidimensionalValue = {
        pv: 0,
        v: 0,
        mult: 1
      };
      var defaultMultidimensionalValue = {
        pv: [0, 0, 0],
        v: [0, 0, 0],
        mult: 1
      };
      function completeProperty(expressionValue, property2, type) {
        Object.defineProperty(expressionValue, "velocity", {
          get: function get2() {
            return property2.getVelocityAtTime(property2.comp.currentFrame);
          }
        });
        expressionValue.numKeys = property2.keyframes ? property2.keyframes.length : 0;
        expressionValue.key = function(pos) {
          if (!expressionValue.numKeys) {
            return 0;
          }
          var value2 = "";
          if ("s" in property2.keyframes[pos - 1]) {
            value2 = property2.keyframes[pos - 1].s;
          } else if ("e" in property2.keyframes[pos - 2]) {
            value2 = property2.keyframes[pos - 2].e;
          } else {
            value2 = property2.keyframes[pos - 2].s;
          }
          var valueProp = type === "unidimensional" ? new Number(value2) : Object.assign({}, value2);
          valueProp.time = property2.keyframes[pos - 1].t / property2.elem.comp.globalData.frameRate;
          valueProp.value = type === "unidimensional" ? value2[0] : value2;
          return valueProp;
        };
        expressionValue.valueAtTime = property2.getValueAtTime;
        expressionValue.speedAtTime = property2.getSpeedAtTime;
        expressionValue.velocityAtTime = property2.getVelocityAtTime;
        expressionValue.propertyGroup = property2.propertyGroup;
      }
      function UnidimensionalPropertyInterface(property2) {
        if (!property2 || !("pv" in property2)) {
          property2 = defaultUnidimensionalValue;
        }
        var mult = 1 / property2.mult;
        var val2 = property2.pv * mult;
        var expressionValue = new Number(val2);
        expressionValue.value = val2;
        completeProperty(expressionValue, property2, "unidimensional");
        return function() {
          if (property2.k) {
            property2.getValue();
          }
          val2 = property2.v * mult;
          if (expressionValue.value !== val2) {
            expressionValue = new Number(val2);
            expressionValue.value = val2;
            completeProperty(expressionValue, property2, "unidimensional");
          }
          return expressionValue;
        };
      }
      function MultidimensionalPropertyInterface(property2) {
        if (!property2 || !("pv" in property2)) {
          property2 = defaultMultidimensionalValue;
        }
        var mult = 1 / property2.mult;
        var len = property2.data && property2.data.l || property2.pv.length;
        var expressionValue = createTypedArray("float32", len);
        var arrValue = createTypedArray("float32", len);
        expressionValue.value = arrValue;
        completeProperty(expressionValue, property2, "multidimensional");
        return function() {
          if (property2.k) {
            property2.getValue();
          }
          for (var i2 = 0; i2 < len; i2 += 1) {
            arrValue[i2] = property2.v[i2] * mult;
            expressionValue[i2] = arrValue[i2];
          }
          return expressionValue;
        };
      }
      function defaultGetter() {
        return defaultUnidimensionalValue;
      }
      return function(property2) {
        if (!property2) {
          return defaultGetter;
        }
        if (property2.propType === "unidimensional") {
          return UnidimensionalPropertyInterface(property2);
        }
        return MultidimensionalPropertyInterface(property2);
      };
    }();
    var TransformExpressionInterface = /* @__PURE__ */ function() {
      return function(transform2) {
        function _thisFunction(name2) {
          switch (name2) {
            case "scale":
            case "Scale":
            case "ADBE Scale":
            case 6:
              return _thisFunction.scale;
            case "rotation":
            case "Rotation":
            case "ADBE Rotation":
            case "ADBE Rotate Z":
            case 10:
              return _thisFunction.rotation;
            case "ADBE Rotate X":
              return _thisFunction.xRotation;
            case "ADBE Rotate Y":
              return _thisFunction.yRotation;
            case "position":
            case "Position":
            case "ADBE Position":
            case 2:
              return _thisFunction.position;
            case "ADBE Position_0":
              return _thisFunction.xPosition;
            case "ADBE Position_1":
              return _thisFunction.yPosition;
            case "ADBE Position_2":
              return _thisFunction.zPosition;
            case "anchorPoint":
            case "AnchorPoint":
            case "Anchor Point":
            case "ADBE AnchorPoint":
            case 1:
              return _thisFunction.anchorPoint;
            case "opacity":
            case "Opacity":
            case 11:
              return _thisFunction.opacity;
            default:
              return null;
          }
        }
        Object.defineProperty(_thisFunction, "rotation", {
          get: ExpressionPropertyInterface(transform2.r || transform2.rz)
        });
        Object.defineProperty(_thisFunction, "zRotation", {
          get: ExpressionPropertyInterface(transform2.rz || transform2.r)
        });
        Object.defineProperty(_thisFunction, "xRotation", {
          get: ExpressionPropertyInterface(transform2.rx)
        });
        Object.defineProperty(_thisFunction, "yRotation", {
          get: ExpressionPropertyInterface(transform2.ry)
        });
        Object.defineProperty(_thisFunction, "scale", {
          get: ExpressionPropertyInterface(transform2.s)
        });
        var _px;
        var _py;
        var _pz;
        var _transformFactory;
        if (transform2.p) {
          _transformFactory = ExpressionPropertyInterface(transform2.p);
        } else {
          _px = ExpressionPropertyInterface(transform2.px);
          _py = ExpressionPropertyInterface(transform2.py);
          if (transform2.pz) {
            _pz = ExpressionPropertyInterface(transform2.pz);
          }
        }
        Object.defineProperty(_thisFunction, "position", {
          get: function get2() {
            if (transform2.p) {
              return _transformFactory();
            }
            return [_px(), _py(), _pz ? _pz() : 0];
          }
        });
        Object.defineProperty(_thisFunction, "xPosition", {
          get: ExpressionPropertyInterface(transform2.px)
        });
        Object.defineProperty(_thisFunction, "yPosition", {
          get: ExpressionPropertyInterface(transform2.py)
        });
        Object.defineProperty(_thisFunction, "zPosition", {
          get: ExpressionPropertyInterface(transform2.pz)
        });
        Object.defineProperty(_thisFunction, "anchorPoint", {
          get: ExpressionPropertyInterface(transform2.a)
        });
        Object.defineProperty(_thisFunction, "opacity", {
          get: ExpressionPropertyInterface(transform2.o)
        });
        Object.defineProperty(_thisFunction, "skew", {
          get: ExpressionPropertyInterface(transform2.sk)
        });
        Object.defineProperty(_thisFunction, "skewAxis", {
          get: ExpressionPropertyInterface(transform2.sa)
        });
        Object.defineProperty(_thisFunction, "orientation", {
          get: ExpressionPropertyInterface(transform2.or)
        });
        return _thisFunction;
      };
    }();
    var LayerExpressionInterface = /* @__PURE__ */ function() {
      function getMatrix(time2) {
        var toWorldMat = new Matrix();
        if (time2 !== void 0) {
          var propMatrix = this._elem.finalTransform.mProp.getValueAtTime(time2);
          propMatrix.clone(toWorldMat);
        } else {
          var transformMat = this._elem.finalTransform.mProp;
          transformMat.applyToMatrix(toWorldMat);
        }
        return toWorldMat;
      }
      function toWorldVec(arr, time2) {
        var toWorldMat = this.getMatrix(time2);
        toWorldMat.props[12] = 0;
        toWorldMat.props[13] = 0;
        toWorldMat.props[14] = 0;
        return this.applyPoint(toWorldMat, arr);
      }
      function toWorld2(arr, time2) {
        var toWorldMat = this.getMatrix(time2);
        return this.applyPoint(toWorldMat, arr);
      }
      function fromWorldVec(arr, time2) {
        var toWorldMat = this.getMatrix(time2);
        toWorldMat.props[12] = 0;
        toWorldMat.props[13] = 0;
        toWorldMat.props[14] = 0;
        return this.invertPoint(toWorldMat, arr);
      }
      function fromWorld2(arr, time2) {
        var toWorldMat = this.getMatrix(time2);
        return this.invertPoint(toWorldMat, arr);
      }
      function applyPoint(matrix, arr) {
        if (this._elem.hierarchy && this._elem.hierarchy.length) {
          var i2;
          var len = this._elem.hierarchy.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this._elem.hierarchy[i2].finalTransform.mProp.applyToMatrix(matrix);
          }
        }
        return matrix.applyToPointArray(arr[0], arr[1], arr[2] || 0);
      }
      function invertPoint(matrix, arr) {
        if (this._elem.hierarchy && this._elem.hierarchy.length) {
          var i2;
          var len = this._elem.hierarchy.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this._elem.hierarchy[i2].finalTransform.mProp.applyToMatrix(matrix);
          }
        }
        return matrix.inversePoint(arr);
      }
      function fromComp2(arr) {
        var toWorldMat = new Matrix();
        toWorldMat.reset();
        this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);
        if (this._elem.hierarchy && this._elem.hierarchy.length) {
          var i2;
          var len = this._elem.hierarchy.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this._elem.hierarchy[i2].finalTransform.mProp.applyToMatrix(toWorldMat);
          }
          return toWorldMat.inversePoint(arr);
        }
        return toWorldMat.inversePoint(arr);
      }
      function sampleImage() {
        return [1, 1, 1, 1];
      }
      return function(elem2) {
        var transformInterface;
        function _registerMaskInterface(maskManager) {
          _thisLayerFunction.mask = new MaskManagerInterface(maskManager, elem2);
        }
        function _registerEffectsInterface(effects) {
          _thisLayerFunction.effect = effects;
        }
        function _thisLayerFunction(name2) {
          switch (name2) {
            case "ADBE Root Vectors Group":
            case "Contents":
            case 2:
              return _thisLayerFunction.shapeInterface;
            case 1:
            case 6:
            case "Transform":
            case "transform":
            case "ADBE Transform Group":
              return transformInterface;
            case 4:
            case "ADBE Effect Parade":
            case "effects":
            case "Effects":
              return _thisLayerFunction.effect;
            case "ADBE Text Properties":
              return _thisLayerFunction.textInterface;
            default:
              return null;
          }
        }
        _thisLayerFunction.getMatrix = getMatrix;
        _thisLayerFunction.invertPoint = invertPoint;
        _thisLayerFunction.applyPoint = applyPoint;
        _thisLayerFunction.toWorld = toWorld2;
        _thisLayerFunction.toWorldVec = toWorldVec;
        _thisLayerFunction.fromWorld = fromWorld2;
        _thisLayerFunction.fromWorldVec = fromWorldVec;
        _thisLayerFunction.toComp = toWorld2;
        _thisLayerFunction.fromComp = fromComp2;
        _thisLayerFunction.sampleImage = sampleImage;
        _thisLayerFunction.sourceRectAtTime = elem2.sourceRectAtTime.bind(elem2);
        _thisLayerFunction._elem = elem2;
        transformInterface = TransformExpressionInterface(elem2.finalTransform.mProp);
        var anchorPointDescriptor = getDescriptor(transformInterface, "anchorPoint");
        Object.defineProperties(_thisLayerFunction, {
          hasParent: {
            get: function get2() {
              return elem2.hierarchy.length;
            }
          },
          parent: {
            get: function get2() {
              return elem2.hierarchy[0].layerInterface;
            }
          },
          rotation: getDescriptor(transformInterface, "rotation"),
          scale: getDescriptor(transformInterface, "scale"),
          position: getDescriptor(transformInterface, "position"),
          opacity: getDescriptor(transformInterface, "opacity"),
          anchorPoint: anchorPointDescriptor,
          anchor_point: anchorPointDescriptor,
          transform: {
            get: function get2() {
              return transformInterface;
            }
          },
          active: {
            get: function get2() {
              return elem2.isInRange;
            }
          }
        });
        _thisLayerFunction.startTime = elem2.data.st;
        _thisLayerFunction.index = elem2.data.ind;
        _thisLayerFunction.source = elem2.data.refId;
        _thisLayerFunction.height = elem2.data.ty === 0 ? elem2.data.h : 100;
        _thisLayerFunction.width = elem2.data.ty === 0 ? elem2.data.w : 100;
        _thisLayerFunction.inPoint = elem2.data.ip / elem2.comp.globalData.frameRate;
        _thisLayerFunction.outPoint = elem2.data.op / elem2.comp.globalData.frameRate;
        _thisLayerFunction._name = elem2.data.nm;
        _thisLayerFunction.registerMaskInterface = _registerMaskInterface;
        _thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;
        return _thisLayerFunction;
      };
    }();
    var propertyGroupFactory = /* @__PURE__ */ function() {
      return function(interfaceFunction, parentPropertyGroup) {
        return function(val2) {
          val2 = val2 === void 0 ? 1 : val2;
          if (val2 <= 0) {
            return interfaceFunction;
          }
          return parentPropertyGroup(val2 - 1);
        };
      };
    }();
    var PropertyInterface = /* @__PURE__ */ function() {
      return function(propertyName, propertyGroup) {
        var interfaceFunction = {
          _name: propertyName
        };
        function _propertyGroup(val2) {
          val2 = val2 === void 0 ? 1 : val2;
          if (val2 <= 0) {
            return interfaceFunction;
          }
          return propertyGroup(val2 - 1);
        }
        return _propertyGroup;
      };
    }();
    var EffectsExpressionInterface = /* @__PURE__ */ function() {
      var ob2 = {
        createEffectsInterface
      };
      function createEffectsInterface(elem2, propertyGroup) {
        if (elem2.effectsManager) {
          var effectElements = [];
          var effectsData = elem2.data.ef;
          var i2;
          var len = elem2.effectsManager.effectElements.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            effectElements.push(createGroupInterface(effectsData[i2], elem2.effectsManager.effectElements[i2], propertyGroup, elem2));
          }
          var effects = elem2.data.ef || [];
          var groupInterface = function groupInterface2(name2) {
            i2 = 0;
            len = effects.length;
            while (i2 < len) {
              if (name2 === effects[i2].nm || name2 === effects[i2].mn || name2 === effects[i2].ix) {
                return effectElements[i2];
              }
              i2 += 1;
            }
            return null;
          };
          Object.defineProperty(groupInterface, "numProperties", {
            get: function get2() {
              return effects.length;
            }
          });
          return groupInterface;
        }
        return null;
      }
      function createGroupInterface(data2, elements, propertyGroup, elem2) {
        function groupInterface(name2) {
          var effects = data2.ef;
          var i3 = 0;
          var len2 = effects.length;
          while (i3 < len2) {
            if (name2 === effects[i3].nm || name2 === effects[i3].mn || name2 === effects[i3].ix) {
              if (effects[i3].ty === 5) {
                return effectElements[i3];
              }
              return effectElements[i3]();
            }
            i3 += 1;
          }
          throw new Error();
        }
        var _propertyGroup = propertyGroupFactory(groupInterface, propertyGroup);
        var effectElements = [];
        var i2;
        var len = data2.ef.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (data2.ef[i2].ty === 5) {
            effectElements.push(createGroupInterface(data2.ef[i2], elements.effectElements[i2], elements.effectElements[i2].propertyGroup, elem2));
          } else {
            effectElements.push(createValueInterface(elements.effectElements[i2], data2.ef[i2].ty, elem2, _propertyGroup));
          }
        }
        if (data2.mn === "ADBE Color Control") {
          Object.defineProperty(groupInterface, "color", {
            get: function get2() {
              return effectElements[0]();
            }
          });
        }
        Object.defineProperties(groupInterface, {
          numProperties: {
            get: function get2() {
              return data2.np;
            }
          },
          _name: {
            value: data2.nm
          },
          propertyGroup: {
            value: _propertyGroup
          }
        });
        groupInterface.enabled = data2.en !== 0;
        groupInterface.active = groupInterface.enabled;
        return groupInterface;
      }
      function createValueInterface(element, type, elem2, propertyGroup) {
        var expressionProperty = ExpressionPropertyInterface(element.p);
        function interfaceFunction() {
          if (type === 10) {
            return elem2.comp.compInterface(element.p.v);
          }
          return expressionProperty();
        }
        if (element.p.setGroupProperty) {
          element.p.setGroupProperty(PropertyInterface("", propertyGroup));
        }
        return interfaceFunction;
      }
      return ob2;
    }();
    var ShapePathInterface = /* @__PURE__ */ function() {
      return function pathInterfaceFactory(shape, view, propertyGroup) {
        var prop = view.sh;
        function interfaceFunction(val2) {
          if (val2 === "Shape" || val2 === "shape" || val2 === "Path" || val2 === "path" || val2 === "ADBE Vector Shape" || val2 === 2) {
            return interfaceFunction.path;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        prop.setGroupProperty(PropertyInterface("Path", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          path: {
            get: function get2() {
              if (prop.k) {
                prop.getValue();
              }
              return prop;
            }
          },
          shape: {
            get: function get2() {
              if (prop.k) {
                prop.getValue();
              }
              return prop;
            }
          },
          _name: {
            value: shape.nm
          },
          ix: {
            value: shape.ix
          },
          propertyIndex: {
            value: shape.ix
          },
          mn: {
            value: shape.mn
          },
          propertyGroup: {
            value: propertyGroup
          }
        });
        return interfaceFunction;
      };
    }();
    var ShapeExpressionInterface = /* @__PURE__ */ function() {
      function iterateElements(shapes, view, propertyGroup) {
        var arr = [];
        var i2;
        var len = shapes ? shapes.length : 0;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (shapes[i2].ty === "gr") {
            arr.push(groupInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "fl") {
            arr.push(fillInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "st") {
            arr.push(strokeInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "tm") {
            arr.push(trimInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "tr") ;
          else if (shapes[i2].ty === "el") {
            arr.push(ellipseInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "sr") {
            arr.push(starInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "sh") {
            arr.push(ShapePathInterface(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "rc") {
            arr.push(rectInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "rd") {
            arr.push(roundedInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "rp") {
            arr.push(repeaterInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "gf") {
            arr.push(gradientFillInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else {
            arr.push(defaultInterfaceFactory(shapes[i2], view[i2]));
          }
        }
        return arr;
      }
      function contentsInterfaceFactory(shape, view, propertyGroup) {
        var interfaces2;
        var interfaceFunction = function _interfaceFunction(value2) {
          var i2 = 0;
          var len = interfaces2.length;
          while (i2 < len) {
            if (interfaces2[i2]._name === value2 || interfaces2[i2].mn === value2 || interfaces2[i2].propertyIndex === value2 || interfaces2[i2].ix === value2 || interfaces2[i2].ind === value2) {
              return interfaces2[i2];
            }
            i2 += 1;
          }
          if (typeof value2 === "number") {
            return interfaces2[value2 - 1];
          }
          return null;
        };
        interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        interfaces2 = iterateElements(shape.it, view.it, interfaceFunction.propertyGroup);
        interfaceFunction.numProperties = interfaces2.length;
        var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
        interfaceFunction.transform = transformInterface;
        interfaceFunction.propertyIndex = shape.cix;
        interfaceFunction._name = shape.nm;
        return interfaceFunction;
      }
      function groupInterfaceFactory(shape, view, propertyGroup) {
        var interfaceFunction = function _interfaceFunction(value2) {
          switch (value2) {
            case "ADBE Vectors Group":
            case "Contents":
            case 2:
              return interfaceFunction.content;
            default:
              return interfaceFunction.transform;
          }
        };
        interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var content2 = contentsInterfaceFactory(shape, view, interfaceFunction.propertyGroup);
        var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
        interfaceFunction.content = content2;
        interfaceFunction.transform = transformInterface;
        Object.defineProperty(interfaceFunction, "_name", {
          get: function get2() {
            return shape.nm;
          }
        });
        interfaceFunction.numProperties = shape.np;
        interfaceFunction.propertyIndex = shape.ix;
        interfaceFunction.nm = shape.nm;
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      function fillInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(val2) {
          if (val2 === "Color" || val2 === "color") {
            return interfaceFunction.color;
          }
          if (val2 === "Opacity" || val2 === "opacity") {
            return interfaceFunction.opacity;
          }
          return null;
        }
        Object.defineProperties(interfaceFunction, {
          color: {
            get: ExpressionPropertyInterface(view.c)
          },
          opacity: {
            get: ExpressionPropertyInterface(view.o)
          },
          _name: {
            value: shape.nm
          },
          mn: {
            value: shape.mn
          }
        });
        view.c.setGroupProperty(PropertyInterface("Color", propertyGroup));
        view.o.setGroupProperty(PropertyInterface("Opacity", propertyGroup));
        return interfaceFunction;
      }
      function gradientFillInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(val2) {
          if (val2 === "Start Point" || val2 === "start point") {
            return interfaceFunction.startPoint;
          }
          if (val2 === "End Point" || val2 === "end point") {
            return interfaceFunction.endPoint;
          }
          if (val2 === "Opacity" || val2 === "opacity") {
            return interfaceFunction.opacity;
          }
          return null;
        }
        Object.defineProperties(interfaceFunction, {
          startPoint: {
            get: ExpressionPropertyInterface(view.s)
          },
          endPoint: {
            get: ExpressionPropertyInterface(view.e)
          },
          opacity: {
            get: ExpressionPropertyInterface(view.o)
          },
          type: {
            get: function get2() {
              return "a";
            }
          },
          _name: {
            value: shape.nm
          },
          mn: {
            value: shape.mn
          }
        });
        view.s.setGroupProperty(PropertyInterface("Start Point", propertyGroup));
        view.e.setGroupProperty(PropertyInterface("End Point", propertyGroup));
        view.o.setGroupProperty(PropertyInterface("Opacity", propertyGroup));
        return interfaceFunction;
      }
      function defaultInterfaceFactory() {
        function interfaceFunction() {
          return null;
        }
        return interfaceFunction;
      }
      function strokeInterfaceFactory(shape, view, propertyGroup) {
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var _dashPropertyGroup = propertyGroupFactory(dashOb, _propertyGroup);
        function addPropertyToDashOb(i3) {
          Object.defineProperty(dashOb, shape.d[i3].nm, {
            get: ExpressionPropertyInterface(view.d.dataProps[i3].p)
          });
        }
        var i2;
        var len = shape.d ? shape.d.length : 0;
        var dashOb = {};
        for (i2 = 0; i2 < len; i2 += 1) {
          addPropertyToDashOb(i2);
          view.d.dataProps[i2].p.setGroupProperty(_dashPropertyGroup);
        }
        function interfaceFunction(val2) {
          if (val2 === "Color" || val2 === "color") {
            return interfaceFunction.color;
          }
          if (val2 === "Opacity" || val2 === "opacity") {
            return interfaceFunction.opacity;
          }
          if (val2 === "Stroke Width" || val2 === "stroke width") {
            return interfaceFunction.strokeWidth;
          }
          return null;
        }
        Object.defineProperties(interfaceFunction, {
          color: {
            get: ExpressionPropertyInterface(view.c)
          },
          opacity: {
            get: ExpressionPropertyInterface(view.o)
          },
          strokeWidth: {
            get: ExpressionPropertyInterface(view.w)
          },
          dash: {
            get: function get2() {
              return dashOb;
            }
          },
          _name: {
            value: shape.nm
          },
          mn: {
            value: shape.mn
          }
        });
        view.c.setGroupProperty(PropertyInterface("Color", _propertyGroup));
        view.o.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
        view.w.setGroupProperty(PropertyInterface("Stroke Width", _propertyGroup));
        return interfaceFunction;
      }
      function trimInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(val2) {
          if (val2 === shape.e.ix || val2 === "End" || val2 === "end") {
            return interfaceFunction.end;
          }
          if (val2 === shape.s.ix) {
            return interfaceFunction.start;
          }
          if (val2 === shape.o.ix) {
            return interfaceFunction.offset;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        interfaceFunction.propertyIndex = shape.ix;
        view.s.setGroupProperty(PropertyInterface("Start", _propertyGroup));
        view.e.setGroupProperty(PropertyInterface("End", _propertyGroup));
        view.o.setGroupProperty(PropertyInterface("Offset", _propertyGroup));
        interfaceFunction.propertyIndex = shape.ix;
        interfaceFunction.propertyGroup = propertyGroup;
        Object.defineProperties(interfaceFunction, {
          start: {
            get: ExpressionPropertyInterface(view.s)
          },
          end: {
            get: ExpressionPropertyInterface(view.e)
          },
          offset: {
            get: ExpressionPropertyInterface(view.o)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      function transformInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape.a.ix === value2 || value2 === "Anchor Point") {
            return interfaceFunction.anchorPoint;
          }
          if (shape.o.ix === value2 || value2 === "Opacity") {
            return interfaceFunction.opacity;
          }
          if (shape.p.ix === value2 || value2 === "Position") {
            return interfaceFunction.position;
          }
          if (shape.r.ix === value2 || value2 === "Rotation" || value2 === "ADBE Vector Rotation") {
            return interfaceFunction.rotation;
          }
          if (shape.s.ix === value2 || value2 === "Scale") {
            return interfaceFunction.scale;
          }
          if (shape.sk && shape.sk.ix === value2 || value2 === "Skew") {
            return interfaceFunction.skew;
          }
          if (shape.sa && shape.sa.ix === value2 || value2 === "Skew Axis") {
            return interfaceFunction.skewAxis;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        view.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
        view.transform.mProps.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
        view.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point", _propertyGroup));
        view.transform.mProps.s.setGroupProperty(PropertyInterface("Scale", _propertyGroup));
        view.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
        if (view.transform.mProps.sk) {
          view.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew", _propertyGroup));
          view.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle", _propertyGroup));
        }
        view.transform.op.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          opacity: {
            get: ExpressionPropertyInterface(view.transform.mProps.o)
          },
          position: {
            get: ExpressionPropertyInterface(view.transform.mProps.p)
          },
          anchorPoint: {
            get: ExpressionPropertyInterface(view.transform.mProps.a)
          },
          scale: {
            get: ExpressionPropertyInterface(view.transform.mProps.s)
          },
          rotation: {
            get: ExpressionPropertyInterface(view.transform.mProps.r)
          },
          skew: {
            get: ExpressionPropertyInterface(view.transform.mProps.sk)
          },
          skewAxis: {
            get: ExpressionPropertyInterface(view.transform.mProps.sa)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.ty = "tr";
        interfaceFunction.mn = shape.mn;
        interfaceFunction.propertyGroup = propertyGroup;
        return interfaceFunction;
      }
      function ellipseInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape.p.ix === value2) {
            return interfaceFunction.position;
          }
          if (shape.s.ix === value2) {
            return interfaceFunction.size;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        interfaceFunction.propertyIndex = shape.ix;
        var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
        prop.s.setGroupProperty(PropertyInterface("Size", _propertyGroup));
        prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          size: {
            get: ExpressionPropertyInterface(prop.s)
          },
          position: {
            get: ExpressionPropertyInterface(prop.p)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      function starInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape.p.ix === value2) {
            return interfaceFunction.position;
          }
          if (shape.r.ix === value2) {
            return interfaceFunction.rotation;
          }
          if (shape.pt.ix === value2) {
            return interfaceFunction.points;
          }
          if (shape.or.ix === value2 || value2 === "ADBE Vector Star Outer Radius") {
            return interfaceFunction.outerRadius;
          }
          if (shape.os.ix === value2) {
            return interfaceFunction.outerRoundness;
          }
          if (shape.ir && (shape.ir.ix === value2 || value2 === "ADBE Vector Star Inner Radius")) {
            return interfaceFunction.innerRadius;
          }
          if (shape.is && shape.is.ix === value2) {
            return interfaceFunction.innerRoundness;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
        interfaceFunction.propertyIndex = shape.ix;
        prop.or.setGroupProperty(PropertyInterface("Outer Radius", _propertyGroup));
        prop.os.setGroupProperty(PropertyInterface("Outer Roundness", _propertyGroup));
        prop.pt.setGroupProperty(PropertyInterface("Points", _propertyGroup));
        prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
        prop.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
        if (shape.ir) {
          prop.ir.setGroupProperty(PropertyInterface("Inner Radius", _propertyGroup));
          prop.is.setGroupProperty(PropertyInterface("Inner Roundness", _propertyGroup));
        }
        Object.defineProperties(interfaceFunction, {
          position: {
            get: ExpressionPropertyInterface(prop.p)
          },
          rotation: {
            get: ExpressionPropertyInterface(prop.r)
          },
          points: {
            get: ExpressionPropertyInterface(prop.pt)
          },
          outerRadius: {
            get: ExpressionPropertyInterface(prop.or)
          },
          outerRoundness: {
            get: ExpressionPropertyInterface(prop.os)
          },
          innerRadius: {
            get: ExpressionPropertyInterface(prop.ir)
          },
          innerRoundness: {
            get: ExpressionPropertyInterface(prop.is)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      function rectInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape.p.ix === value2) {
            return interfaceFunction.position;
          }
          if (shape.r.ix === value2) {
            return interfaceFunction.roundness;
          }
          if (shape.s.ix === value2 || value2 === "Size" || value2 === "ADBE Vector Rect Size") {
            return interfaceFunction.size;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
        interfaceFunction.propertyIndex = shape.ix;
        prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
        prop.s.setGroupProperty(PropertyInterface("Size", _propertyGroup));
        prop.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          position: {
            get: ExpressionPropertyInterface(prop.p)
          },
          roundness: {
            get: ExpressionPropertyInterface(prop.r)
          },
          size: {
            get: ExpressionPropertyInterface(prop.s)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      function roundedInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape.r.ix === value2 || value2 === "Round Corners 1") {
            return interfaceFunction.radius;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var prop = view;
        interfaceFunction.propertyIndex = shape.ix;
        prop.rd.setGroupProperty(PropertyInterface("Radius", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          radius: {
            get: ExpressionPropertyInterface(prop.rd)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      function repeaterInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape.c.ix === value2 || value2 === "Copies") {
            return interfaceFunction.copies;
          }
          if (shape.o.ix === value2 || value2 === "Offset") {
            return interfaceFunction.offset;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var prop = view;
        interfaceFunction.propertyIndex = shape.ix;
        prop.c.setGroupProperty(PropertyInterface("Copies", _propertyGroup));
        prop.o.setGroupProperty(PropertyInterface("Offset", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          copies: {
            get: ExpressionPropertyInterface(prop.c)
          },
          offset: {
            get: ExpressionPropertyInterface(prop.o)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      return function(shapes, view, propertyGroup) {
        var interfaces2;
        function _interfaceFunction(value2) {
          if (typeof value2 === "number") {
            value2 = value2 === void 0 ? 1 : value2;
            if (value2 === 0) {
              return propertyGroup;
            }
            return interfaces2[value2 - 1];
          }
          var i2 = 0;
          var len = interfaces2.length;
          while (i2 < len) {
            if (interfaces2[i2]._name === value2) {
              return interfaces2[i2];
            }
            i2 += 1;
          }
          return null;
        }
        function parentGroupWrapper() {
          return propertyGroup;
        }
        _interfaceFunction.propertyGroup = propertyGroupFactory(_interfaceFunction, parentGroupWrapper);
        interfaces2 = iterateElements(shapes, view, _interfaceFunction.propertyGroup);
        _interfaceFunction.numProperties = interfaces2.length;
        _interfaceFunction._name = "Contents";
        return _interfaceFunction;
      };
    }();
    var TextExpressionInterface = /* @__PURE__ */ function() {
      return function(elem2) {
        var _sourceText;
        function _thisLayerFunction(name2) {
          switch (name2) {
            case "ADBE Text Document":
              return _thisLayerFunction.sourceText;
            default:
              return null;
          }
        }
        Object.defineProperty(_thisLayerFunction, "sourceText", {
          get: function get2() {
            elem2.textProperty.getValue();
            var stringValue = elem2.textProperty.currentData.t;
            if (!_sourceText || stringValue !== _sourceText.value) {
              _sourceText = new String(stringValue);
              _sourceText.value = stringValue || new String(stringValue);
              Object.defineProperty(_sourceText, "style", {
                get: function get3() {
                  return {
                    fillColor: elem2.textProperty.currentData.fc
                  };
                }
              });
            }
            return _sourceText;
          }
        });
        return _thisLayerFunction;
      };
    }();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var FootageInterface = /* @__PURE__ */ function() {
      var outlineInterfaceFactory = function outlineInterfaceFactory2(elem2) {
        var currentPropertyName = "";
        var currentProperty = elem2.getFootageData();
        function init() {
          currentPropertyName = "";
          currentProperty = elem2.getFootageData();
          return searchProperty;
        }
        function searchProperty(value2) {
          if (currentProperty[value2]) {
            currentPropertyName = value2;
            currentProperty = currentProperty[value2];
            if (_typeof(currentProperty) === "object") {
              return searchProperty;
            }
            return currentProperty;
          }
          var propertyNameIndex = value2.indexOf(currentPropertyName);
          if (propertyNameIndex !== -1) {
            var index2 = parseInt(value2.substr(propertyNameIndex + currentPropertyName.length), 10);
            currentProperty = currentProperty[index2];
            if (_typeof(currentProperty) === "object") {
              return searchProperty;
            }
            return currentProperty;
          }
          return "";
        }
        return init;
      };
      var dataInterfaceFactory = function dataInterfaceFactory2(elem2) {
        function interfaceFunction(value2) {
          if (value2 === "Outline") {
            return interfaceFunction.outlineInterface();
          }
          return null;
        }
        interfaceFunction._name = "Outline";
        interfaceFunction.outlineInterface = outlineInterfaceFactory(elem2);
        return interfaceFunction;
      };
      return function(elem2) {
        function _interfaceFunction(value2) {
          if (value2 === "Data") {
            return _interfaceFunction.dataInterface;
          }
          return null;
        }
        _interfaceFunction._name = "Data";
        _interfaceFunction.dataInterface = dataInterfaceFactory(elem2);
        return _interfaceFunction;
      };
    }();
    var interfaces = {
      layer: LayerExpressionInterface,
      effects: EffectsExpressionInterface,
      comp: CompExpressionInterface,
      shape: ShapeExpressionInterface,
      text: TextExpressionInterface,
      footage: FootageInterface
    };
    function getInterface(type) {
      return interfaces[type] || null;
    }
    var expressionHelpers = /* @__PURE__ */ function() {
      function searchExpressions(elem2, data2, prop) {
        if (data2.x) {
          prop.k = true;
          prop.x = true;
          prop.initiateExpression = ExpressionManager.initiateExpression;
          prop.effectsSequence.push(prop.initiateExpression(elem2, data2, prop).bind(prop));
        }
      }
      function getValueAtTime(frameNum) {
        frameNum *= this.elem.globalData.frameRate;
        frameNum -= this.offsetTime;
        if (frameNum !== this._cachingAtTime.lastFrame) {
          this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;
          this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);
          this._cachingAtTime.lastFrame = frameNum;
        }
        return this._cachingAtTime.value;
      }
      function getSpeedAtTime(frameNum) {
        var delta = -0.01;
        var v1 = this.getValueAtTime(frameNum);
        var v2 = this.getValueAtTime(frameNum + delta);
        var speed = 0;
        if (v1.length) {
          var i2;
          for (i2 = 0; i2 < v1.length; i2 += 1) {
            speed += Math.pow(v2[i2] - v1[i2], 2);
          }
          speed = Math.sqrt(speed) * 100;
        } else {
          speed = 0;
        }
        return speed;
      }
      function getVelocityAtTime(frameNum) {
        if (this.vel !== void 0) {
          return this.vel;
        }
        var delta = -1e-3;
        var v1 = this.getValueAtTime(frameNum);
        var v2 = this.getValueAtTime(frameNum + delta);
        var velocity2;
        if (v1.length) {
          velocity2 = createTypedArray("float32", v1.length);
          var i2;
          for (i2 = 0; i2 < v1.length; i2 += 1) {
            velocity2[i2] = (v2[i2] - v1[i2]) / delta;
          }
        } else {
          velocity2 = (v2 - v1) / delta;
        }
        return velocity2;
      }
      function getStaticValueAtTime() {
        return this.pv;
      }
      function setGroupProperty(propertyGroup) {
        this.propertyGroup = propertyGroup;
      }
      return {
        searchExpressions,
        getSpeedAtTime,
        getVelocityAtTime,
        getValueAtTime,
        getStaticValueAtTime,
        setGroupProperty
      };
    }();
    function addPropertyDecorator() {
      function loopOut2(type, duration, durationFlag) {
        if (!this.k || !this.keyframes) {
          return this.pv;
        }
        type = type ? type.toLowerCase() : "";
        var currentFrame = this.comp.renderedFrame;
        var keyframes2 = this.keyframes;
        var lastKeyFrame = keyframes2[keyframes2.length - 1].t;
        if (currentFrame <= lastKeyFrame) {
          return this.pv;
        }
        var cycleDuration;
        var firstKeyFrame;
        if (!durationFlag) {
          if (!duration || duration > keyframes2.length - 1) {
            duration = keyframes2.length - 1;
          }
          firstKeyFrame = keyframes2[keyframes2.length - 1 - duration].t;
          cycleDuration = lastKeyFrame - firstKeyFrame;
        } else {
          if (!duration) {
            cycleDuration = Math.max(0, lastKeyFrame - this.elem.data.ip);
          } else {
            cycleDuration = Math.abs(lastKeyFrame - this.elem.comp.globalData.frameRate * duration);
          }
          firstKeyFrame = lastKeyFrame - cycleDuration;
        }
        var i2;
        var len;
        var ret;
        if (type === "pingpong") {
          var iterations = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);
          if (iterations % 2 !== 0) {
            return this.getValueAtTime((cycleDuration - (currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
          }
        } else if (type === "offset") {
          var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
          var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
          var current = this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
          var repeats = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);
          if (this.pv.length) {
            ret = new Array(initV.length);
            len = ret.length;
            for (i2 = 0; i2 < len; i2 += 1) {
              ret[i2] = (endV[i2] - initV[i2]) * repeats + current[i2];
            }
            return ret;
          }
          return (endV - initV) * repeats + current;
        } else if (type === "continue") {
          var lastValue = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
          var nextLastValue = this.getValueAtTime((lastKeyFrame - 1e-3) / this.comp.globalData.frameRate, 0);
          if (this.pv.length) {
            ret = new Array(lastValue.length);
            len = ret.length;
            for (i2 = 0; i2 < len; i2 += 1) {
              ret[i2] = lastValue[i2] + (lastValue[i2] - nextLastValue[i2]) * ((currentFrame - lastKeyFrame) / this.comp.globalData.frameRate) / 5e-4;
            }
            return ret;
          }
          return lastValue + (lastValue - nextLastValue) * ((currentFrame - lastKeyFrame) / 1e-3);
        }
        return this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
      }
      function loopIn2(type, duration, durationFlag) {
        if (!this.k) {
          return this.pv;
        }
        type = type ? type.toLowerCase() : "";
        var currentFrame = this.comp.renderedFrame;
        var keyframes2 = this.keyframes;
        var firstKeyFrame = keyframes2[0].t;
        if (currentFrame >= firstKeyFrame) {
          return this.pv;
        }
        var cycleDuration;
        var lastKeyFrame;
        if (!durationFlag) {
          if (!duration || duration > keyframes2.length - 1) {
            duration = keyframes2.length - 1;
          }
          lastKeyFrame = keyframes2[duration].t;
          cycleDuration = lastKeyFrame - firstKeyFrame;
        } else {
          if (!duration) {
            cycleDuration = Math.max(0, this.elem.data.op - firstKeyFrame);
          } else {
            cycleDuration = Math.abs(this.elem.comp.globalData.frameRate * duration);
          }
          lastKeyFrame = firstKeyFrame + cycleDuration;
        }
        var i2;
        var len;
        var ret;
        if (type === "pingpong") {
          var iterations = Math.floor((firstKeyFrame - currentFrame) / cycleDuration);
          if (iterations % 2 === 0) {
            return this.getValueAtTime(((firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
          }
        } else if (type === "offset") {
          var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
          var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
          var current = this.getValueAtTime((cycleDuration - (firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
          var repeats = Math.floor((firstKeyFrame - currentFrame) / cycleDuration) + 1;
          if (this.pv.length) {
            ret = new Array(initV.length);
            len = ret.length;
            for (i2 = 0; i2 < len; i2 += 1) {
              ret[i2] = current[i2] - (endV[i2] - initV[i2]) * repeats;
            }
            return ret;
          }
          return current - (endV - initV) * repeats;
        } else if (type === "continue") {
          var firstValue = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
          var nextFirstValue = this.getValueAtTime((firstKeyFrame + 1e-3) / this.comp.globalData.frameRate, 0);
          if (this.pv.length) {
            ret = new Array(firstValue.length);
            len = ret.length;
            for (i2 = 0; i2 < len; i2 += 1) {
              ret[i2] = firstValue[i2] + (firstValue[i2] - nextFirstValue[i2]) * (firstKeyFrame - currentFrame) / 1e-3;
            }
            return ret;
          }
          return firstValue + (firstValue - nextFirstValue) * (firstKeyFrame - currentFrame) / 1e-3;
        }
        return this.getValueAtTime((cycleDuration - ((firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame)) / this.comp.globalData.frameRate, 0);
      }
      function smooth2(width2, samples) {
        if (!this.k) {
          return this.pv;
        }
        width2 = (width2 || 0.4) * 0.5;
        samples = Math.floor(samples || 5);
        if (samples <= 1) {
          return this.pv;
        }
        var currentTime = this.comp.renderedFrame / this.comp.globalData.frameRate;
        var initFrame2 = currentTime - width2;
        var endFrame = currentTime + width2;
        var sampleFrequency = samples > 1 ? (endFrame - initFrame2) / (samples - 1) : 1;
        var i2 = 0;
        var j2 = 0;
        var value2;
        if (this.pv.length) {
          value2 = createTypedArray("float32", this.pv.length);
        } else {
          value2 = 0;
        }
        var sampleValue;
        while (i2 < samples) {
          sampleValue = this.getValueAtTime(initFrame2 + i2 * sampleFrequency);
          if (this.pv.length) {
            for (j2 = 0; j2 < this.pv.length; j2 += 1) {
              value2[j2] += sampleValue[j2];
            }
          } else {
            value2 += sampleValue;
          }
          i2 += 1;
        }
        if (this.pv.length) {
          for (j2 = 0; j2 < this.pv.length; j2 += 1) {
            value2[j2] /= samples;
          }
        } else {
          value2 /= samples;
        }
        return value2;
      }
      function getTransformValueAtTime(time2) {
        if (!this._transformCachingAtTime) {
          this._transformCachingAtTime = {
            v: new Matrix()
          };
        }
        var matrix = this._transformCachingAtTime.v;
        matrix.cloneFromProps(this.pre.props);
        if (this.appliedTransformations < 1) {
          var anchor = this.a.getValueAtTime(time2);
          matrix.translate(-anchor[0] * this.a.mult, -anchor[1] * this.a.mult, anchor[2] * this.a.mult);
        }
        if (this.appliedTransformations < 2) {
          var scale2 = this.s.getValueAtTime(time2);
          matrix.scale(scale2[0] * this.s.mult, scale2[1] * this.s.mult, scale2[2] * this.s.mult);
        }
        if (this.sk && this.appliedTransformations < 3) {
          var skew = this.sk.getValueAtTime(time2);
          var skewAxis = this.sa.getValueAtTime(time2);
          matrix.skewFromAxis(-skew * this.sk.mult, skewAxis * this.sa.mult);
        }
        if (this.r && this.appliedTransformations < 4) {
          var rotation2 = this.r.getValueAtTime(time2);
          matrix.rotate(-rotation2 * this.r.mult);
        } else if (!this.r && this.appliedTransformations < 4) {
          var rotationZ = this.rz.getValueAtTime(time2);
          var rotationY = this.ry.getValueAtTime(time2);
          var rotationX = this.rx.getValueAtTime(time2);
          var orientation = this.or.getValueAtTime(time2);
          matrix.rotateZ(-rotationZ * this.rz.mult).rotateY(rotationY * this.ry.mult).rotateX(rotationX * this.rx.mult).rotateZ(-orientation[2] * this.or.mult).rotateY(orientation[1] * this.or.mult).rotateX(orientation[0] * this.or.mult);
        }
        if (this.data.p && this.data.p.s) {
          var positionX = this.px.getValueAtTime(time2);
          var positionY = this.py.getValueAtTime(time2);
          if (this.data.p.z) {
            var positionZ = this.pz.getValueAtTime(time2);
            matrix.translate(positionX * this.px.mult, positionY * this.py.mult, -positionZ * this.pz.mult);
          } else {
            matrix.translate(positionX * this.px.mult, positionY * this.py.mult, 0);
          }
        } else {
          var position2 = this.p.getValueAtTime(time2);
          matrix.translate(position2[0] * this.p.mult, position2[1] * this.p.mult, -position2[2] * this.p.mult);
        }
        return matrix;
      }
      function getTransformStaticValueAtTime() {
        return this.v.clone(new Matrix());
      }
      var getTransformProperty = TransformPropertyFactory.getTransformProperty;
      TransformPropertyFactory.getTransformProperty = function(elem2, data2, container2) {
        var prop = getTransformProperty(elem2, data2, container2);
        if (prop.dynamicProperties.length) {
          prop.getValueAtTime = getTransformValueAtTime.bind(prop);
        } else {
          prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);
        }
        prop.setGroupProperty = expressionHelpers.setGroupProperty;
        return prop;
      };
      var propertyGetProp = PropertyFactory.getProp;
      PropertyFactory.getProp = function(elem2, data2, type, mult, container2) {
        var prop = propertyGetProp(elem2, data2, type, mult, container2);
        if (prop.kf) {
          prop.getValueAtTime = expressionHelpers.getValueAtTime.bind(prop);
        } else {
          prop.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(prop);
        }
        prop.setGroupProperty = expressionHelpers.setGroupProperty;
        prop.loopOut = loopOut2;
        prop.loopIn = loopIn2;
        prop.smooth = smooth2;
        prop.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(prop);
        prop.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(prop);
        prop.numKeys = data2.a === 1 ? data2.k.length : 0;
        prop.propertyIndex = data2.ix;
        var value2 = 0;
        if (type !== 0) {
          value2 = createTypedArray("float32", data2.a === 1 ? data2.k[0].s.length : data2.k.length);
        }
        prop._cachingAtTime = {
          lastFrame: initialDefaultFrame,
          lastIndex: 0,
          value: value2
        };
        expressionHelpers.searchExpressions(elem2, data2, prop);
        if (prop.k) {
          container2.addDynamicProperty(prop);
        }
        return prop;
      };
      function getShapeValueAtTime(frameNum) {
        if (!this._cachingAtTime) {
          this._cachingAtTime = {
            shapeValue: shapePool.clone(this.pv),
            lastIndex: 0,
            lastTime: initialDefaultFrame
          };
        }
        frameNum *= this.elem.globalData.frameRate;
        frameNum -= this.offsetTime;
        if (frameNum !== this._cachingAtTime.lastTime) {
          this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < frameNum ? this._caching.lastIndex : 0;
          this._cachingAtTime.lastTime = frameNum;
          this.interpolateShape(frameNum, this._cachingAtTime.shapeValue, this._cachingAtTime);
        }
        return this._cachingAtTime.shapeValue;
      }
      var ShapePropertyConstructorFunction = ShapePropertyFactory.getConstructorFunction();
      var KeyframedShapePropertyConstructorFunction = ShapePropertyFactory.getKeyframedConstructorFunction();
      function ShapeExpressions() {
      }
      ShapeExpressions.prototype = {
        vertices: function vertices(prop, time2) {
          if (this.k) {
            this.getValue();
          }
          var shapePath = this.v;
          if (time2 !== void 0) {
            shapePath = this.getValueAtTime(time2, 0);
          }
          var i2;
          var len = shapePath._length;
          var vertices2 = shapePath[prop];
          var points = shapePath.v;
          var arr = createSizedArray(len);
          for (i2 = 0; i2 < len; i2 += 1) {
            if (prop === "i" || prop === "o") {
              arr[i2] = [vertices2[i2][0] - points[i2][0], vertices2[i2][1] - points[i2][1]];
            } else {
              arr[i2] = [vertices2[i2][0], vertices2[i2][1]];
            }
          }
          return arr;
        },
        points: function points(time2) {
          return this.vertices("v", time2);
        },
        inTangents: function inTangents(time2) {
          return this.vertices("i", time2);
        },
        outTangents: function outTangents(time2) {
          return this.vertices("o", time2);
        },
        isClosed: function isClosed() {
          return this.v.c;
        },
        pointOnPath: function pointOnPath(perc, time2) {
          var shapePath = this.v;
          if (time2 !== void 0) {
            shapePath = this.getValueAtTime(time2, 0);
          }
          if (!this._segmentsLength) {
            this._segmentsLength = bez.getSegmentsLength(shapePath);
          }
          var segmentsLength = this._segmentsLength;
          var lengths = segmentsLength.lengths;
          var lengthPos = segmentsLength.totalLength * perc;
          var i2 = 0;
          var len = lengths.length;
          var accumulatedLength = 0;
          var pt;
          while (i2 < len) {
            if (accumulatedLength + lengths[i2].addedLength > lengthPos) {
              var initIndex = i2;
              var endIndex = shapePath.c && i2 === len - 1 ? 0 : i2 + 1;
              var segmentPerc = (lengthPos - accumulatedLength) / lengths[i2].addedLength;
              pt = bez.getPointInSegment(shapePath.v[initIndex], shapePath.v[endIndex], shapePath.o[initIndex], shapePath.i[endIndex], segmentPerc, lengths[i2]);
              break;
            } else {
              accumulatedLength += lengths[i2].addedLength;
            }
            i2 += 1;
          }
          if (!pt) {
            pt = shapePath.c ? [shapePath.v[0][0], shapePath.v[0][1]] : [shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1]];
          }
          return pt;
        },
        vectorOnPath: function vectorOnPath(perc, time2, vectorType) {
          if (perc == 1) {
            perc = this.v.c;
          } else if (perc == 0) {
            perc = 0.999;
          }
          var pt1 = this.pointOnPath(perc, time2);
          var pt2 = this.pointOnPath(perc + 1e-3, time2);
          var xLength = pt2[0] - pt1[0];
          var yLength = pt2[1] - pt1[1];
          var magnitude = Math.sqrt(Math.pow(xLength, 2) + Math.pow(yLength, 2));
          if (magnitude === 0) {
            return [0, 0];
          }
          var unitVector = vectorType === "tangent" ? [xLength / magnitude, yLength / magnitude] : [-yLength / magnitude, xLength / magnitude];
          return unitVector;
        },
        tangentOnPath: function tangentOnPath(perc, time2) {
          return this.vectorOnPath(perc, time2, "tangent");
        },
        normalOnPath: function normalOnPath(perc, time2) {
          return this.vectorOnPath(perc, time2, "normal");
        },
        setGroupProperty: expressionHelpers.setGroupProperty,
        getValueAtTime: expressionHelpers.getStaticValueAtTime
      };
      extendPrototype([ShapeExpressions], ShapePropertyConstructorFunction);
      extendPrototype([ShapeExpressions], KeyframedShapePropertyConstructorFunction);
      KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime = getShapeValueAtTime;
      KeyframedShapePropertyConstructorFunction.prototype.initiateExpression = ExpressionManager.initiateExpression;
      var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;
      ShapePropertyFactory.getShapeProp = function(elem2, data2, type, arr, trims) {
        var prop = propertyGetShapeProp(elem2, data2, type, arr, trims);
        prop.propertyIndex = data2.ix;
        prop.lock = false;
        if (type === 3) {
          expressionHelpers.searchExpressions(elem2, data2.pt, prop);
        } else if (type === 4) {
          expressionHelpers.searchExpressions(elem2, data2.ks, prop);
        }
        if (prop.k) {
          elem2.addDynamicProperty(prop);
        }
        return prop;
      };
    }
    function initialize$1() {
      addPropertyDecorator();
    }
    function addDecorator() {
      function searchExpressions() {
        if (this.data.d.x) {
          this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this);
          this.addEffect(this.getExpressionValue.bind(this));
          return true;
        }
        return null;
      }
      TextProperty.prototype.getExpressionValue = function(currentValue, text2) {
        var newValue = this.calculateExpression(text2);
        if (currentValue.t !== newValue) {
          var newData = {};
          this.copyData(newData, currentValue);
          newData.t = newValue.toString();
          newData.__complete = false;
          return newData;
        }
        return currentValue;
      };
      TextProperty.prototype.searchProperty = function() {
        var isKeyframed = this.searchKeyframes();
        var hasExpressions = this.searchExpressions();
        this.kf = isKeyframed || hasExpressions;
        return this.kf;
      };
      TextProperty.prototype.searchExpressions = searchExpressions;
    }
    function initialize() {
      addDecorator();
    }
    function SVGComposableEffect() {
    }
    SVGComposableEffect.prototype = {
      createMergeNode: function createMergeNode(resultId, ins) {
        var feMerge = createNS("feMerge");
        feMerge.setAttribute("result", resultId);
        var feMergeNode;
        var i2;
        for (i2 = 0; i2 < ins.length; i2 += 1) {
          feMergeNode = createNS("feMergeNode");
          feMergeNode.setAttribute("in", ins[i2]);
          feMerge.appendChild(feMergeNode);
          feMerge.appendChild(feMergeNode);
        }
        return feMerge;
      }
    };
    var linearFilterValue = "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";
    function SVGTintFilter(filter, filterManager, elem2, id2, source) {
      this.filterManager = filterManager;
      var feColorMatrix = createNS("feColorMatrix");
      feColorMatrix.setAttribute("type", "matrix");
      feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
      feColorMatrix.setAttribute("values", linearFilterValue + " 1 0");
      this.linearFilter = feColorMatrix;
      feColorMatrix.setAttribute("result", id2 + "_tint_1");
      filter.appendChild(feColorMatrix);
      feColorMatrix = createNS("feColorMatrix");
      feColorMatrix.setAttribute("type", "matrix");
      feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
      feColorMatrix.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0");
      feColorMatrix.setAttribute("result", id2 + "_tint_2");
      filter.appendChild(feColorMatrix);
      this.matrixFilter = feColorMatrix;
      var feMerge = this.createMergeNode(id2, [source, id2 + "_tint_1", id2 + "_tint_2"]);
      filter.appendChild(feMerge);
    }
    extendPrototype([SVGComposableEffect], SVGTintFilter);
    SVGTintFilter.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var colorBlack = this.filterManager.effectElements[0].p.v;
        var colorWhite = this.filterManager.effectElements[1].p.v;
        var opacity = this.filterManager.effectElements[2].p.v / 100;
        this.linearFilter.setAttribute("values", linearFilterValue + " " + opacity + " 0");
        this.matrixFilter.setAttribute("values", colorWhite[0] - colorBlack[0] + " 0 0 0 " + colorBlack[0] + " " + (colorWhite[1] - colorBlack[1]) + " 0 0 0 " + colorBlack[1] + " " + (colorWhite[2] - colorBlack[2]) + " 0 0 0 " + colorBlack[2] + " 0 0 0 1 0");
      }
    };
    function SVGFillFilter(filter, filterManager, elem2, id2) {
      this.filterManager = filterManager;
      var feColorMatrix = createNS("feColorMatrix");
      feColorMatrix.setAttribute("type", "matrix");
      feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
      feColorMatrix.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0");
      feColorMatrix.setAttribute("result", id2);
      filter.appendChild(feColorMatrix);
      this.matrixFilter = feColorMatrix;
    }
    SVGFillFilter.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var color = this.filterManager.effectElements[2].p.v;
        var opacity = this.filterManager.effectElements[6].p.v;
        this.matrixFilter.setAttribute("values", "0 0 0 0 " + color[0] + " 0 0 0 0 " + color[1] + " 0 0 0 0 " + color[2] + " 0 0 0 " + opacity + " 0");
      }
    };
    function SVGStrokeEffect(fil, filterManager, elem2) {
      this.initialized = false;
      this.filterManager = filterManager;
      this.elem = elem2;
      this.paths = [];
    }
    SVGStrokeEffect.prototype.initialize = function() {
      var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
      var path;
      var groupPath;
      var i2;
      var len;
      if (this.filterManager.effectElements[1].p.v === 1) {
        len = this.elem.maskManager.masksProperties.length;
        i2 = 0;
      } else {
        i2 = this.filterManager.effectElements[0].p.v - 1;
        len = i2 + 1;
      }
      groupPath = createNS("g");
      groupPath.setAttribute("fill", "none");
      groupPath.setAttribute("stroke-linecap", "round");
      groupPath.setAttribute("stroke-dashoffset", 1);
      for (i2; i2 < len; i2 += 1) {
        path = createNS("path");
        groupPath.appendChild(path);
        this.paths.push({
          p: path,
          m: i2
        });
      }
      if (this.filterManager.effectElements[10].p.v === 3) {
        var mask2 = createNS("mask");
        var id2 = createElementID();
        mask2.setAttribute("id", id2);
        mask2.setAttribute("mask-type", "alpha");
        mask2.appendChild(groupPath);
        this.elem.globalData.defs.appendChild(mask2);
        var g = createNS("g");
        g.setAttribute("mask", "url(" + getLocationHref() + "#" + id2 + ")");
        while (elemChildren[0]) {
          g.appendChild(elemChildren[0]);
        }
        this.elem.layerElement.appendChild(g);
        this.masker = mask2;
        groupPath.setAttribute("stroke", "#fff");
      } else if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
        if (this.filterManager.effectElements[10].p.v === 2) {
          elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
          while (elemChildren.length) {
            this.elem.layerElement.removeChild(elemChildren[0]);
          }
        }
        this.elem.layerElement.appendChild(groupPath);
        this.elem.layerElement.removeAttribute("mask");
        groupPath.setAttribute("stroke", "#fff");
      }
      this.initialized = true;
      this.pathMasker = groupPath;
    };
    SVGStrokeEffect.prototype.renderFrame = function(forceRender) {
      if (!this.initialized) {
        this.initialize();
      }
      var i2;
      var len = this.paths.length;
      var mask2;
      var path;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.paths[i2].m !== -1) {
          mask2 = this.elem.maskManager.viewData[this.paths[i2].m];
          path = this.paths[i2].p;
          if (forceRender || this.filterManager._mdf || mask2.prop._mdf) {
            path.setAttribute("d", mask2.lastPath);
          }
          if (forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask2.prop._mdf) {
            var dasharrayValue;
            if (this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100) {
              var s = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
              var e = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
              var l = path.getTotalLength();
              dasharrayValue = "0 0 0 " + l * s + " ";
              var lineLength = l * (e - s);
              var segment = 1 + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
              var units = Math.floor(lineLength / segment);
              var j2;
              for (j2 = 0; j2 < units; j2 += 1) {
                dasharrayValue += "1 " + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01 + " ";
              }
              dasharrayValue += "0 " + l * 10 + " 0 0";
            } else {
              dasharrayValue = "1 " + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
            }
            path.setAttribute("stroke-dasharray", dasharrayValue);
          }
        }
      }
      if (forceRender || this.filterManager.effectElements[4].p._mdf) {
        this.pathMasker.setAttribute("stroke-width", this.filterManager.effectElements[4].p.v * 2);
      }
      if (forceRender || this.filterManager.effectElements[6].p._mdf) {
        this.pathMasker.setAttribute("opacity", this.filterManager.effectElements[6].p.v);
      }
      if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
        if (forceRender || this.filterManager.effectElements[3].p._mdf) {
          var color = this.filterManager.effectElements[3].p.v;
          this.pathMasker.setAttribute("stroke", "rgb(" + bmFloor(color[0] * 255) + "," + bmFloor(color[1] * 255) + "," + bmFloor(color[2] * 255) + ")");
        }
      }
    };
    function SVGTritoneFilter(filter, filterManager, elem2, id2) {
      this.filterManager = filterManager;
      var feColorMatrix = createNS("feColorMatrix");
      feColorMatrix.setAttribute("type", "matrix");
      feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
      feColorMatrix.setAttribute("values", "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0");
      filter.appendChild(feColorMatrix);
      var feComponentTransfer = createNS("feComponentTransfer");
      feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
      feComponentTransfer.setAttribute("result", id2);
      this.matrixFilter = feComponentTransfer;
      var feFuncR = createNS("feFuncR");
      feFuncR.setAttribute("type", "table");
      feComponentTransfer.appendChild(feFuncR);
      this.feFuncR = feFuncR;
      var feFuncG = createNS("feFuncG");
      feFuncG.setAttribute("type", "table");
      feComponentTransfer.appendChild(feFuncG);
      this.feFuncG = feFuncG;
      var feFuncB = createNS("feFuncB");
      feFuncB.setAttribute("type", "table");
      feComponentTransfer.appendChild(feFuncB);
      this.feFuncB = feFuncB;
      filter.appendChild(feComponentTransfer);
    }
    SVGTritoneFilter.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var color1 = this.filterManager.effectElements[0].p.v;
        var color2 = this.filterManager.effectElements[1].p.v;
        var color3 = this.filterManager.effectElements[2].p.v;
        var tableR = color3[0] + " " + color2[0] + " " + color1[0];
        var tableG = color3[1] + " " + color2[1] + " " + color1[1];
        var tableB = color3[2] + " " + color2[2] + " " + color1[2];
        this.feFuncR.setAttribute("tableValues", tableR);
        this.feFuncG.setAttribute("tableValues", tableG);
        this.feFuncB.setAttribute("tableValues", tableB);
      }
    };
    function SVGProLevelsFilter(filter, filterManager, elem2, id2) {
      this.filterManager = filterManager;
      var effectElements = this.filterManager.effectElements;
      var feComponentTransfer = createNS("feComponentTransfer");
      if (effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1) {
        this.feFuncR = this.createFeFunc("feFuncR", feComponentTransfer);
      }
      if (effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1) {
        this.feFuncG = this.createFeFunc("feFuncG", feComponentTransfer);
      }
      if (effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1) {
        this.feFuncB = this.createFeFunc("feFuncB", feComponentTransfer);
      }
      if (effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1) {
        this.feFuncA = this.createFeFunc("feFuncA", feComponentTransfer);
      }
      if (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) {
        feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
        filter.appendChild(feComponentTransfer);
      }
      if (effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1) {
        feComponentTransfer = createNS("feComponentTransfer");
        feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
        feComponentTransfer.setAttribute("result", id2);
        filter.appendChild(feComponentTransfer);
        this.feFuncRComposed = this.createFeFunc("feFuncR", feComponentTransfer);
        this.feFuncGComposed = this.createFeFunc("feFuncG", feComponentTransfer);
        this.feFuncBComposed = this.createFeFunc("feFuncB", feComponentTransfer);
      }
    }
    SVGProLevelsFilter.prototype.createFeFunc = function(type, feComponentTransfer) {
      var feFunc = createNS(type);
      feFunc.setAttribute("type", "table");
      feComponentTransfer.appendChild(feFunc);
      return feFunc;
    };
    SVGProLevelsFilter.prototype.getTableValue = function(inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
      var cnt = 0;
      var segments = 256;
      var perc;
      var min2 = Math.min(inputBlack, inputWhite);
      var max2 = Math.max(inputBlack, inputWhite);
      var table2 = Array.call(null, {
        length: segments
      });
      var colorValue;
      var pos = 0;
      var outputDelta = outputWhite - outputBlack;
      var inputDelta = inputWhite - inputBlack;
      while (cnt <= 256) {
        perc = cnt / 256;
        if (perc <= min2) {
          colorValue = inputDelta < 0 ? outputWhite : outputBlack;
        } else if (perc >= max2) {
          colorValue = inputDelta < 0 ? outputBlack : outputWhite;
        } else {
          colorValue = outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma);
        }
        table2[pos] = colorValue;
        pos += 1;
        cnt += 256 / (segments - 1);
      }
      return table2.join(" ");
    };
    SVGProLevelsFilter.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var val2;
        var effectElements = this.filterManager.effectElements;
        if (this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)) {
          val2 = this.getTableValue(effectElements[3].p.v, effectElements[4].p.v, effectElements[5].p.v, effectElements[6].p.v, effectElements[7].p.v);
          this.feFuncRComposed.setAttribute("tableValues", val2);
          this.feFuncGComposed.setAttribute("tableValues", val2);
          this.feFuncBComposed.setAttribute("tableValues", val2);
        }
        if (this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)) {
          val2 = this.getTableValue(effectElements[10].p.v, effectElements[11].p.v, effectElements[12].p.v, effectElements[13].p.v, effectElements[14].p.v);
          this.feFuncR.setAttribute("tableValues", val2);
        }
        if (this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)) {
          val2 = this.getTableValue(effectElements[17].p.v, effectElements[18].p.v, effectElements[19].p.v, effectElements[20].p.v, effectElements[21].p.v);
          this.feFuncG.setAttribute("tableValues", val2);
        }
        if (this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)) {
          val2 = this.getTableValue(effectElements[24].p.v, effectElements[25].p.v, effectElements[26].p.v, effectElements[27].p.v, effectElements[28].p.v);
          this.feFuncB.setAttribute("tableValues", val2);
        }
        if (this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)) {
          val2 = this.getTableValue(effectElements[31].p.v, effectElements[32].p.v, effectElements[33].p.v, effectElements[34].p.v, effectElements[35].p.v);
          this.feFuncA.setAttribute("tableValues", val2);
        }
      }
    };
    function SVGDropShadowEffect(filter, filterManager, elem2, id2, source) {
      var globalFilterSize = filterManager.container.globalData.renderConfig.filterSize;
      var filterSize = filterManager.data.fs || globalFilterSize;
      filter.setAttribute("x", filterSize.x || globalFilterSize.x);
      filter.setAttribute("y", filterSize.y || globalFilterSize.y);
      filter.setAttribute("width", filterSize.width || globalFilterSize.width);
      filter.setAttribute("height", filterSize.height || globalFilterSize.height);
      this.filterManager = filterManager;
      var feGaussianBlur = createNS("feGaussianBlur");
      feGaussianBlur.setAttribute("in", "SourceAlpha");
      feGaussianBlur.setAttribute("result", id2 + "_drop_shadow_1");
      feGaussianBlur.setAttribute("stdDeviation", "0");
      this.feGaussianBlur = feGaussianBlur;
      filter.appendChild(feGaussianBlur);
      var feOffset = createNS("feOffset");
      feOffset.setAttribute("dx", "25");
      feOffset.setAttribute("dy", "0");
      feOffset.setAttribute("in", id2 + "_drop_shadow_1");
      feOffset.setAttribute("result", id2 + "_drop_shadow_2");
      this.feOffset = feOffset;
      filter.appendChild(feOffset);
      var feFlood = createNS("feFlood");
      feFlood.setAttribute("flood-color", "#00ff00");
      feFlood.setAttribute("flood-opacity", "1");
      feFlood.setAttribute("result", id2 + "_drop_shadow_3");
      this.feFlood = feFlood;
      filter.appendChild(feFlood);
      var feComposite = createNS("feComposite");
      feComposite.setAttribute("in", id2 + "_drop_shadow_3");
      feComposite.setAttribute("in2", id2 + "_drop_shadow_2");
      feComposite.setAttribute("operator", "in");
      feComposite.setAttribute("result", id2 + "_drop_shadow_4");
      filter.appendChild(feComposite);
      var feMerge = this.createMergeNode(id2, [id2 + "_drop_shadow_4", source]);
      filter.appendChild(feMerge);
    }
    extendPrototype([SVGComposableEffect], SVGDropShadowEffect);
    SVGDropShadowEffect.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        if (forceRender || this.filterManager.effectElements[4].p._mdf) {
          this.feGaussianBlur.setAttribute("stdDeviation", this.filterManager.effectElements[4].p.v / 4);
        }
        if (forceRender || this.filterManager.effectElements[0].p._mdf) {
          var col = this.filterManager.effectElements[0].p.v;
          this.feFlood.setAttribute("flood-color", rgbToHex(Math.round(col[0] * 255), Math.round(col[1] * 255), Math.round(col[2] * 255)));
        }
        if (forceRender || this.filterManager.effectElements[1].p._mdf) {
          this.feFlood.setAttribute("flood-opacity", this.filterManager.effectElements[1].p.v / 255);
        }
        if (forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {
          var distance = this.filterManager.effectElements[3].p.v;
          var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
          var x = distance * Math.cos(angle);
          var y = distance * Math.sin(angle);
          this.feOffset.setAttribute("dx", x);
          this.feOffset.setAttribute("dy", y);
        }
      }
    };
    var _svgMatteSymbols = [];
    function SVGMatte3Effect(filterElem, filterManager, elem2) {
      this.initialized = false;
      this.filterManager = filterManager;
      this.filterElem = filterElem;
      this.elem = elem2;
      elem2.matteElement = createNS("g");
      elem2.matteElement.appendChild(elem2.layerElement);
      elem2.matteElement.appendChild(elem2.transformedElement);
      elem2.baseElement = elem2.matteElement;
    }
    SVGMatte3Effect.prototype.findSymbol = function(mask2) {
      var i2 = 0;
      var len = _svgMatteSymbols.length;
      while (i2 < len) {
        if (_svgMatteSymbols[i2] === mask2) {
          return _svgMatteSymbols[i2];
        }
        i2 += 1;
      }
      return null;
    };
    SVGMatte3Effect.prototype.replaceInParent = function(mask2, symbolId) {
      var parentNode = mask2.layerElement.parentNode;
      if (!parentNode) {
        return;
      }
      var children = parentNode.children;
      var i2 = 0;
      var len = children.length;
      while (i2 < len) {
        if (children[i2] === mask2.layerElement) {
          break;
        }
        i2 += 1;
      }
      var nextChild;
      if (i2 <= len - 2) {
        nextChild = children[i2 + 1];
      }
      var useElem = createNS("use");
      useElem.setAttribute("href", "#" + symbolId);
      if (nextChild) {
        parentNode.insertBefore(useElem, nextChild);
      } else {
        parentNode.appendChild(useElem);
      }
    };
    SVGMatte3Effect.prototype.setElementAsMask = function(elem2, mask2) {
      if (!this.findSymbol(mask2)) {
        var symbolId = createElementID();
        var masker = createNS("mask");
        masker.setAttribute("id", mask2.layerId);
        masker.setAttribute("mask-type", "alpha");
        _svgMatteSymbols.push(mask2);
        var defs = elem2.globalData.defs;
        defs.appendChild(masker);
        var symbol2 = createNS("symbol");
        symbol2.setAttribute("id", symbolId);
        this.replaceInParent(mask2, symbolId);
        symbol2.appendChild(mask2.layerElement);
        defs.appendChild(symbol2);
        var useElem = createNS("use");
        useElem.setAttribute("href", "#" + symbolId);
        masker.appendChild(useElem);
        mask2.data.hd = false;
        mask2.show();
      }
      elem2.setMatte(mask2.layerId);
    };
    SVGMatte3Effect.prototype.initialize = function() {
      var ind = this.filterManager.effectElements[0].p.v;
      var elements = this.elem.comp.elements;
      var i2 = 0;
      var len = elements.length;
      while (i2 < len) {
        if (elements[i2] && elements[i2].data.ind === ind) {
          this.setElementAsMask(this.elem, elements[i2]);
        }
        i2 += 1;
      }
      this.initialized = true;
    };
    SVGMatte3Effect.prototype.renderFrame = function() {
      if (!this.initialized) {
        this.initialize();
      }
    };
    function SVGGaussianBlurEffect(filter, filterManager, elem2, id2) {
      filter.setAttribute("x", "-100%");
      filter.setAttribute("y", "-100%");
      filter.setAttribute("width", "300%");
      filter.setAttribute("height", "300%");
      this.filterManager = filterManager;
      var feGaussianBlur = createNS("feGaussianBlur");
      feGaussianBlur.setAttribute("result", id2);
      filter.appendChild(feGaussianBlur);
      this.feGaussianBlur = feGaussianBlur;
    }
    SVGGaussianBlurEffect.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var kBlurrinessToSigma = 0.3;
        var sigma = this.filterManager.effectElements[0].p.v * kBlurrinessToSigma;
        var dimensions = this.filterManager.effectElements[1].p.v;
        var sigmaX = dimensions == 3 ? 0 : sigma;
        var sigmaY = dimensions == 2 ? 0 : sigma;
        this.feGaussianBlur.setAttribute("stdDeviation", sigmaX + " " + sigmaY);
        var edgeMode = this.filterManager.effectElements[2].p.v == 1 ? "wrap" : "duplicate";
        this.feGaussianBlur.setAttribute("edgeMode", edgeMode);
      }
    };
    function TransformEffect() {
    }
    TransformEffect.prototype.init = function(effectsManager) {
      this.effectsManager = effectsManager;
      this.type = effectTypes.TRANSFORM_EFFECT;
      this.matrix = new Matrix();
      this.opacity = -1;
      this._mdf = false;
      this._opMdf = false;
    };
    TransformEffect.prototype.renderFrame = function(forceFrame) {
      this._opMdf = false;
      this._mdf = false;
      if (forceFrame || this.effectsManager._mdf) {
        var effectElements = this.effectsManager.effectElements;
        var anchor = effectElements[0].p.v;
        var position2 = effectElements[1].p.v;
        var isUniformScale = effectElements[2].p.v === 1;
        var scaleHeight = effectElements[3].p.v;
        var scaleWidth = isUniformScale ? scaleHeight : effectElements[4].p.v;
        var skew = effectElements[5].p.v;
        var skewAxis = effectElements[6].p.v;
        var rotation2 = effectElements[7].p.v;
        this.matrix.reset();
        this.matrix.translate(-anchor[0], -anchor[1], anchor[2]);
        this.matrix.scale(scaleWidth * 0.01, scaleHeight * 0.01, 1);
        this.matrix.rotate(-rotation2 * degToRads);
        this.matrix.skewFromAxis(-skew * degToRads, (skewAxis + 90) * degToRads);
        this.matrix.translate(position2[0], position2[1], 0);
        this._mdf = true;
        if (this.opacity !== effectElements[8].p.v) {
          this.opacity = effectElements[8].p.v;
          this._opMdf = true;
        }
      }
    };
    function SVGTransformEffect(_2, filterManager) {
      this.init(filterManager);
    }
    extendPrototype([TransformEffect], SVGTransformEffect);
    function CVTransformEffect(effectsManager) {
      this.init(effectsManager);
    }
    extendPrototype([TransformEffect], CVTransformEffect);
    registerRenderer("canvas", CanvasRenderer);
    registerRenderer("html", HybridRenderer);
    registerRenderer("svg", SVGRenderer);
    ShapeModifiers.registerModifier("tm", TrimModifier);
    ShapeModifiers.registerModifier("pb", PuckerAndBloatModifier);
    ShapeModifiers.registerModifier("rp", RepeaterModifier);
    ShapeModifiers.registerModifier("rd", RoundCornersModifier);
    ShapeModifiers.registerModifier("zz", ZigZagModifier);
    ShapeModifiers.registerModifier("op", OffsetPathModifier);
    setExpressionsPlugin(Expressions);
    setExpressionInterfaces(getInterface);
    initialize$1();
    initialize();
    registerEffect$1(20, SVGTintFilter, true);
    registerEffect$1(21, SVGFillFilter, true);
    registerEffect$1(22, SVGStrokeEffect, false);
    registerEffect$1(23, SVGTritoneFilter, true);
    registerEffect$1(24, SVGProLevelsFilter, true);
    registerEffect$1(25, SVGDropShadowEffect, true);
    registerEffect$1(28, SVGMatte3Effect, false);
    registerEffect$1(29, SVGGaussianBlurEffect, true);
    registerEffect$1(35, SVGTransformEffect, false);
    registerEffect(35, CVTransformEffect);
    return lottie;
  });
})(lottie, lottie.exports);
var lottieExports = lottie.exports;
Object.defineProperty(dist, "__esModule", {
  value: true
});
var _extends2 = _extends;
var _extends3 = _interopRequireDefault$5(_extends2);
var _getPrototypeOf = getPrototypeOf$1;
var _getPrototypeOf2 = _interopRequireDefault$5(_getPrototypeOf);
var _classCallCheck2 = classCallCheck;
var _classCallCheck3 = _interopRequireDefault$5(_classCallCheck2);
var _createClass2 = createClass;
var _createClass3 = _interopRequireDefault$5(_createClass2);
var _possibleConstructorReturn2 = possibleConstructorReturn;
var _possibleConstructorReturn3 = _interopRequireDefault$5(_possibleConstructorReturn2);
var _inherits2 = inherits;
var _inherits3 = _interopRequireDefault$5(_inherits2);
var _react = reactExports;
var _react2 = _interopRequireDefault$5(_react);
var _propTypes = propTypesExports;
var _propTypes2 = _interopRequireDefault$5(_propTypes);
var _lottieWeb = lottieExports;
var _lottieWeb2 = _interopRequireDefault$5(_lottieWeb);
function _interopRequireDefault$5(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Lottie = function(_React$Component) {
  (0, _inherits3.default)(Lottie2, _React$Component);
  function Lottie2() {
    var _ref;
    var _temp, _this, _ret;
    (0, _classCallCheck3.default)(this, Lottie2);
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Lottie2.__proto__ || (0, _getPrototypeOf2.default)(Lottie2)).call.apply(_ref, [this].concat(args))), _this), _this.handleClickToPause = function() {
      if (_this.anim.isPaused) {
        _this.anim.play();
      } else {
        _this.anim.pause();
      }
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }
  (0, _createClass3.default)(Lottie2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _props = this.props, options = _props.options, eventListeners = _props.eventListeners;
      var loop = options.loop, autoplay = options.autoplay, animationData = options.animationData, rendererSettings = options.rendererSettings, segments = options.segments;
      this.options = {
        container: this.el,
        renderer: "svg",
        loop: loop !== false,
        autoplay: autoplay !== false,
        segments: segments !== false,
        animationData,
        rendererSettings
      };
      this.options = (0, _extends3.default)({}, this.options, options);
      this.anim = _lottieWeb2.default.loadAnimation(this.options);
      this.registerEvents(eventListeners);
    }
  }, {
    key: "componentWillUpdate",
    value: function componentWillUpdate(nextProps) {
      if (this.options.animationData !== nextProps.options.animationData) {
        this.deRegisterEvents(this.props.eventListeners);
        this.destroy();
        this.options = (0, _extends3.default)({}, this.options, nextProps.options);
        this.anim = _lottieWeb2.default.loadAnimation(this.options);
        this.registerEvents(nextProps.eventListeners);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.props.isStopped) {
        this.stop();
      } else if (this.props.segments) {
        this.playSegments();
      } else {
        this.play();
      }
      this.pause();
      this.setSpeed();
      this.setDirection();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.deRegisterEvents(this.props.eventListeners);
      this.destroy();
      this.options.animationData = null;
      this.anim = null;
    }
  }, {
    key: "setSpeed",
    value: function setSpeed() {
      this.anim.setSpeed(this.props.speed);
    }
  }, {
    key: "setDirection",
    value: function setDirection() {
      this.anim.setDirection(this.props.direction);
    }
  }, {
    key: "play",
    value: function play() {
      this.anim.play();
    }
  }, {
    key: "playSegments",
    value: function playSegments() {
      this.anim.playSegments(this.props.segments);
    }
  }, {
    key: "stop",
    value: function stop() {
      this.anim.stop();
    }
  }, {
    key: "pause",
    value: function pause() {
      if (this.props.isPaused && !this.anim.isPaused) {
        this.anim.pause();
      } else if (!this.props.isPaused && this.anim.isPaused) {
        this.anim.pause();
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.anim.destroy();
    }
  }, {
    key: "registerEvents",
    value: function registerEvents(eventListeners) {
      var _this2 = this;
      eventListeners.forEach(function(eventListener) {
        _this2.anim.addEventListener(eventListener.eventName, eventListener.callback);
      });
    }
  }, {
    key: "deRegisterEvents",
    value: function deRegisterEvents(eventListeners) {
      var _this3 = this;
      eventListeners.forEach(function(eventListener) {
        _this3.anim.removeEventListener(eventListener.eventName, eventListener.callback);
      });
    }
  }, {
    key: "render",
    value: function render2() {
      var _this4 = this;
      var _props2 = this.props, width2 = _props2.width, height2 = _props2.height, ariaRole = _props2.ariaRole, ariaLabel = _props2.ariaLabel, isClickToPauseDisabled = _props2.isClickToPauseDisabled, title = _props2.title;
      var getSize = function getSize2(initial) {
        var size = void 0;
        if (typeof initial === "number") {
          size = initial + "px";
        } else {
          size = initial || "100%";
        }
        return size;
      };
      var lottieStyles = (0, _extends3.default)({
        width: getSize(width2),
        height: getSize(height2),
        overflow: "hidden",
        margin: "0 auto",
        outline: "none"
      }, this.props.style);
      var onClickHandler = isClickToPauseDisabled ? function() {
        return null;
      } : this.handleClickToPause;
      return (
        // Bug with eslint rules https://github.com/airbnb/javascript/issues/1374
        // eslint-disable-next-line jsx-a11y/no-static-element-interactions
        _react2.default.createElement("div", {
          ref: function ref(c) {
            _this4.el = c;
          },
          style: lottieStyles,
          onClick: onClickHandler,
          title,
          role: ariaRole,
          "aria-label": ariaLabel,
          tabIndex: "0"
        })
      );
    }
  }]);
  return Lottie2;
}(_react2.default.Component);
var _default = dist.default = Lottie;
Lottie.propTypes = {
  eventListeners: _propTypes2.default.arrayOf(_propTypes2.default.object),
  options: _propTypes2.default.object.isRequired,
  height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  isStopped: _propTypes2.default.bool,
  isPaused: _propTypes2.default.bool,
  speed: _propTypes2.default.number,
  segments: _propTypes2.default.arrayOf(_propTypes2.default.number),
  direction: _propTypes2.default.number,
  ariaRole: _propTypes2.default.string,
  ariaLabel: _propTypes2.default.string,
  isClickToPauseDisabled: _propTypes2.default.bool,
  title: _propTypes2.default.string,
  style: _propTypes2.default.string
};
Lottie.defaultProps = {
  eventListeners: [],
  isStopped: false,
  isPaused: false,
  speed: 1,
  ariaRole: "button",
  ariaLabel: "animation",
  isClickToPauseDisabled: false,
  title: ""
};
const loading = "_loading_c5al4_1";
const loadingWrapper = "_loadingWrapper_c5al4_14";
const styles$8 = {
  loading,
  loadingWrapper
};
function LoadingIndicator() {
  const defaultOptions2 = {
    loop: true,
    autoplay: true,
    path: "/loadingLottie.json",
    rendererSettings: {
      preserveAspectRatio: "xMidYMid slice"
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$8.loading, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$8.loadingWrapper, children: /* @__PURE__ */ jsxRuntimeExports.jsx(_default, { options: defaultOptions2 }) }) });
}
function StatefulLoadingIndicator() {
  const isLoading = useSelector((state) => {
    return state.editState.loading;
  });
  return isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
}
const ROLES = {
  SUPER_ADMIN: "super_admin",
  SURVEY_ADMIN: "survey_admin",
  SURVEYOR: "surveyor",
  ANALYST: "analyst"
};
const isSurveyAdmin = () => {
  const roles = TokenService.getUser().roles;
  return roles.indexOf(ROLES.SUPER_ADMIN) != -1 || roles.indexOf(ROLES.SURVEY_ADMIN) != -1;
};
const isSuperAdmin = () => {
  const roles = TokenService.getUser().roles;
  return roles.indexOf(ROLES.SUPER_ADMIN) != -1;
};
const isAnalyst = (user) => {
  const roles = user.roles;
  return roles.indexOf(ROLES.SUPER_ADMIN) != -1 || roles.indexOf(ROLES.ANALYST) != -1 || roles.indexOf(ROLES.SURVEY_ADMIN) != -1;
};
var Groups = {};
var _interopRequireDefault$4 = interopRequireDefaultExports;
Object.defineProperty(Groups, "__esModule", {
  value: true
});
var default_1$4 = Groups.default = void 0;
var _createSvgIcon$4 = _interopRequireDefault$4(requireCreateSvgIcon());
var _jsxRuntime$4 = jsxRuntimeExports;
default_1$4 = Groups.default = (0, _createSvgIcon$4.default)(/* @__PURE__ */ (0, _jsxRuntime$4.jsx)("path", {
  d: "M12 12.75c1.63 0 3.07.39 4.24.9 1.08.48 1.76 1.56 1.76 2.73V18H6v-1.61c0-1.18.68-2.26 1.76-2.73 1.17-.52 2.61-.91 4.24-.91M4 13c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2m1.13 1.1c-.37-.06-.74-.1-1.13-.1-.99 0-1.93.21-2.78.58C.48 14.9 0 15.62 0 16.43V18h4.5v-1.61c0-.83.23-1.61.63-2.29M20 13c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2m4 3.43c0-.81-.48-1.53-1.22-1.85-.85-.37-1.79-.58-2.78-.58-.39 0-.76.04-1.13.1.4.68.63 1.46.63 2.29V18H24zM12 6c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3"
}), "Groups");
const header = "_header_160k5_1";
const textCenter = "_textCenter_160k5_9";
const userInfo = "_userInfo_160k5_18";
const userInfoRtl = "_userInfoRtl_160k5_25";
const imageContainer = "_imageContainer_160k5_32";
const imageContainerRtl = "_imageContainerRtl_160k5_39";
const styles$7 = {
  header,
  textCenter,
  userInfo,
  userInfoRtl,
  imageContainer,
  imageContainerRtl
};
const LanguageSelector = () => {
  const { i18n } = useTranslation();
  const handleChange = (event) => {
    localStorage.setItem("lang", event.target.value);
    i18n.changeLanguage(event.target.value);
    setDocumentLang(event.target.value);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    Select,
    {
      onChange: handleChange,
      value: i18n.language,
      IconComponent: KeyboardArrowDown,
      sx: {
        ".MuiOutlinedInput-input": {
          padding: "5.5px 15px",
          position: "relative",
          color: "#181735",
          fontSize: ".875rem",
          fontWeight: "600",
          "&::after": {
            content: '""',
            height: "30px",
            borderRight: "2px solid #ececfd",
            margin: "0px 15px"
          }
        },
        "& .MuiOutlinedInput-notchedOutline": {
          borderRadius: "10px",
          border: "1px solid #ececfd"
        },
        "& .MuiSvgIcon-root": {
          color: "#181735",
          right: "15px"
        }
      },
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "en", title: "English", children: "EN" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "de", title: "Deutsch", children: "DE" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "ar", title: "العربية", children: "AR" })
      ]
    }
  );
};
const Header = () => {
  const authService = useService("auth");
  const { t } = useTranslation("manage");
  const nav = useNavigate();
  const dispatch = useDispatch();
  const location = useLocation();
  const isRtl = isSessionRtl();
  const logout = () => {
    setAnchorEl(null);
    dispatch(setLoading(true));
    authService.logout().then(() => {
      nav(routes.login);
    }).catch((e) => {
      nav(routes.login);
    }).finally(() => {
      dispatch(setLoading(false));
    });
  };
  const [anchorEl, setAnchorEl] = React.useState(null);
  const open = Boolean(anchorEl);
  const showSurveyTitle = reactExports.useMemo(() => {
    return showTitle(location);
  }, [location]);
  const surveyName = useSelector(
    (state) => {
      var _a2, _b2;
      return showSurveyTitle ? ((_b2 = (_a2 = state.editState) == null ? void 0 : _a2.survey) == null ? void 0 : _b2.name) || "" : "";
    }
  );
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: styles$7.header, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Box,
      {
        onClick: () => nav("/"),
        className: isRtl ? styles$7.imageContainerRtl : styles$7.imageContainer,
        children: [
          showSurveyTitle && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: isRtl ? "/arrow-back-rtl.png" : "/arrow-back.png", style: { height: "40px" } }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { style: { width: "12px" } })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: "/qlarr.png", style: { height: "40px" } })
        ]
      }
    ),
    showSurveyTitle && /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { className: styles$7.textCenter, variant: "h3", children: surveyName }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: isRtl ? styles$7.userInfoRtl : styles$7.userInfo, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(LanguageSelector, {}),
      TokenService.isAuthenticated() && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Box,
          {
            sx: {
              display: "inline-flex",
              alignItems: "center",
              border: "1px solid #ececfd",
              borderRadius: "10px",
              cursor: "pointer",
              padding: ".125rem 1rem",
              backgroundColor: open ? "#e3f2fd" : "#fff"
            },
            onClick: handleClick,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Person, { sx: { color: "#16205b", width: 32, height: 32 } }),
              open ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                KeyboardArrowUp,
                {
                  sx: {
                    transition: "transform 0.3s ease",
                    color: "#181735",
                    width: 24,
                    height: 24
                  }
                }
              ) : /* @__PURE__ */ jsxRuntimeExports.jsx(
                KeyboardArrowDown,
                {
                  sx: {
                    transition: "transform 0.3s ease",
                    color: "#181735",
                    width: 24,
                    height: 24
                  }
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Menu,
          {
            anchorEl,
            id: "account-menu",
            open,
            onClick: handleClose,
            onClose: handleClose,
            PaperProps: {
              elevation: 0,
              sx: {
                width: "200px",
                overflow: "visible",
                filter: "drop-shadow(0px 4px 6px rgba(0,0,0,0.1))",
                mt: 1.5,
                borderRadius: "5px",
                backgroundColor: "#ffffff",
                color: "#333333",
                "& .MuiMenuItem-root": {
                  "&:hover": {
                    backgroundColor: "#f5f5f5"
                  },
                  "& .MuiListItemIcon-root": {
                    minWidth: "40px"
                  }
                },
                transition: "transform 0.2s ease"
              }
            },
            transformOrigin: { horizontal: "right", vertical: "top" },
            anchorOrigin: { horizontal: "right", vertical: "bottom" },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                MenuItem,
                {
                  onClick: (event) => {
                    event.preventDefault();
                    handleClose();
                    setTimeout(() => {
                      nav(routes.profile);
                    }, 0);
                  },
                  sx: { display: "flex", justifyContent: "space-between" },
                  children: [
                    t("profile.title"),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Person, { sx: { color: "#16205b", width: 25, height: 25 } })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                MenuItem,
                {
                  disabled: !isSuperAdmin(),
                  onClick: () => {
                    handleClose();
                    nav(routes.manageUsers);
                  },
                  sx: { display: "flex", justifyContent: "space-between" },
                  children: [
                    t("profile.manage_users"),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(default_1$4, { sx: { color: "#16205b", width: 25, height: 25 } })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                MenuItem,
                {
                  onClick: () => {
                    handleClose();
                    logout();
                  },
                  sx: { display: "flex", justifyContent: "space-between" },
                  children: [
                    t("profile.logout"),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      LogoutOutlined,
                      {
                        sx: { color: "#16205b", width: 25, height: 25 }
                      }
                    )
                  ]
                }
              )
            ]
          }
        )
      ] })
    ] })
  ] });
};
const showTitle = (location) => {
  try {
    return Object.values(MANAGE_SURVEY_LANDING_PAGES).indexOf(
      location.pathname.split("/")[1]
    ) > -1;
  } catch (e) {
    console.error(e);
    return false;
  }
};
function ErrorWrapper() {
  const dispatch = useDispatch();
  const error2 = useSelector((state) => {
    return state.editState.error;
  });
  const setErrorSeen = () => {
    dispatch(onEditErrorSeen());
  };
  const handleRetry = () => {
    window.location.href = window.location.href;
  };
  return error2 && !error2.seen && /* @__PURE__ */ jsxRuntimeExports.jsx(
    ErrorLayout,
    {
      onRetry: handleRetry,
      setErrorSeen,
      error: error2
    }
  );
}
function shadows(mode) {
  const color = grey[500];
  const transparent1 = alpha(color, 0.2);
  const transparent2 = alpha(color, 0.14);
  const transparent3 = alpha(color, 0.12);
  return [
    "none",
    "0px 2px 1px -1px ".concat(transparent1, ",0px 1px 1px 0px ").concat(transparent2, ",0px 1px 3px 0px ").concat(transparent3),
    "0px 3px 1px -2px ".concat(transparent1, ",0px 2px 2px 0px ").concat(transparent2, ",0px 1px 5px 0px ").concat(transparent3),
    "0px 3px 3px -2px ".concat(transparent1, ",0px 3px 4px 0px ").concat(transparent2, ",0px 1px 8px 0px ").concat(transparent3),
    "0px 2px 4px -1px ".concat(transparent1, ",0px 4px 5px 0px ").concat(transparent2, ",0px 1px 10px 0px ").concat(transparent3),
    "0px 3px 5px -1px ".concat(transparent1, ",0px 5px 8px 0px ").concat(transparent2, ",0px 1px 14px 0px ").concat(transparent3),
    "0px 3px 5px -1px ".concat(transparent1, ",0px 6px 10px 0px ").concat(transparent2, ",0px 1px 18px 0px ").concat(transparent3),
    "0px 4px 5px -2px ".concat(transparent1, ",0px 7px 10px 1px ").concat(transparent2, ",0px 2px 16px 1px ").concat(transparent3),
    "0px 5px 5px -3px ".concat(transparent1, ",0px 8px 10px 1px ").concat(transparent2, ",0px 3px 14px 2px ").concat(transparent3),
    "0px 5px 6px -3px ".concat(transparent1, ",0px 9px 12px 1px ").concat(transparent2, ",0px 3px 16px 2px ").concat(transparent3),
    "0px 6px 6px -3px ".concat(transparent1, ",0px 10px 14px 1px ").concat(transparent2, ",0px 4px 18px 3px ").concat(transparent3),
    "0px 6px 7px -4px ".concat(transparent1, ",0px 11px 15px 1px ").concat(transparent2, ",0px 4px 20px 3px ").concat(transparent3),
    "0px 7px 8px -4px ".concat(transparent1, ",0px 12px 17px 2px ").concat(transparent2, ",0px 5px 22px 4px ").concat(transparent3),
    "0px 7px 8px -4px ".concat(transparent1, ",0px 13px 19px 2px ").concat(transparent2, ",0px 5px 24px 4px ").concat(transparent3),
    "0px 7px 9px -4px ".concat(transparent1, ",0px 14px 21px 2px ").concat(transparent2, ",0px 5px 26px 4px ").concat(transparent3),
    "0px 8px 9px -5px ".concat(transparent1, ",0px 15px 22px 2px ").concat(transparent2, ",0px 6px 28px 5px ").concat(transparent3),
    "0px 8px 10px -5px ".concat(transparent1, ",0px 16px 24px 2px ").concat(transparent2, ",0px 6px 30px 5px ").concat(transparent3),
    "0px 8px 11px -5px ".concat(transparent1, ",0px 17px 26px 2px ").concat(transparent2, ",0px 6px 32px 5px ").concat(transparent3),
    "0px 9px 11px -5px ".concat(transparent1, ",0px 18px 28px 2px ").concat(transparent2, ",0px 7px 34px 6px ").concat(transparent3),
    "0px 9px 12px -6px ".concat(transparent1, ",0px 19px 29px 2px ").concat(transparent2, ",0px 7px 36px 6px ").concat(transparent3),
    "0px 10px 13px -6px ".concat(transparent1, ",0px 20px 31px 3px ").concat(transparent2, ",0px 8px 38px 7px ").concat(transparent3),
    "0px 10px 13px -6px ".concat(transparent1, ",0px 21px 33px 3px ").concat(transparent2, ",0px 8px 40px 7px ").concat(transparent3),
    "0px 10px 14px -6px ".concat(transparent1, ",0px 22px 35px 3px ").concat(transparent2, ",0px 8px 42px 7px ").concat(transparent3),
    "0px 11px 14px -7px ".concat(transparent1, ",0px 23px 36px 3px ").concat(transparent2, ",0px 9px 44px 8px ").concat(transparent3),
    "0px 11px 15px -7px ".concat(transparent1, ",0px 24px 38px 3px ").concat(transparent2, ",0px 9px 46px 8px ").concat(transparent3)
  ];
}
function pxToRem(value2) {
  return "".concat(value2 / 16, "rem");
}
function responsiveFontSizes({ sm, md, lg }) {
  return {
    "@media (min-width:600px)": {
      fontSize: pxToRem(sm)
    },
    "@media (min-width:900px)": {
      fontSize: pxToRem(md)
    },
    "@media (min-width:1200px)": {
      fontSize: pxToRem(lg)
    }
  };
}
const primaryFont = "Rubik, sans-serif";
const secondaryFont = "Barlow, sans-serif";
const typography$1 = {
  fontFamily: primaryFont,
  fontSecondaryFamily: secondaryFont,
  fontWeightRegular: 400,
  fontWeightMedium: 500,
  fontWeightSemiBold: 600,
  fontWeightBold: 700,
  h1: {
    fontWeight: 700,
    lineHeight: 80 / 64,
    fontSize: pxToRem(40),
    fontFamily: secondaryFont,
    ...responsiveFontSizes({ sm: 52, md: 58, lg: 64 })
  },
  h2: {
    fontWeight: 700,
    lineHeight: 64 / 48,
    fontSize: pxToRem(32),
    fontFamily: secondaryFont,
    ...responsiveFontSizes({ sm: 40, md: 44, lg: 48 })
  },
  h3: {
    fontWeight: 700,
    lineHeight: 1.5,
    fontSize: pxToRem(24),
    fontFamily: secondaryFont,
    ...responsiveFontSizes({ sm: 26, md: 30, lg: 32 })
  },
  h4: {
    fontWeight: 600,
    lineHeight: 1.5,
    fontSize: pxToRem(20),
    fontFamily: secondaryFont,
    ...responsiveFontSizes({ sm: 20, md: 24, lg: 24 })
  },
  h5: {
    fontWeight: 600,
    lineHeight: 1.5,
    fontSize: pxToRem(18),
    fontFamily: secondaryFont,
    ...responsiveFontSizes({ sm: 19, md: 20, lg: 20 })
  },
  h6: {
    fontWeight: 600,
    lineHeight: 28 / 18,
    fontSize: pxToRem(17),
    fontFamily: secondaryFont,
    ...responsiveFontSizes({ sm: 18, md: 18, lg: 18 })
  },
  subtitle1: {
    fontWeight: 600,
    lineHeight: 1.5,
    fontSize: pxToRem(16)
  },
  subtitle2: {
    fontWeight: 600,
    lineHeight: 22 / 14,
    fontSize: pxToRem(14)
  },
  body1: {
    lineHeight: 1.5,
    fontSize: pxToRem(16)
  },
  body2: {
    lineHeight: 22 / 14,
    fontSize: pxToRem(14)
  },
  caption: {
    lineHeight: 1.5,
    fontSize: pxToRem(12)
  },
  overline: {
    fontWeight: 700,
    lineHeight: 1.5,
    fontSize: pxToRem(12),
    textTransform: "uppercase"
  },
  button: {
    fontWeight: 700,
    lineHeight: 24 / 14,
    fontSize: pxToRem(14),
    textTransform: "capitalize"
  }
};
function RTL({ children, themeDirection }) {
  reactExports.useEffect(() => {
    document.dir = themeDirection;
  }, [themeDirection]);
  const cacheRtl2 = createCache({
    key: "rtl",
    prepend: true,
    // https://github.com/styled-components/stylis-plugin-rtl/issues/35
    stylisPlugins: [stylisRTLPlugin]
  });
  if (themeDirection === "rtl") {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(CacheProvider, { value: cacheRtl2, children });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children });
}
RTL.propTypes = {
  children: PropTypes.node,
  themeDirection: PropTypes.string
};
function customShadows(mode) {
  const color = grey[500];
  const transparent = (opacity) => alpha(color, opacity);
  return {
    z1: "0 1px 2px 0 ".concat(transparent(0.04)),
    z4: "-4px 4px 12px 0 ".concat(transparent(0.08)),
    z8: "-8px 8px 24px -4px ".concat(transparent(0.08)),
    z12: "-12px 12px 36px -4px ".concat(transparent(0.12)),
    z16: "-16px 16px 48px -8px ".concat(transparent(0.16)),
    z20: "-20px 20px 60px -8px ".concat(transparent(0.2)),
    z24: "-24px 24px 72px -8px ".concat(transparent(0.24)),
    //
    primary: "0 8px 16px 0 ".concat(alpha(primary.main, 0.24)),
    info: "0 8px 16px 0 ".concat(alpha(info.main, 0.24)),
    secondary: "0 8px 16px 0 ".concat(alpha(secondary.main, 0.24)),
    success: "0 8px 16px 0 ".concat(alpha(success.main, 0.24)),
    warning: "0 8px 16px 0 ".concat(alpha(warning.main, 0.24)),
    error: "0 8px 16px 0 ".concat(alpha(error.main, 0.24)),
    //
    card: "0 0 2px 0 ".concat(alpha(color, 0.2), ", 0 12px 24px -4px ").concat(alpha(color, 0.12)),
    dialog: "-40px 40px 80px -8px ".concat(alpha(color, 0.24)),
    dropdown: "0 0 2px 0 ".concat(alpha(color, 0.24), ", -20px 20px 40px -4px ").concat(alpha(color, 0.24))
  };
}
var lodash_merge = { exports: {} };
lodash_merge.exports;
(function(module2, exports2) {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var HOT_COUNT = 800, HOT_SPAN = 16;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var freeExports = exports2 && !exports2.nodeType && exports2;
  var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;
  var nodeUtil = function() {
    try {
      var types = freeModule && freeModule.require && freeModule.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  function baseTimes(n, iteratee) {
    var index2 = -1, result = Array(n);
    while (++index2 < n) {
      result[index2] = iteratee(index2);
    }
    return result;
  }
  function baseUnary(func) {
    return function(value2) {
      return func(value2);
    };
  }
  function getValue(object, key2) {
    return object == null ? void 0 : object[key2];
  }
  function overArg(func, transform2) {
    return function(arg) {
      return func(transform2(arg));
    };
  }
  var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var funcToString = funcProto.toString;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  var maskSrcKey = function() {
    var uid2 = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid2 ? "Symbol(src)_1." + uid2 : "";
  }();
  var nativeObjectToString = objectProto.toString;
  var objectCtorString = funcToString.call(Object);
  var reIsNative = RegExp(
    "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  var Buffer2 = moduleExports ? root.Buffer : void 0, Symbol2 = root.Symbol, Uint8Array2 = root.Uint8Array;
  Buffer2 ? Buffer2.allocUnsafe : void 0;
  var getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable2 = objectProto.propertyIsEnumerable, splice = arrayProto.splice, symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
  var defineProperty5 = function() {
    try {
      var func = getNative(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e) {
    }
  }();
  var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0, nativeMax = Math.max, nativeNow = Date.now;
  var Map = getNative(root, "Map"), nativeCreate = getNative(Object, "create");
  var baseCreate = /* @__PURE__ */ function() {
    function object() {
    }
    return function(proto2) {
      if (!isObject2(proto2)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto2);
      }
      object.prototype = proto2;
      var result = new object();
      object.prototype = void 0;
      return result;
    };
  }();
  function Hash(entries) {
    var index2 = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index2 < length2) {
      var entry = entries[index2];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }
  function hashDelete(key2) {
    var result = this.has(key2) && delete this.__data__[key2];
    this.size -= result ? 1 : 0;
    return result;
  }
  function hashGet(key2) {
    var data2 = this.__data__;
    if (nativeCreate) {
      var result = data2[key2];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty2.call(data2, key2) ? data2[key2] : void 0;
  }
  function hashHas(key2) {
    var data2 = this.__data__;
    return nativeCreate ? data2[key2] !== void 0 : hasOwnProperty2.call(data2, key2);
  }
  function hashSet(key2, value2) {
    var data2 = this.__data__;
    this.size += this.has(key2) ? 0 : 1;
    data2[key2] = nativeCreate && value2 === void 0 ? HASH_UNDEFINED : value2;
    return this;
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  function ListCache(entries) {
    var index2 = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index2 < length2) {
      var entry = entries[index2];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  function listCacheDelete(key2) {
    var data2 = this.__data__, index2 = assocIndexOf(data2, key2);
    if (index2 < 0) {
      return false;
    }
    var lastIndex = data2.length - 1;
    if (index2 == lastIndex) {
      data2.pop();
    } else {
      splice.call(data2, index2, 1);
    }
    --this.size;
    return true;
  }
  function listCacheGet(key2) {
    var data2 = this.__data__, index2 = assocIndexOf(data2, key2);
    return index2 < 0 ? void 0 : data2[index2][1];
  }
  function listCacheHas(key2) {
    return assocIndexOf(this.__data__, key2) > -1;
  }
  function listCacheSet(key2, value2) {
    var data2 = this.__data__, index2 = assocIndexOf(data2, key2);
    if (index2 < 0) {
      ++this.size;
      data2.push([key2, value2]);
    } else {
      data2[index2][1] = value2;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index2 = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index2 < length2) {
      var entry = entries[index2];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash(),
      "map": new (Map || ListCache)(),
      "string": new Hash()
    };
  }
  function mapCacheDelete(key2) {
    var result = getMapData(this, key2)["delete"](key2);
    this.size -= result ? 1 : 0;
    return result;
  }
  function mapCacheGet(key2) {
    return getMapData(this, key2).get(key2);
  }
  function mapCacheHas(key2) {
    return getMapData(this, key2).has(key2);
  }
  function mapCacheSet(key2, value2) {
    var data2 = getMapData(this, key2), size = data2.size;
    data2.set(key2, value2);
    this.size += data2.size == size ? 0 : 1;
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function Stack2(entries) {
    var data2 = this.__data__ = new ListCache(entries);
    this.size = data2.size;
  }
  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }
  function stackDelete(key2) {
    var data2 = this.__data__, result = data2["delete"](key2);
    this.size = data2.size;
    return result;
  }
  function stackGet(key2) {
    return this.__data__.get(key2);
  }
  function stackHas(key2) {
    return this.__data__.has(key2);
  }
  function stackSet(key2, value2) {
    var data2 = this.__data__;
    if (data2 instanceof ListCache) {
      var pairs = data2.__data__;
      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key2, value2]);
        this.size = ++data2.size;
        return this;
      }
      data2 = this.__data__ = new MapCache(pairs);
    }
    data2.set(key2, value2);
    this.size = data2.size;
    return this;
  }
  Stack2.prototype.clear = stackClear;
  Stack2.prototype["delete"] = stackDelete;
  Stack2.prototype.get = stackGet;
  Stack2.prototype.has = stackHas;
  Stack2.prototype.set = stackSet;
  function arrayLikeKeys(value2, inherited) {
    var isArr = isArray3(value2), isArg = !isArr && isArguments(value2), isBuff = !isArr && !isArg && isBuffer(value2), isType = !isArr && !isArg && !isBuff && isTypedArray(value2), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value2.length, String) : [], length2 = result.length;
    for (var key2 in value2) {
      if (!(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
      (key2 == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key2 == "offset" || key2 == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || // Skip index properties.
      isIndex(key2, length2)))) {
        result.push(key2);
      }
    }
    return result;
  }
  function assignMergeValue(object, key2, value2) {
    if (value2 !== void 0 && !eq(object[key2], value2) || value2 === void 0 && !(key2 in object)) {
      baseAssignValue(object, key2, value2);
    }
  }
  function assignValue(object, key2, value2) {
    var objValue = object[key2];
    if (!(hasOwnProperty2.call(object, key2) && eq(objValue, value2)) || value2 === void 0 && !(key2 in object)) {
      baseAssignValue(object, key2, value2);
    }
  }
  function assocIndexOf(array, key2) {
    var length2 = array.length;
    while (length2--) {
      if (eq(array[length2][0], key2)) {
        return length2;
      }
    }
    return -1;
  }
  function baseAssignValue(object, key2, value2) {
    if (key2 == "__proto__" && defineProperty5) {
      defineProperty5(object, key2, {
        "configurable": true,
        "enumerable": true,
        "value": value2,
        "writable": true
      });
    } else {
      object[key2] = value2;
    }
  }
  var baseFor = createBaseFor();
  function baseGetTag(value2) {
    if (value2 == null) {
      return value2 === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value2) ? getRawTag(value2) : objectToString(value2);
  }
  function baseIsArguments(value2) {
    return isObjectLike(value2) && baseGetTag(value2) == argsTag;
  }
  function baseIsNative(value2) {
    if (!isObject2(value2) || isMasked(value2)) {
      return false;
    }
    var pattern = isFunction2(value2) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value2));
  }
  function baseIsTypedArray(value2) {
    return isObjectLike(value2) && isLength(value2.length) && !!typedArrayTags[baseGetTag(value2)];
  }
  function baseKeysIn(object) {
    if (!isObject2(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object), result = [];
    for (var key2 in object) {
      if (!(key2 == "constructor" && (isProto || !hasOwnProperty2.call(object, key2)))) {
        result.push(key2);
      }
    }
    return result;
  }
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor(source, function(srcValue, key2) {
      stack || (stack = new Stack2());
      if (isObject2(srcValue)) {
        baseMergeDeep(object, source, key2, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet(object, key2), srcValue, key2 + "", object, source, stack) : void 0;
        if (newValue === void 0) {
          newValue = srcValue;
        }
        assignMergeValue(object, key2, newValue);
      }
    }, keysIn);
  }
  function baseMergeDeep(object, source, key2, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key2), srcValue = safeGet(source, key2), stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue(object, key2, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key2 + "", object, source, stack) : void 0;
    var isCommon = newValue === void 0;
    if (isCommon) {
      var isArr = isArray3(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray3(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue);
        } else {
          newValue = [];
        }
      } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
        newValue = objValue;
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject2(objValue) || isFunction2(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack["delete"](srcValue);
    }
    assignMergeValue(object, key2, newValue);
  }
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + "");
  }
  var baseSetToString = !defineProperty5 ? identity : function(func, string) {
    return defineProperty5(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant(string),
      "writable": true
    });
  };
  function cloneBuffer(buffer, isDeep) {
    {
      return buffer.slice();
    }
  }
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
    return result;
  }
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = cloneArrayBuffer(typedArray.buffer);
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  function copyArray(source, array) {
    var index2 = -1, length2 = source.length;
    array || (array = Array(length2));
    while (++index2 < length2) {
      array[index2] = source[index2];
    }
    return array;
  }
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index2 = -1, length2 = props.length;
    while (++index2 < length2) {
      var key2 = props[index2];
      var newValue = void 0;
      if (newValue === void 0) {
        newValue = source[key2];
      }
      if (isNew) {
        baseAssignValue(object, key2, newValue);
      } else {
        assignValue(object, key2, newValue);
      }
    }
    return object;
  }
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index2 = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : void 0, guard = length2 > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : void 0;
      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length2 < 3 ? void 0 : customizer;
        length2 = 1;
      }
      object = Object(object);
      while (++index2 < length2) {
        var source = sources[index2];
        if (source) {
          assigner(object, source, index2, customizer);
        }
      }
      return object;
    });
  }
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index2 = -1, iterable = Object(object), props = keysFunc(object), length2 = props.length;
      while (length2--) {
        var key2 = props[++index2];
        if (iteratee(iterable[key2], key2, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  function getMapData(map, key2) {
    var data2 = map.__data__;
    return isKeyable(key2) ? data2[typeof key2 == "string" ? "string" : "hash"] : data2.map;
  }
  function getNative(object, key2) {
    var value2 = getValue(object, key2);
    return baseIsNative(value2) ? value2 : void 0;
  }
  function getRawTag(value2) {
    var isOwn = hasOwnProperty2.call(value2, symToStringTag), tag = value2[symToStringTag];
    try {
      value2[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value2);
    if (unmasked) {
      if (isOwn) {
        value2[symToStringTag] = tag;
      } else {
        delete value2[symToStringTag];
      }
    }
    return result;
  }
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }
  function isIndex(value2, length2) {
    var type = typeof value2;
    length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
    return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length2);
  }
  function isIterateeCall(value2, index2, object) {
    if (!isObject2(object)) {
      return false;
    }
    var type = typeof index2;
    if (type == "number" ? isArrayLike(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
      return eq(object[index2], value2);
    }
    return false;
  }
  function isKeyable(value2) {
    var type = typeof value2;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  function isPrototype(value2) {
    var Ctor = value2 && value2.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value2 === proto2;
  }
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key2 in Object(object)) {
        result.push(key2);
      }
    }
    return result;
  }
  function objectToString(value2) {
    return nativeObjectToString.call(value2);
  }
  function overRest(func, start, transform2) {
    start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args = arguments, index2 = -1, length2 = nativeMax(args.length - start, 0), array = Array(length2);
      while (++index2 < length2) {
        array[index2] = args[start + index2];
      }
      index2 = -1;
      var otherArgs = Array(start + 1);
      while (++index2 < start) {
        otherArgs[index2] = args[index2];
      }
      otherArgs[start] = transform2(array);
      return apply(func, this, otherArgs);
    };
  }
  function safeGet(object, key2) {
    if (key2 === "constructor" && typeof object[key2] === "function") {
      return;
    }
    if (key2 == "__proto__") {
      return;
    }
    return object[key2];
  }
  var setToString = shortOut(baseSetToString);
  function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  function eq(value2, other) {
    return value2 === other || value2 !== value2 && other !== other;
  }
  var isArguments = baseIsArguments(/* @__PURE__ */ function() {
    return arguments;
  }()) ? baseIsArguments : function(value2) {
    return isObjectLike(value2) && hasOwnProperty2.call(value2, "callee") && !propertyIsEnumerable2.call(value2, "callee");
  };
  var isArray3 = Array.isArray;
  function isArrayLike(value2) {
    return value2 != null && isLength(value2.length) && !isFunction2(value2);
  }
  function isArrayLikeObject(value2) {
    return isObjectLike(value2) && isArrayLike(value2);
  }
  var isBuffer = nativeIsBuffer || stubFalse;
  function isFunction2(value2) {
    if (!isObject2(value2)) {
      return false;
    }
    var tag = baseGetTag(value2);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  function isLength(value2) {
    return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER;
  }
  function isObject2(value2) {
    var type = typeof value2;
    return value2 != null && (type == "object" || type == "function");
  }
  function isObjectLike(value2) {
    return value2 != null && typeof value2 == "object";
  }
  function isPlainObject2(value2) {
    if (!isObjectLike(value2) || baseGetTag(value2) != objectTag) {
      return false;
    }
    var proto2 = getPrototype(value2);
    if (proto2 === null) {
      return true;
    }
    var Ctor = hasOwnProperty2.call(proto2, "constructor") && proto2.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  function toPlainObject(value2) {
    return copyObject(value2, keysIn(value2));
  }
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeysIn(object);
  }
  var merge2 = createAssigner(function(object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });
  function constant(value2) {
    return function() {
      return value2;
    };
  }
  function identity(value2) {
    return value2;
  }
  function stubFalse() {
    return false;
  }
  module2.exports = merge2;
})(lodash_merge, lodash_merge.exports);
var lodash_mergeExports = lodash_merge.exports;
const merge = /* @__PURE__ */ getDefaultExportFromCjs(lodash_mergeExports);
const COLORS$8 = ["primary", "secondary", "info", "success", "warning", "error"];
function fab(theme) {
  const lightMode = theme.palette.mode === "light";
  const rootStyles = (ownerState) => {
    const defaultColor = ownerState.color === "default";
    const inheritColor = ownerState.color === "inherit";
    const circularVariant = ownerState.variant === "circular";
    const extendedVariant = ownerState.variant === "extended";
    const outlinedVariant = ownerState.variant === "outlined";
    const outlinedExtendedVariant = ownerState.variant === "outlinedExtended";
    const softVariant = ownerState.variant === "soft";
    const softExtendedVariant = ownerState.variant === "softExtended";
    const defaultStyle = {
      "&:hover, &:active": {
        boxShadow: "none"
      },
      // FILLED
      ...(circularVariant || extendedVariant) && {
        ...(defaultColor || inheritColor) && {
          boxShadow: theme.customShadows.z8
        },
        ...inheritColor && {
          backgroundColor: theme.palette.text.primary,
          color: lightMode ? theme.palette.common.white : theme.palette.grey[800],
          "&:hover": {
            backgroundColor: lightMode ? theme.palette.grey[700] : theme.palette.grey[400]
          }
        }
      },
      // OUTLINED
      ...(outlinedVariant || outlinedExtendedVariant) && {
        boxShadow: "none",
        backgroundColor: "transparent",
        ...(defaultColor || inheritColor) && {
          border: "solid 1px ".concat(alpha(theme.palette.grey[500], 0.32))
        },
        ...defaultColor && {
          ...!lightMode && {
            color: theme.palette.text.secondary
          }
        },
        "&:hover": {
          borderColor: "currentColor",
          boxShadow: "0 0 0 0.5px currentColor",
          backgroundColor: theme.palette.action.hover
        }
      },
      // SOFT
      ...(softVariant || softExtendedVariant) && {
        boxShadow: "none",
        ...defaultColor && {
          color: theme.palette.grey[800],
          backgroundColor: theme.palette.grey[300],
          "&:hover": {
            backgroundColor: theme.palette.grey[400]
          }
        },
        ...inheritColor && {
          backgroundColor: alpha(theme.palette.grey[500], 0.08),
          "&:hover": {
            backgroundColor: alpha(theme.palette.grey[500], 0.24)
          }
        }
      }
    };
    const colorStyle = COLORS$8.map((color) => ({
      ...ownerState.color === color && {
        // FILLED
        ...(circularVariant || extendedVariant) && {
          boxShadow: theme.customShadows[color],
          "&:hover": {
            backgroundColor: theme.palette[color].dark
          }
        },
        // OUTLINED
        ...(outlinedVariant || outlinedExtendedVariant) && {
          color: theme.palette[color].main,
          border: "solid 1px ".concat(alpha(theme.palette[color].main, 0.48)),
          "&:hover": {
            backgroundColor: alpha(theme.palette[color].main, 0.08)
          }
        },
        // SOFT
        ...(softVariant || softExtendedVariant) && {
          color: theme.palette[color][lightMode ? "dark" : "light"],
          backgroundColor: alpha(theme.palette[color].main, 0.16),
          "&:hover": {
            backgroundColor: alpha(theme.palette[color].main, 0.32)
          }
        }
      }
    }));
    const disabledState = {
      ["&.".concat(fabClasses.disabled)]: {
        ...(outlinedVariant || outlinedExtendedVariant) && {
          backgroundColor: "transparent",
          border: "solid 1px ".concat(theme.palette.action.disabledBackground)
        }
      }
    };
    const size = {
      ...(extendedVariant || outlinedExtendedVariant || softExtendedVariant) && {
        width: "auto",
        "& svg": {
          marginRight: theme.spacing(1)
        },
        ...ownerState.size === "small" && {
          height: 34,
          minHeight: 34,
          borderRadius: 17,
          padding: theme.spacing(0, 1)
        },
        ...ownerState.size === "medium" && {
          height: 40,
          minHeight: 40,
          borderRadius: 20,
          padding: theme.spacing(0, 2)
        },
        ...ownerState.size === "large" && {
          height: 48,
          minHeight: 48,
          borderRadius: 24,
          padding: theme.spacing(0, 2)
        }
      }
    };
    return [defaultStyle, ...colorStyle, disabledState, size];
  };
  return {
    MuiFab: {
      styleOverrides: {
        root: ({ ownerState }) => rootStyles(ownerState)
      }
    }
  };
}
const paper$1 = ({ theme, bgcolor, dropdown }) => ({
  ...bgBlur({
    blur: 20,
    opacity: 0.9,
    color: theme.palette.background.paper,
    ...!!bgcolor && {
      color: bgcolor
    }
  }),
  backgroundImage: "url(/assets/cyan-blur.png), url(/assets/red-blur.png)",
  backgroundRepeat: "no-repeat, no-repeat",
  backgroundPosition: "top right, left bottom",
  backgroundSize: "50%, 50%",
  ...theme.direction === "rtl" && {
    backgroundPosition: "top left, right bottom"
  },
  ...dropdown && {
    padding: theme.spacing(0.5),
    boxShadow: theme.customShadows.dropdown,
    borderRadius: theme.shape.borderRadius * 1.25
  }
});
const menuItem = (theme) => ({
  ...theme.typography.body2,
  padding: theme.spacing(0.75, 1),
  borderRadius: theme.shape.borderRadius * 0.75,
  "&:not(:last-of-type)": {
    marginBottom: 4
  },
  ["&.".concat(menuItemClasses.selected)]: {
    fontWeight: theme.typography.fontWeightSemiBold,
    backgroundColor: theme.palette.action.selected,
    "&:hover": {
      backgroundColor: theme.palette.action.hover
    }
  },
  ["& .".concat(checkboxClasses.root)]: {
    padding: theme.spacing(0.5),
    marginLeft: theme.spacing(-0.5),
    marginRight: theme.spacing(0.5)
  },
  ["&.".concat(autocompleteClasses.option, '[aria-selected="true"]')]: {
    backgroundColor: theme.palette.action.selected,
    "&:hover": {
      backgroundColor: theme.palette.action.hover
    }
  },
  ["&+.".concat(dividerClasses.root)]: {
    margin: theme.spacing(0.5, 0)
  }
});
function bgBlur(props) {
  const color = (props == null ? void 0 : props.color) || "#000000";
  const blur = (props == null ? void 0 : props.blur) || 6;
  const opacity = (props == null ? void 0 : props.opacity) || 0.8;
  const imgUrl = props == null ? void 0 : props.imgUrl;
  if (imgUrl) {
    return {
      position: "relative",
      backgroundImage: "url(".concat(imgUrl, ")"),
      "&:before": {
        position: "absolute",
        top: 0,
        left: 0,
        zIndex: 9,
        content: '""',
        width: "100%",
        height: "100%",
        backdropFilter: "blur(".concat(blur, "px)"),
        WebkitBackdropFilter: "blur(".concat(blur, "px)"),
        backgroundColor: alpha(color, opacity)
      }
    };
  }
  return {
    backdropFilter: "blur(".concat(blur, "px)"),
    WebkitBackdropFilter: "blur(".concat(blur, "px)"),
    backgroundColor: alpha(color, opacity)
  };
}
function menu(theme) {
  return {
    MuiMenuItem: {
      styleOverrides: {
        root: {
          ...menuItem(theme)
        }
      }
    }
  };
}
const COLORS$7 = ["primary", "secondary", "info", "success", "warning", "error"];
function chip(theme) {
  const lightMode = theme.palette.mode === "light";
  const rootStyles = (ownerState) => {
    const defaultColor = ownerState.color === "default";
    const filledVariant = ownerState.variant === "filled";
    const outlinedVariant = ownerState.variant === "outlined";
    const softVariant = ownerState.variant === "soft";
    const defaultStyle = {
      ["& .".concat(chipClasses.deleteIcon)]: {
        opacity: 0.48,
        color: "currentColor",
        "&:hover": {
          opacity: 1,
          color: "currentColor"
        }
      },
      ...defaultColor && {
        ["& .".concat(chipClasses.avatar)]: {
          color: theme.palette.text.primary
        },
        // FILLED
        ...filledVariant && {
          color: lightMode ? theme.palette.common.white : theme.palette.grey[800],
          backgroundColor: theme.palette.text.primary,
          "&:hover": {
            backgroundColor: lightMode ? theme.palette.grey[700] : theme.palette.grey[100]
          },
          ["& .".concat(chipClasses.icon)]: {
            color: lightMode ? theme.palette.common.white : theme.palette.grey[800]
          }
        },
        // OUTLINED
        ...outlinedVariant && {
          border: "solid 1px ".concat(alpha(theme.palette.grey[500], 0.32))
        },
        // SOFT
        ...softVariant && {
          color: theme.palette.text.primary,
          backgroundColor: alpha(theme.palette.grey[500], 0.16),
          "&:hover": {
            backgroundColor: alpha(theme.palette.grey[500], 0.32)
          }
        }
      }
    };
    const colorStyle = COLORS$7.map((color) => ({
      ...ownerState.color === color && {
        ["& .".concat(chipClasses.avatar)]: {
          color: theme.palette[color].lighter,
          backgroundColor: theme.palette[color].dark
        },
        // SOFT
        ...softVariant && {
          color: theme.palette[color][lightMode ? "dark" : "light"],
          backgroundColor: alpha(theme.palette[color].main, 0.16),
          "&:hover": {
            backgroundColor: alpha(theme.palette[color].main, 0.32)
          }
        }
      }
    }));
    const disabledState = {
      ["&.".concat(chipClasses.disabled)]: {
        opacity: 1,
        color: theme.palette.action.disabled,
        ["& .".concat(chipClasses.icon)]: {
          color: theme.palette.action.disabled
        },
        ["& .".concat(chipClasses.avatar)]: {
          color: theme.palette.action.disabled,
          backgroundColor: theme.palette.action.disabledBackground
        },
        // FILLED
        ...filledVariant && {
          backgroundColor: theme.palette.action.disabledBackground
        },
        // OUTLINED
        ...outlinedVariant && {
          borderColor: theme.palette.action.disabledBackground
        },
        // SOFT
        ...softVariant && {
          backgroundColor: theme.palette.action.disabledBackground
        }
      }
    };
    return [
      defaultStyle,
      ...colorStyle,
      disabledState,
      {
        fontWeight: 500,
        borderRadius: theme.shape.borderRadius
      }
    ];
  };
  return {
    MuiChip: {
      styleOverrides: {
        root: ({ ownerState }) => rootStyles(ownerState)
      }
    }
  };
}
function card(theme) {
  return {
    MuiCard: {
      styleOverrides: {
        root: {
          position: "relative",
          boxShadow: theme.customShadows.card,
          borderRadius: theme.shape.borderRadius * 2,
          zIndex: 0
          // Fix Safari overflow: hidden with border radius
        }
      }
    },
    MuiCardHeader: {
      styleOverrides: {
        root: {
          padding: theme.spacing(3, 3, 0)
        }
      }
    },
    MuiCardContent: {
      styleOverrides: {
        root: {
          padding: theme.spacing(3)
        }
      }
    }
  };
}
function tabs(theme) {
  return {
    MuiTabs: {
      styleOverrides: {
        indicator: {
          backgroundColor: theme.palette.text.primary
        },
        scrollButtons: {
          width: 48,
          borderRadius: "50%"
        }
      }
    },
    MuiTab: {
      styleOverrides: {
        root: {
          padding: 0,
          opacity: 1,
          minWidth: 48,
          minHeight: 48,
          fontWeight: theme.typography.fontWeightSemiBold,
          "&:not(:last-of-type)": {
            marginRight: theme.spacing(3),
            [theme.breakpoints.up("sm")]: {
              marginRight: theme.spacing(5)
            }
          },
          ["&:not(.".concat(tabClasses.selected, ")")]: {
            color: theme.palette.text.secondary
          }
        }
      }
    }
  };
}
function list(theme) {
  return {
    MuiListItemIcon: {
      styleOverrides: {
        root: {
          color: "inherit",
          minWidth: "auto",
          marginRight: theme.spacing(2)
        }
      }
    },
    MuiListItemAvatar: {
      styleOverrides: {
        root: {
          minWidth: "auto",
          marginRight: theme.spacing(2)
        }
      }
    },
    MuiListItemText: {
      styleOverrides: {
        root: {
          margin: 0
        },
        multiline: {
          margin: 0
        }
      }
    }
  };
}
function radio(theme) {
  return {
    // CHECKBOX, RADIO, SWITCH
    MuiFormControlLabel: {
      styleOverrides: {
        label: {
          ...theme.typography.body2
        }
      }
    },
    MuiRadio: {
      styleOverrides: {
        root: ({ ownerState }) => {
          const { color } = ownerState;
          return {
            padding: theme.spacing(1),
            ...color === "default" && {
              ["&.".concat(radioClasses.checked)]: {
                color: theme.palette.text.primary
              }
            },
            ["&.".concat(radioClasses.disabled)]: {
              color: theme.palette.action.disabled
            }
          };
        }
      }
    }
  };
}
function badge(theme) {
  return {
    MuiBadge: {
      styleOverrides: {
        dot: {
          borderRadius: "50%"
        },
        root: ({ ownerState }) => {
          const alway = ownerState.variant === "alway";
          const online = ownerState.variant === "online";
          const busy = ownerState.variant === "busy";
          const offline = ownerState.variant === "offline";
          const invisible = ownerState.variant === "invisible";
          const baseStyles = {
            ["&.".concat(badgeClasses.invisible)]: {
              transform: "unset"
            },
            width: 10,
            zIndex: 9,
            padding: 0,
            height: 10,
            minWidth: "auto",
            "&:before, &:after": {
              content: "''",
              borderRadius: 1,
              backgroundColor: theme.palette.common.white
            }
          };
          return {
            ...online && {
              ["& .".concat(badgeClasses.badge)]: {
                ...baseStyles,
                backgroundColor: theme.palette.success.main
              }
            },
            ...busy && {
              ["& .".concat(badgeClasses.badge)]: {
                ...baseStyles,
                backgroundColor: theme.palette.error.main,
                "&:before": { width: 6, height: 2 }
              }
            },
            ...offline && {
              ["& .".concat(badgeClasses.badge)]: {
                ...baseStyles,
                backgroundColor: theme.palette.text.disabled,
                "&:before": {
                  width: 6,
                  height: 6,
                  borderRadius: "50%"
                }
              }
            },
            ...alway && {
              ["& .".concat(badgeClasses.badge)]: {
                ...baseStyles,
                backgroundColor: theme.palette.warning.main,
                "&:before": {
                  width: 2,
                  height: 4,
                  transform: "translateX(1px) translateY(-1px)"
                },
                "&:after": {
                  width: 2,
                  height: 4,
                  transform: "translateY(1px) rotate(125deg)"
                }
              }
            },
            ...invisible && {
              ["& .".concat(badgeClasses.badge)]: {
                display: "none"
              }
            }
          };
        }
      }
    }
  };
}
function table(theme) {
  return {
    MuiTableContainer: {
      styleOverrides: {
        root: {
          position: "relative"
        }
      }
    },
    MuiTableRow: {
      styleOverrides: {
        root: {
          ["&.".concat(tableRowClasses.selected)]: {
            backgroundColor: alpha(theme.palette.primary.dark, 0.04),
            "&:hover": {
              backgroundColor: alpha(theme.palette.primary.dark, 0.08)
            }
          },
          "&:last-of-type": {
            ["& .".concat(tableCellClasses.root)]: {
              borderColor: "transparent"
            }
          }
        }
      }
    },
    MuiTableCell: {
      styleOverrides: {
        root: {
          borderBottomStyle: "dashed"
        },
        head: {
          fontSize: 14,
          color: theme.palette.text.secondary,
          fontWeight: theme.typography.fontWeightSemiBold,
          backgroundColor: theme.palette.background.neutral
        },
        stickyHeader: {
          backgroundColor: theme.palette.background.paper,
          backgroundImage: "linear-gradient(to bottom, ".concat(theme.palette.background.neutral, " 0%, ").concat(theme.palette.background.neutral, " 100%)")
        },
        paddingCheckbox: {
          paddingLeft: theme.spacing(1)
        }
      }
    },
    MuiTablePagination: {
      styleOverrides: {
        root: {
          width: "100%"
        },
        toolbar: {
          height: 64
        },
        actions: {
          marginRight: 8
        },
        select: {
          paddingLeft: 8,
          "&:focus": {
            borderRadius: theme.shape.borderRadius
          }
        },
        selectIcon: {
          right: 4,
          width: 16,
          height: 16,
          top: "calc(50% - 8px)"
        }
      }
    }
  };
}
const COLORS$6 = ["info", "success", "warning", "error"];
function alert(theme) {
  const lightMode = theme.palette.mode === "light";
  const rootStyles = (ownerState) => {
    const standardVariant = ownerState.variant === "standard";
    const filledVariant = ownerState.variant === "filled";
    const outlinedVariant = ownerState.variant === "outlined";
    const colorStyle = COLORS$6.map((color) => ({
      ...ownerState.severity === color && {
        // STANDARD
        ...standardVariant && {
          color: theme.palette[color][lightMode ? "darker" : "lighter"],
          backgroundColor: theme.palette[color][lightMode ? "lighter" : "darker"],
          ["& .".concat(alertClasses.icon)]: {
            color: theme.palette[color][lightMode ? "main" : "light"]
          }
        },
        // FILLED
        ...filledVariant && {
          color: theme.palette[color].contrastText,
          backgroundColor: theme.palette[color].main
        },
        // OUTLINED
        ...outlinedVariant && {
          backgroundColor: alpha(theme.palette[color].main, 0.08),
          color: theme.palette[color][lightMode ? "dark" : "light"],
          border: "solid 1px ".concat(alpha(theme.palette[color].main, 0.16)),
          ["& .".concat(alertClasses.icon)]: {
            color: theme.palette[color].main
          }
        }
      }
    }));
    return [...colorStyle];
  };
  return {
    MuiAlert: {
      styleOverrides: {
        root: ({ ownerState }) => rootStyles(ownerState),
        icon: {
          opacity: 1
        }
      }
    },
    MuiAlertTitle: {
      styleOverrides: {
        root: {
          marginBottom: theme.spacing(0.5),
          fontWeight: theme.typography.fontWeightSemiBold
        }
      }
    }
  };
}
function paper(theme) {
  return {
    MuiPaper: {
      styleOverrides: {
        root: {
          backgroundImage: "none"
        },
        outlined: {
          borderColor: alpha(theme.palette.grey[500], 0.16)
        }
      }
    }
  };
}
function select(theme) {
  return {
    MuiSelect: {
      styleOverrides: {
        icon: {
          right: 10,
          width: 18,
          height: 18,
          top: "calc(50% - 9px)"
        }
      }
    },
    MuiNativeSelect: {
      styleOverrides: {
        icon: {
          right: 10,
          width: 18,
          height: 18,
          top: "calc(50% - 9px)"
        }
      }
    }
  };
}
function slider(theme) {
  const lightMode = theme.palette.mode === "light";
  return {
    MuiSlider: {
      styleOverrides: {
        root: {
          ["&.".concat(sliderClasses.disabled)]: {
            color: theme.palette.action.disabled
          }
        },
        rail: {
          opacity: 0.32
        },
        markLabel: {
          fontSize: 13,
          color: theme.palette.text.disabled
        },
        valueLabel: {
          borderRadius: 8,
          backgroundColor: theme.palette.grey[lightMode ? 800 : 700]
        }
      }
    }
  };
}
const COLORS$5 = ["default", "primary", "secondary", "info", "success", "warning", "error"];
const colorByName = (name2) => {
  const charAt = name2.charAt(0).toLowerCase();
  if (["a", "c", "f"].includes(charAt)) return "primary";
  if (["e", "d", "h"].includes(charAt)) return "secondary";
  if (["i", "k", "l"].includes(charAt)) return "info";
  if (["m", "n", "p"].includes(charAt)) return "success";
  if (["q", "s", "t"].includes(charAt)) return "warning";
  if (["v", "x", "y"].includes(charAt)) return "error";
  return "default";
};
function avatar(theme) {
  return {
    MuiAvatar: {
      variants: COLORS$5.map(
        (color) => color === "default" ? {
          props: { color: "default" },
          style: {
            color: theme.palette.text.secondary,
            backgroundColor: alpha(theme.palette.grey[500], 0.24)
          }
        } : {
          props: { color },
          style: {
            color: theme.palette[color].contrastText,
            backgroundColor: theme.palette[color].main
          }
        }
      ),
      styleOverrides: {
        rounded: {
          borderRadius: theme.shape.borderRadius * 1.5
        },
        colorDefault: ({ ownerState }) => {
          const color = colorByName("".concat(ownerState.alt));
          return {
            ...!!ownerState.alt && {
              ...color !== "default" ? {
                color: theme.palette[color].contrastText,
                backgroundColor: theme.palette[color].main
              } : {
                color: theme.palette.text.secondary,
                backgroundColor: alpha(theme.palette.grey[500], 0.24)
              }
            }
          };
        }
      }
    },
    MuiAvatarGroup: {
      styleOverrides: {
        root: ({ ownerState }) => ({
          justifyContent: "flex-end",
          ...ownerState.variant === "compact" && {
            width: 40,
            height: 40,
            position: "relative",
            ["& .".concat(avatarGroupClasses.avatar)]: {
              margin: 0,
              width: 28,
              height: 28,
              position: "absolute",
              "&:first-of-type": {
                left: 0,
                bottom: 0,
                zIndex: 9
              },
              "&:last-of-type": {
                top: 0,
                right: 0
              }
            }
          }
        }),
        avatar: {
          fontSize: 16,
          fontWeight: theme.typography.fontWeightSemiBold,
          "&:first-of-type": {
            fontSize: 12,
            color: theme.palette.primary.dark,
            backgroundColor: theme.palette.primary.lighter
          }
        }
      }
    }
  };
}
function drawer(theme) {
  const lightMode = theme.palette.mode === "light";
  return {
    MuiDrawer: {
      styleOverrides: {
        root: ({ ownerState }) => ({
          ...ownerState.variant === "temporary" && {
            ["& .".concat(drawerClasses.paper)]: {
              ...paper$1({ theme }),
              ...ownerState.anchor === "left" && {
                boxShadow: "40px 40px 80px -8px ".concat(alpha(
                  lightMode ? theme.palette.grey[500] : theme.palette.common.black,
                  0.24
                ))
              },
              ...ownerState.anchor === "right" && {
                boxShadow: "-40px 40px 80px -8px ".concat(alpha(
                  lightMode ? theme.palette.grey[500] : theme.palette.common.black,
                  0.24
                ))
              }
            }
          }
        })
      }
    }
  };
}
function appBar(theme) {
  return {
    MuiAppBar: {
      styleOverrides: {
        root: {
          boxShadow: "none"
        }
      }
    }
  };
}
function dialog(theme) {
  return {
    MuiDialog: {
      styleOverrides: {
        paper: ({ ownerState }) => ({
          boxShadow: theme.customShadows.dialog,
          borderRadius: theme.shape.borderRadius * 2,
          ...!ownerState.fullScreen && {
            margin: theme.spacing(2)
          }
        }),
        paperFullScreen: {
          borderRadius: 0
        }
      }
    },
    MuiDialogTitle: {
      styleOverrides: {
        root: {
          padding: theme.spacing(3)
        }
      }
    },
    MuiDialogContent: {
      styleOverrides: {
        root: {
          padding: theme.spacing(0, 3)
        },
        dividers: {
          borderTop: 0,
          borderBottomStyle: "dashed",
          paddingBottom: theme.spacing(3)
        }
      }
    },
    MuiDialogActions: {
      styleOverrides: {
        root: {
          padding: theme.spacing(3),
          "& > :not(:first-of-type)": {
            marginLeft: theme.spacing(1.5)
          }
        }
      }
    }
  };
}
function rating(theme) {
  return {
    MuiRating: {
      styleOverrides: {
        root: {
          ["&.".concat(ratingClasses.disabled)]: {
            opacity: 0.48
          }
        },
        iconEmpty: {
          color: alpha(theme.palette.grey[500], 0.48)
        },
        sizeSmall: {
          ["& .".concat(svgIconClasses.root)]: {
            width: 20,
            height: 20
          }
        },
        sizeMedium: {
          ["& .".concat(svgIconClasses.root)]: {
            width: 24,
            height: 24
          }
        },
        sizeLarge: {
          ["& .".concat(svgIconClasses.root)]: {
            width: 28,
            height: 28
          }
        }
      }
    }
  };
}
const COLORS$4 = ["primary", "secondary", "info", "success", "warning", "error"];
function button(theme) {
  const lightMode = theme.palette.mode === "light";
  const rootStyles = (ownerState) => {
    const inheritColor = ownerState.color === "inherit";
    const containedVariant = ownerState.variant === "contained";
    const outlinedVariant = ownerState.variant === "outlined";
    const textVariant = ownerState.variant === "text";
    const softVariant = ownerState.variant === "soft";
    const smallSize = ownerState.size === "small";
    const mediumSize = ownerState.size === "medium";
    const largeSize = ownerState.size === "large";
    const defaultStyle = {
      ...inheritColor && {
        // CONTAINED
        ...containedVariant && {
          color: lightMode ? theme.palette.common.white : theme.palette.grey[800],
          backgroundColor: lightMode ? theme.palette.grey[800] : theme.palette.common.white,
          "&:hover": {
            backgroundColor: lightMode ? theme.palette.grey[700] : theme.palette.grey[400]
          }
        },
        // OUTLINED
        ...outlinedVariant && {
          borderColor: alpha(theme.palette.grey[500], 0.32),
          "&:hover": {
            backgroundColor: theme.palette.action.hover
          }
        },
        // TEXT
        ...textVariant && {
          "&:hover": {
            backgroundColor: theme.palette.action.hover
          }
        },
        // SOFT
        ...softVariant && {
          color: theme.palette.text.primary,
          backgroundColor: alpha(theme.palette.grey[500], 0.08),
          "&:hover": {
            backgroundColor: alpha(theme.palette.grey[500], 0.24)
          }
        }
      },
      ...outlinedVariant && {
        "&:hover": {
          borderColor: "currentColor",
          boxShadow: "0 0 0 0.5px currentColor"
        }
      }
    };
    const colorStyle = COLORS$4.map((color) => ({
      ...ownerState.color === color && {
        // CONTAINED
        ...containedVariant && {
          "&:hover": {
            boxShadow: theme.customShadows[color]
          }
        },
        // SOFT
        ...softVariant && {
          color: theme.palette[color][lightMode ? "dark" : "light"],
          backgroundColor: alpha(theme.palette[color].main, 0.16),
          "&:hover": {
            backgroundColor: alpha(theme.palette[color].main, 0.32)
          }
        }
      }
    }));
    const disabledState = {
      ["&.".concat(buttonClasses.disabled)]: {
        // SOFT
        ...softVariant && {
          backgroundColor: theme.palette.action.disabledBackground
        }
      }
    };
    const size = {
      ...smallSize && {
        height: 30,
        fontSize: 13,
        paddingLeft: 8,
        paddingRight: 8,
        ...textVariant && {
          paddingLeft: 4,
          paddingRight: 4
        }
      },
      ...mediumSize && {
        paddingLeft: 12,
        paddingRight: 12,
        ...textVariant && {
          paddingLeft: 8,
          paddingRight: 8
        }
      },
      ...largeSize && {
        height: 48,
        fontSize: 15,
        paddingLeft: 16,
        paddingRight: 16,
        ...textVariant && {
          paddingLeft: 10,
          paddingRight: 10
        }
      }
    };
    return [defaultStyle, ...colorStyle, disabledState, size];
  };
  return {
    MuiButton: {
      styleOverrides: {
        root: ({ ownerState }) => rootStyles(ownerState)
      }
    }
  };
}
function popover(theme) {
  return {
    MuiPopover: {
      styleOverrides: {
        paper: {
          ...paper$1({ theme, dropdown: true }),
          ["& .".concat(listClasses.root)]: {
            paddingTop: 0,
            paddingBottom: 0
          }
        }
      }
    }
  };
}
function switches(theme) {
  const lightMode = theme.palette.mode === "light";
  const rootStyles = (ownerState) => {
    const { color } = ownerState;
    return {
      width: 58,
      height: 38,
      padding: "9px 13px 9px 12px",
      ["& .".concat(switchClasses.thumb)]: {
        width: 14,
        height: 14,
        boxShadow: "none",
        color: theme.palette.common.white
      },
      ["& .".concat(switchClasses.track)]: {
        opacity: 1,
        borderRadius: 14,
        backgroundColor: alpha(theme.palette.grey[500], 0.48)
      },
      ["& .".concat(switchClasses.switchBase)]: {
        left: 3,
        padding: 12,
        ["&.".concat(switchClasses.checked)]: {
          transform: "translateX(13px)",
          ["& .".concat(switchClasses.thumb)]: {
            ...color === "default" && !lightMode && {
              color: theme.palette.grey[800]
            }
          },
          ["&+.".concat(switchClasses.track)]: {
            opacity: 1,
            ...color === "default" && {
              backgroundColor: theme.palette.text.primary
            }
          }
        },
        ["&.".concat(switchClasses.disabled)]: {
          ["& .".concat(switchClasses.thumb)]: {
            opacity: lightMode ? 1 : 0.48
          },
          ["&+.".concat(switchClasses.track)]: {
            opacity: 0.48
          }
        }
      },
      // Small
      ["&.".concat(switchClasses.sizeSmall)]: {
        padding: "4px 8px 4px 7px",
        width: 40,
        height: 24,
        ["& .".concat(switchClasses.thumb)]: {
          width: 10,
          height: 10
        },
        ["& .".concat(switchClasses.switchBase)]: {
          padding: 7,
          ["&.".concat(switchClasses.checked)]: {
            transform: "translateX(9px)"
          }
        }
      }
    };
  };
  return {
    MuiSwitch: {
      styleOverrides: {
        root: ({ ownerState }) => rootStyles(ownerState)
      }
    }
  };
}
const matchIconName = /^[a-z0-9]+(-[a-z0-9]+)*$/;
const stringToIcon = (value2, validate, allowSimpleName, provider = "") => {
  const colonSeparated = value2.split(":");
  if (value2.slice(0, 1) === "@") {
    if (colonSeparated.length < 2 || colonSeparated.length > 3) {
      return null;
    }
    provider = colonSeparated.shift().slice(1);
  }
  if (colonSeparated.length > 3 || !colonSeparated.length) {
    return null;
  }
  if (colonSeparated.length > 1) {
    const name22 = colonSeparated.pop();
    const prefix = colonSeparated.pop();
    const result = {
      // Allow provider without '@': "provider:prefix:name"
      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,
      prefix,
      name: name22
    };
    return validate && !validateIconName(result) ? null : result;
  }
  const name2 = colonSeparated[0];
  const dashSeparated = name2.split("-");
  if (dashSeparated.length > 1) {
    const result = {
      provider,
      prefix: dashSeparated.shift(),
      name: dashSeparated.join("-")
    };
    return validate && !validateIconName(result) ? null : result;
  }
  if (allowSimpleName && provider === "") {
    const result = {
      provider,
      prefix: "",
      name: name2
    };
    return validate && !validateIconName(result, allowSimpleName) ? null : result;
  }
  return null;
};
const validateIconName = (icon2, allowSimpleName) => {
  if (!icon2) {
    return false;
  }
  return !!((icon2.provider === "" || icon2.provider.match(matchIconName)) && (allowSimpleName && icon2.prefix === "" || icon2.prefix.match(matchIconName)) && icon2.name.match(matchIconName));
};
const defaultIconDimensions = Object.freeze(
  {
    left: 0,
    top: 0,
    width: 16,
    height: 16
  }
);
const defaultIconTransformations = Object.freeze({
  rotate: 0,
  vFlip: false,
  hFlip: false
});
const defaultIconProps = Object.freeze({
  ...defaultIconDimensions,
  ...defaultIconTransformations
});
const defaultExtendedIconProps = Object.freeze({
  ...defaultIconProps,
  body: "",
  hidden: false
});
function mergeIconTransformations(obj1, obj2) {
  const result = {};
  if (!obj1.hFlip !== !obj2.hFlip) {
    result.hFlip = true;
  }
  if (!obj1.vFlip !== !obj2.vFlip) {
    result.vFlip = true;
  }
  const rotate = ((obj1.rotate || 0) + (obj2.rotate || 0)) % 4;
  if (rotate) {
    result.rotate = rotate;
  }
  return result;
}
function mergeIconData(parent2, child) {
  const result = mergeIconTransformations(parent2, child);
  for (const key2 in defaultExtendedIconProps) {
    if (key2 in defaultIconTransformations) {
      if (key2 in parent2 && !(key2 in result)) {
        result[key2] = defaultIconTransformations[key2];
      }
    } else if (key2 in child) {
      result[key2] = child[key2];
    } else if (key2 in parent2) {
      result[key2] = parent2[key2];
    }
  }
  return result;
}
function getIconsTree(data2, names) {
  const icons = data2.icons;
  const aliases = data2.aliases || /* @__PURE__ */ Object.create(null);
  const resolved = /* @__PURE__ */ Object.create(null);
  function resolve(name2) {
    if (icons[name2]) {
      return resolved[name2] = [];
    }
    if (!(name2 in resolved)) {
      resolved[name2] = null;
      const parent2 = aliases[name2] && aliases[name2].parent;
      const value2 = parent2 && resolve(parent2);
      if (value2) {
        resolved[name2] = [parent2].concat(value2);
      }
    }
    return resolved[name2];
  }
  Object.keys(icons).concat(Object.keys(aliases)).forEach(resolve);
  return resolved;
}
function internalGetIconData(data2, name2, tree) {
  const icons = data2.icons;
  const aliases = data2.aliases || /* @__PURE__ */ Object.create(null);
  let currentProps = {};
  function parse(name22) {
    currentProps = mergeIconData(
      icons[name22] || aliases[name22],
      currentProps
    );
  }
  parse(name2);
  tree.forEach(parse);
  return mergeIconData(data2, currentProps);
}
function parseIconSet(data2, callback) {
  const names = [];
  if (typeof data2 !== "object" || typeof data2.icons !== "object") {
    return names;
  }
  if (data2.not_found instanceof Array) {
    data2.not_found.forEach((name2) => {
      callback(name2, null);
      names.push(name2);
    });
  }
  const tree = getIconsTree(data2);
  for (const name2 in tree) {
    const item = tree[name2];
    if (item) {
      callback(name2, internalGetIconData(data2, name2, item));
      names.push(name2);
    }
  }
  return names;
}
const optionalPropertyDefaults = {
  provider: "",
  aliases: {},
  not_found: {},
  ...defaultIconDimensions
};
function checkOptionalProps(item, defaults) {
  for (const prop in defaults) {
    if (prop in item && typeof item[prop] !== typeof defaults[prop]) {
      return false;
    }
  }
  return true;
}
function quicklyValidateIconSet(obj) {
  if (typeof obj !== "object" || obj === null) {
    return null;
  }
  const data2 = obj;
  if (typeof data2.prefix !== "string" || !obj.icons || typeof obj.icons !== "object") {
    return null;
  }
  if (!checkOptionalProps(obj, optionalPropertyDefaults)) {
    return null;
  }
  const icons = data2.icons;
  for (const name2 in icons) {
    const icon2 = icons[name2];
    if (!name2.match(matchIconName) || typeof icon2.body !== "string" || !checkOptionalProps(
      icon2,
      defaultExtendedIconProps
    )) {
      return null;
    }
  }
  const aliases = data2.aliases || /* @__PURE__ */ Object.create(null);
  for (const name2 in aliases) {
    const icon2 = aliases[name2];
    const parent2 = icon2.parent;
    if (!name2.match(matchIconName) || typeof parent2 !== "string" || !icons[parent2] && !aliases[parent2] || !checkOptionalProps(
      icon2,
      defaultExtendedIconProps
    )) {
      return null;
    }
  }
  return data2;
}
const dataStorage = /* @__PURE__ */ Object.create(null);
function newStorage(provider, prefix) {
  return {
    provider,
    prefix,
    icons: /* @__PURE__ */ Object.create(null),
    missing: /* @__PURE__ */ new Set()
  };
}
function getStorage(provider, prefix) {
  const providerStorage = dataStorage[provider] || (dataStorage[provider] = /* @__PURE__ */ Object.create(null));
  return providerStorage[prefix] || (providerStorage[prefix] = newStorage(provider, prefix));
}
function addIconSet(storage2, data2) {
  if (!quicklyValidateIconSet(data2)) {
    return [];
  }
  return parseIconSet(data2, (name2, icon2) => {
    if (icon2) {
      storage2.icons[name2] = icon2;
    } else {
      storage2.missing.add(name2);
    }
  });
}
function addIconToStorage(storage2, name2, icon2) {
  try {
    if (typeof icon2.body === "string") {
      storage2.icons[name2] = { ...icon2 };
      return true;
    }
  } catch (err) {
  }
  return false;
}
let simpleNames = false;
function allowSimpleNames(allow) {
  if (typeof allow === "boolean") {
    simpleNames = allow;
  }
  return simpleNames;
}
function getIconData(name2) {
  const icon2 = typeof name2 === "string" ? stringToIcon(name2, true, simpleNames) : name2;
  if (icon2) {
    const storage2 = getStorage(icon2.provider, icon2.prefix);
    const iconName = icon2.name;
    return storage2.icons[iconName] || (storage2.missing.has(iconName) ? null : void 0);
  }
}
function addIcon(name2, data2) {
  const icon2 = stringToIcon(name2, true, simpleNames);
  if (!icon2) {
    return false;
  }
  const storage2 = getStorage(icon2.provider, icon2.prefix);
  return addIconToStorage(storage2, icon2.name, data2);
}
function addCollection(data2, provider) {
  if (typeof data2 !== "object") {
    return false;
  }
  if (typeof provider !== "string") {
    provider = data2.provider || "";
  }
  if (simpleNames && !provider && !data2.prefix) {
    let added = false;
    if (quicklyValidateIconSet(data2)) {
      data2.prefix = "";
      parseIconSet(data2, (name2, icon2) => {
        if (icon2 && addIcon(name2, icon2)) {
          added = true;
        }
      });
    }
    return added;
  }
  const prefix = data2.prefix;
  if (!validateIconName({
    provider,
    prefix,
    name: "a"
  })) {
    return false;
  }
  const storage2 = getStorage(provider, prefix);
  return !!addIconSet(storage2, data2);
}
const defaultIconSizeCustomisations = Object.freeze({
  width: null,
  height: null
});
const defaultIconCustomisations = Object.freeze({
  // Dimensions
  ...defaultIconSizeCustomisations,
  // Transformations
  ...defaultIconTransformations
});
const unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;
const unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function calculateSize(size, ratio, precision) {
  if (ratio === 1) {
    return size;
  }
  precision = precision || 100;
  if (typeof size === "number") {
    return Math.ceil(size * ratio * precision) / precision;
  }
  if (typeof size !== "string") {
    return size;
  }
  const oldParts = size.split(unitsSplit);
  if (oldParts === null || !oldParts.length) {
    return size;
  }
  const newParts = [];
  let code = oldParts.shift();
  let isNumber = unitsTest.test(code);
  while (true) {
    if (isNumber) {
      const num = parseFloat(code);
      if (isNaN(num)) {
        newParts.push(code);
      } else {
        newParts.push(Math.ceil(num * ratio * precision) / precision);
      }
    } else {
      newParts.push(code);
    }
    code = oldParts.shift();
    if (code === void 0) {
      return newParts.join("");
    }
    isNumber = !isNumber;
  }
}
const isUnsetKeyword = (value2) => value2 === "unset" || value2 === "undefined" || value2 === "none";
function iconToSVG(icon2, customisations) {
  const fullIcon = {
    ...defaultIconProps,
    ...icon2
  };
  const fullCustomisations = {
    ...defaultIconCustomisations,
    ...customisations
  };
  const box = {
    left: fullIcon.left,
    top: fullIcon.top,
    width: fullIcon.width,
    height: fullIcon.height
  };
  let body2 = fullIcon.body;
  [fullIcon, fullCustomisations].forEach((props) => {
    const transformations = [];
    const hFlip = props.hFlip;
    const vFlip = props.vFlip;
    let rotation2 = props.rotate;
    if (hFlip) {
      if (vFlip) {
        rotation2 += 2;
      } else {
        transformations.push(
          "translate(" + (box.width + box.left).toString() + " " + (0 - box.top).toString() + ")"
        );
        transformations.push("scale(-1 1)");
        box.top = box.left = 0;
      }
    } else if (vFlip) {
      transformations.push(
        "translate(" + (0 - box.left).toString() + " " + (box.height + box.top).toString() + ")"
      );
      transformations.push("scale(1 -1)");
      box.top = box.left = 0;
    }
    let tempValue;
    if (rotation2 < 0) {
      rotation2 -= Math.floor(rotation2 / 4) * 4;
    }
    rotation2 = rotation2 % 4;
    switch (rotation2) {
      case 1:
        tempValue = box.height / 2 + box.top;
        transformations.unshift(
          "rotate(90 " + tempValue.toString() + " " + tempValue.toString() + ")"
        );
        break;
      case 2:
        transformations.unshift(
          "rotate(180 " + (box.width / 2 + box.left).toString() + " " + (box.height / 2 + box.top).toString() + ")"
        );
        break;
      case 3:
        tempValue = box.width / 2 + box.left;
        transformations.unshift(
          "rotate(-90 " + tempValue.toString() + " " + tempValue.toString() + ")"
        );
        break;
    }
    if (rotation2 % 2 === 1) {
      if (box.left !== box.top) {
        tempValue = box.left;
        box.left = box.top;
        box.top = tempValue;
      }
      if (box.width !== box.height) {
        tempValue = box.width;
        box.width = box.height;
        box.height = tempValue;
      }
    }
    if (transformations.length) {
      body2 = '<g transform="' + transformations.join(" ") + '">' + body2 + "</g>";
    }
  });
  const customisationsWidth = fullCustomisations.width;
  const customisationsHeight = fullCustomisations.height;
  const boxWidth = box.width;
  const boxHeight = box.height;
  let width2;
  let height2;
  if (customisationsWidth === null) {
    height2 = customisationsHeight === null ? "1em" : customisationsHeight === "auto" ? boxHeight : customisationsHeight;
    width2 = calculateSize(height2, boxWidth / boxHeight);
  } else {
    width2 = customisationsWidth === "auto" ? boxWidth : customisationsWidth;
    height2 = customisationsHeight === null ? calculateSize(width2, boxHeight / boxWidth) : customisationsHeight === "auto" ? boxHeight : customisationsHeight;
  }
  const attributes = {};
  const setAttr = (prop, value2) => {
    if (!isUnsetKeyword(value2)) {
      attributes[prop] = value2.toString();
    }
  };
  setAttr("width", width2);
  setAttr("height", height2);
  attributes.viewBox = box.left.toString() + " " + box.top.toString() + " " + boxWidth.toString() + " " + boxHeight.toString();
  return {
    attributes,
    body: body2
  };
}
const regex = /\sid="(\S+)"/g;
const randomPrefix = "IconifyId" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);
let counter = 0;
function replaceIDs(body2, prefix = randomPrefix) {
  const ids = [];
  let match;
  while (match = regex.exec(body2)) {
    ids.push(match[1]);
  }
  if (!ids.length) {
    return body2;
  }
  const suffix = "suffix" + (Math.random() * 16777216 | Date.now()).toString(16);
  ids.forEach((id2) => {
    const newID = typeof prefix === "function" ? prefix(id2) : prefix + (counter++).toString();
    const escapedID = id2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    body2 = body2.replace(
      // Allowed characters before id: [#;"]
      // Allowed characters after id: [)"], .[a-z]
      new RegExp('([#;"])(' + escapedID + ')([")]|\\.[a-z])', "g"),
      "$1" + newID + suffix + "$3"
    );
  });
  body2 = body2.replace(new RegExp(suffix, "g"), "");
  return body2;
}
const storage = /* @__PURE__ */ Object.create(null);
function setAPIModule(provider, item) {
  storage[provider] = item;
}
function getAPIModule(provider) {
  return storage[provider] || storage[""];
}
function createAPIConfig(source) {
  let resources;
  if (typeof source.resources === "string") {
    resources = [source.resources];
  } else {
    resources = source.resources;
    if (!(resources instanceof Array) || !resources.length) {
      return null;
    }
  }
  const result = {
    // API hosts
    resources,
    // Root path
    path: source.path || "/",
    // URL length limit
    maxURL: source.maxURL || 500,
    // Timeout before next host is used.
    rotate: source.rotate || 750,
    // Timeout before failing query.
    timeout: source.timeout || 5e3,
    // Randomise default API end point.
    random: source.random === true,
    // Start index
    index: source.index || 0,
    // Receive data after time out (used if time out kicks in first, then API module sends data anyway).
    dataAfterTimeout: source.dataAfterTimeout !== false
  };
  return result;
}
const configStorage = /* @__PURE__ */ Object.create(null);
const fallBackAPISources = [
  "https://api.simplesvg.com",
  "https://api.unisvg.com"
];
const fallBackAPI = [];
while (fallBackAPISources.length > 0) {
  if (fallBackAPISources.length === 1) {
    fallBackAPI.push(fallBackAPISources.shift());
  } else {
    if (Math.random() > 0.5) {
      fallBackAPI.push(fallBackAPISources.shift());
    } else {
      fallBackAPI.push(fallBackAPISources.pop());
    }
  }
}
configStorage[""] = createAPIConfig({
  resources: ["https://api.iconify.design"].concat(fallBackAPI)
});
function addAPIProvider(provider, customConfig) {
  const config = createAPIConfig(customConfig);
  if (config === null) {
    return false;
  }
  configStorage[provider] = config;
  return true;
}
function getAPIConfig(provider) {
  return configStorage[provider];
}
const detectFetch = () => {
  let callback;
  try {
    callback = fetch;
    if (typeof callback === "function") {
      return callback;
    }
  } catch (err) {
  }
};
let fetchModule = detectFetch();
function calculateMaxLength(provider, prefix) {
  const config = getAPIConfig(provider);
  if (!config) {
    return 0;
  }
  let result;
  if (!config.maxURL) {
    result = 0;
  } else {
    let maxHostLength = 0;
    config.resources.forEach((item) => {
      const host = item;
      maxHostLength = Math.max(maxHostLength, host.length);
    });
    const url = prefix + ".json?icons=";
    result = config.maxURL - maxHostLength - config.path.length - url.length;
  }
  return result;
}
function shouldAbort(status) {
  return status === 404;
}
const prepare = (provider, prefix, icons) => {
  const results = [];
  const maxLength = calculateMaxLength(provider, prefix);
  const type = "icons";
  let item = {
    type,
    provider,
    prefix,
    icons: []
  };
  let length2 = 0;
  icons.forEach((name2, index2) => {
    length2 += name2.length + 1;
    if (length2 >= maxLength && index2 > 0) {
      results.push(item);
      item = {
        type,
        provider,
        prefix,
        icons: []
      };
      length2 = name2.length;
    }
    item.icons.push(name2);
  });
  results.push(item);
  return results;
};
function getPath(provider) {
  if (typeof provider === "string") {
    const config = getAPIConfig(provider);
    if (config) {
      return config.path;
    }
  }
  return "/";
}
const send = (host, params, callback) => {
  if (!fetchModule) {
    callback("abort", 424);
    return;
  }
  let path = getPath(params.provider);
  switch (params.type) {
    case "icons": {
      const prefix = params.prefix;
      const icons = params.icons;
      const iconsList = icons.join(",");
      const urlParams = new URLSearchParams({
        icons: iconsList
      });
      path += prefix + ".json?" + urlParams.toString();
      break;
    }
    case "custom": {
      const uri = params.uri;
      path += uri.slice(0, 1) === "/" ? uri.slice(1) : uri;
      break;
    }
    default:
      callback("abort", 400);
      return;
  }
  let defaultError = 503;
  fetchModule(host + path).then((response) => {
    const status = response.status;
    if (status !== 200) {
      setTimeout(() => {
        callback(shouldAbort(status) ? "abort" : "next", status);
      });
      return;
    }
    defaultError = 501;
    return response.json();
  }).then((data2) => {
    if (typeof data2 !== "object" || data2 === null) {
      setTimeout(() => {
        if (data2 === 404) {
          callback("abort", data2);
        } else {
          callback("next", defaultError);
        }
      });
      return;
    }
    setTimeout(() => {
      callback("success", data2);
    });
  }).catch(() => {
    callback("next", defaultError);
  });
};
const fetchAPIModule = {
  prepare,
  send
};
function sortIcons(icons) {
  const result = {
    loaded: [],
    missing: [],
    pending: []
  };
  const storage2 = /* @__PURE__ */ Object.create(null);
  icons.sort((a, b) => {
    if (a.provider !== b.provider) {
      return a.provider.localeCompare(b.provider);
    }
    if (a.prefix !== b.prefix) {
      return a.prefix.localeCompare(b.prefix);
    }
    return a.name.localeCompare(b.name);
  });
  let lastIcon = {
    provider: "",
    prefix: "",
    name: ""
  };
  icons.forEach((icon2) => {
    if (lastIcon.name === icon2.name && lastIcon.prefix === icon2.prefix && lastIcon.provider === icon2.provider) {
      return;
    }
    lastIcon = icon2;
    const provider = icon2.provider;
    const prefix = icon2.prefix;
    const name2 = icon2.name;
    const providerStorage = storage2[provider] || (storage2[provider] = /* @__PURE__ */ Object.create(null));
    const localStorage2 = providerStorage[prefix] || (providerStorage[prefix] = getStorage(provider, prefix));
    let list2;
    if (name2 in localStorage2.icons) {
      list2 = result.loaded;
    } else if (prefix === "" || localStorage2.missing.has(name2)) {
      list2 = result.missing;
    } else {
      list2 = result.pending;
    }
    const item = {
      provider,
      prefix,
      name: name2
    };
    list2.push(item);
  });
  return result;
}
function removeCallback(storages, id2) {
  storages.forEach((storage2) => {
    const items = storage2.loaderCallbacks;
    if (items) {
      storage2.loaderCallbacks = items.filter((row) => row.id !== id2);
    }
  });
}
function updateCallbacks(storage2) {
  if (!storage2.pendingCallbacksFlag) {
    storage2.pendingCallbacksFlag = true;
    setTimeout(() => {
      storage2.pendingCallbacksFlag = false;
      const items = storage2.loaderCallbacks ? storage2.loaderCallbacks.slice(0) : [];
      if (!items.length) {
        return;
      }
      let hasPending = false;
      const provider = storage2.provider;
      const prefix = storage2.prefix;
      items.forEach((item) => {
        const icons = item.icons;
        const oldLength = icons.pending.length;
        icons.pending = icons.pending.filter((icon2) => {
          if (icon2.prefix !== prefix) {
            return true;
          }
          const name2 = icon2.name;
          if (storage2.icons[name2]) {
            icons.loaded.push({
              provider,
              prefix,
              name: name2
            });
          } else if (storage2.missing.has(name2)) {
            icons.missing.push({
              provider,
              prefix,
              name: name2
            });
          } else {
            hasPending = true;
            return true;
          }
          return false;
        });
        if (icons.pending.length !== oldLength) {
          if (!hasPending) {
            removeCallback([storage2], item.id);
          }
          item.callback(
            icons.loaded.slice(0),
            icons.missing.slice(0),
            icons.pending.slice(0),
            item.abort
          );
        }
      });
    });
  }
}
let idCounter = 0;
function storeCallback(callback, icons, pendingSources) {
  const id2 = idCounter++;
  const abort = removeCallback.bind(null, pendingSources, id2);
  if (!icons.pending.length) {
    return abort;
  }
  const item = {
    id: id2,
    icons,
    callback,
    abort
  };
  pendingSources.forEach((storage2) => {
    (storage2.loaderCallbacks || (storage2.loaderCallbacks = [])).push(item);
  });
  return abort;
}
function listToIcons(list2, validate = true, simpleNames2 = false) {
  const result = [];
  list2.forEach((item) => {
    const icon2 = typeof item === "string" ? stringToIcon(item, validate, simpleNames2) : item;
    if (icon2) {
      result.push(icon2);
    }
  });
  return result;
}
var defaultConfig = {
  resources: [],
  index: 0,
  timeout: 2e3,
  rotate: 750,
  random: false,
  dataAfterTimeout: false
};
function sendQuery(config, payload, query, done) {
  const resourcesCount = config.resources.length;
  const startIndex = config.random ? Math.floor(Math.random() * resourcesCount) : config.index;
  let resources;
  if (config.random) {
    let list2 = config.resources.slice(0);
    resources = [];
    while (list2.length > 1) {
      const nextIndex = Math.floor(Math.random() * list2.length);
      resources.push(list2[nextIndex]);
      list2 = list2.slice(0, nextIndex).concat(list2.slice(nextIndex + 1));
    }
    resources = resources.concat(list2);
  } else {
    resources = config.resources.slice(startIndex).concat(config.resources.slice(0, startIndex));
  }
  const startTime = Date.now();
  let status = "pending";
  let queriesSent = 0;
  let lastError;
  let timer = null;
  let queue = [];
  let doneCallbacks = [];
  if (typeof done === "function") {
    doneCallbacks.push(done);
  }
  function resetTimer() {
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
  }
  function abort() {
    if (status === "pending") {
      status = "aborted";
    }
    resetTimer();
    queue.forEach((item) => {
      if (item.status === "pending") {
        item.status = "aborted";
      }
    });
    queue = [];
  }
  function subscribe(callback, overwrite) {
    if (overwrite) {
      doneCallbacks = [];
    }
    if (typeof callback === "function") {
      doneCallbacks.push(callback);
    }
  }
  function getQueryStatus() {
    return {
      startTime,
      payload,
      status,
      queriesSent,
      queriesPending: queue.length,
      subscribe,
      abort
    };
  }
  function failQuery() {
    status = "failed";
    doneCallbacks.forEach((callback) => {
      callback(void 0, lastError);
    });
  }
  function clearQueue() {
    queue.forEach((item) => {
      if (item.status === "pending") {
        item.status = "aborted";
      }
    });
    queue = [];
  }
  function moduleResponse(item, response, data2) {
    const isError = response !== "success";
    queue = queue.filter((queued) => queued !== item);
    switch (status) {
      case "pending":
        break;
      case "failed":
        if (isError || !config.dataAfterTimeout) {
          return;
        }
        break;
      default:
        return;
    }
    if (response === "abort") {
      lastError = data2;
      failQuery();
      return;
    }
    if (isError) {
      lastError = data2;
      if (!queue.length) {
        if (!resources.length) {
          failQuery();
        } else {
          execNext();
        }
      }
      return;
    }
    resetTimer();
    clearQueue();
    if (!config.random) {
      const index2 = config.resources.indexOf(item.resource);
      if (index2 !== -1 && index2 !== config.index) {
        config.index = index2;
      }
    }
    status = "completed";
    doneCallbacks.forEach((callback) => {
      callback(data2);
    });
  }
  function execNext() {
    if (status !== "pending") {
      return;
    }
    resetTimer();
    const resource = resources.shift();
    if (resource === void 0) {
      if (queue.length) {
        timer = setTimeout(() => {
          resetTimer();
          if (status === "pending") {
            clearQueue();
            failQuery();
          }
        }, config.timeout);
        return;
      }
      failQuery();
      return;
    }
    const item = {
      status: "pending",
      resource,
      callback: (status2, data2) => {
        moduleResponse(item, status2, data2);
      }
    };
    queue.push(item);
    queriesSent++;
    timer = setTimeout(execNext, config.rotate);
    query(resource, payload, item.callback);
  }
  setTimeout(execNext);
  return getQueryStatus;
}
function initRedundancy(cfg) {
  const config = {
    ...defaultConfig,
    ...cfg
  };
  let queries = [];
  function cleanup() {
    queries = queries.filter((item) => item().status === "pending");
  }
  function query(payload, queryCallback, doneCallback) {
    const query2 = sendQuery(
      config,
      payload,
      queryCallback,
      (data2, error2) => {
        cleanup();
        if (doneCallback) {
          doneCallback(data2, error2);
        }
      }
    );
    queries.push(query2);
    return query2;
  }
  function find(callback) {
    return queries.find((value2) => {
      return callback(value2);
    }) || null;
  }
  const instance = {
    query,
    find,
    setIndex: (index2) => {
      config.index = index2;
    },
    getIndex: () => config.index,
    cleanup
  };
  return instance;
}
function emptyCallback$1() {
}
const redundancyCache = /* @__PURE__ */ Object.create(null);
function getRedundancyCache(provider) {
  if (!redundancyCache[provider]) {
    const config = getAPIConfig(provider);
    if (!config) {
      return;
    }
    const redundancy = initRedundancy(config);
    const cachedReundancy = {
      config,
      redundancy
    };
    redundancyCache[provider] = cachedReundancy;
  }
  return redundancyCache[provider];
}
function sendAPIQuery(target, query, callback) {
  let redundancy;
  let send2;
  if (typeof target === "string") {
    const api = getAPIModule(target);
    if (!api) {
      callback(void 0, 424);
      return emptyCallback$1;
    }
    send2 = api.send;
    const cached = getRedundancyCache(target);
    if (cached) {
      redundancy = cached.redundancy;
    }
  } else {
    const config = createAPIConfig(target);
    if (config) {
      redundancy = initRedundancy(config);
      const moduleKey = target.resources ? target.resources[0] : "";
      const api = getAPIModule(moduleKey);
      if (api) {
        send2 = api.send;
      }
    }
  }
  if (!redundancy || !send2) {
    callback(void 0, 424);
    return emptyCallback$1;
  }
  return redundancy.query(query, send2, callback)().abort;
}
const browserCacheVersion = "iconify2";
const browserCachePrefix = "iconify";
const browserCacheCountKey = browserCachePrefix + "-count";
const browserCacheVersionKey = browserCachePrefix + "-version";
const browserStorageHour = 36e5;
const browserStorageCacheExpiration = 168;
function getStoredItem(func, key2) {
  try {
    return func.getItem(key2);
  } catch (err) {
  }
}
function setStoredItem(func, key2, value2) {
  try {
    func.setItem(key2, value2);
    return true;
  } catch (err) {
  }
}
function removeStoredItem(func, key2) {
  try {
    func.removeItem(key2);
  } catch (err) {
  }
}
function setBrowserStorageItemsCount(storage2, value2) {
  return setStoredItem(storage2, browserCacheCountKey, value2.toString());
}
function getBrowserStorageItemsCount(storage2) {
  return parseInt(getStoredItem(storage2, browserCacheCountKey)) || 0;
}
const browserStorageConfig = {
  local: true,
  session: true
};
const browserStorageEmptyItems = {
  local: /* @__PURE__ */ new Set(),
  session: /* @__PURE__ */ new Set()
};
let browserStorageStatus = false;
function setBrowserStorageStatus(status) {
  browserStorageStatus = status;
}
let _window = typeof window === "undefined" ? {} : window;
function getBrowserStorage(key2) {
  const attr = key2 + "Storage";
  try {
    if (_window && _window[attr] && typeof _window[attr].length === "number") {
      return _window[attr];
    }
  } catch (err) {
  }
  browserStorageConfig[key2] = false;
}
function iterateBrowserStorage(key2, callback) {
  const func = getBrowserStorage(key2);
  if (!func) {
    return;
  }
  const version = getStoredItem(func, browserCacheVersionKey);
  if (version !== browserCacheVersion) {
    if (version) {
      const total2 = getBrowserStorageItemsCount(func);
      for (let i2 = 0; i2 < total2; i2++) {
        removeStoredItem(func, browserCachePrefix + i2.toString());
      }
    }
    setStoredItem(func, browserCacheVersionKey, browserCacheVersion);
    setBrowserStorageItemsCount(func, 0);
    return;
  }
  const minTime = Math.floor(Date.now() / browserStorageHour) - browserStorageCacheExpiration;
  const parseItem = (index2) => {
    const name2 = browserCachePrefix + index2.toString();
    const item = getStoredItem(func, name2);
    if (typeof item !== "string") {
      return;
    }
    try {
      const data2 = JSON.parse(item);
      if (typeof data2 === "object" && typeof data2.cached === "number" && data2.cached > minTime && typeof data2.provider === "string" && typeof data2.data === "object" && typeof data2.data.prefix === "string" && // Valid item: run callback
      callback(data2, index2)) {
        return true;
      }
    } catch (err) {
    }
    removeStoredItem(func, name2);
  };
  let total = getBrowserStorageItemsCount(func);
  for (let i2 = total - 1; i2 >= 0; i2--) {
    if (!parseItem(i2)) {
      if (i2 === total - 1) {
        total--;
        setBrowserStorageItemsCount(func, total);
      } else {
        browserStorageEmptyItems[key2].add(i2);
      }
    }
  }
}
function initBrowserStorage() {
  if (browserStorageStatus) {
    return;
  }
  setBrowserStorageStatus(true);
  for (const key2 in browserStorageConfig) {
    iterateBrowserStorage(key2, (item) => {
      const iconSet = item.data;
      const provider = item.provider;
      const prefix = iconSet.prefix;
      const storage2 = getStorage(
        provider,
        prefix
      );
      if (!addIconSet(storage2, iconSet).length) {
        return false;
      }
      const lastModified = iconSet.lastModified || -1;
      storage2.lastModifiedCached = storage2.lastModifiedCached ? Math.min(storage2.lastModifiedCached, lastModified) : lastModified;
      return true;
    });
  }
}
function updateLastModified(storage2, lastModified) {
  const lastValue = storage2.lastModifiedCached;
  if (
    // Matches or newer
    lastValue && lastValue >= lastModified
  ) {
    return lastValue === lastModified;
  }
  storage2.lastModifiedCached = lastModified;
  if (lastValue) {
    for (const key2 in browserStorageConfig) {
      iterateBrowserStorage(key2, (item) => {
        const iconSet = item.data;
        return item.provider !== storage2.provider || iconSet.prefix !== storage2.prefix || iconSet.lastModified === lastModified;
      });
    }
  }
  return true;
}
function storeInBrowserStorage(storage2, data2) {
  if (!browserStorageStatus) {
    initBrowserStorage();
  }
  function store2(key2) {
    let func;
    if (!browserStorageConfig[key2] || !(func = getBrowserStorage(key2))) {
      return;
    }
    const set2 = browserStorageEmptyItems[key2];
    let index2;
    if (set2.size) {
      set2.delete(index2 = Array.from(set2).shift());
    } else {
      index2 = getBrowserStorageItemsCount(func);
      if (!setBrowserStorageItemsCount(func, index2 + 1)) {
        return;
      }
    }
    const item = {
      cached: Math.floor(Date.now() / browserStorageHour),
      provider: storage2.provider,
      data: data2
    };
    return setStoredItem(
      func,
      browserCachePrefix + index2.toString(),
      JSON.stringify(item)
    );
  }
  if (data2.lastModified && !updateLastModified(storage2, data2.lastModified)) {
    return;
  }
  if (!Object.keys(data2.icons).length) {
    return;
  }
  if (data2.not_found) {
    data2 = Object.assign({}, data2);
    delete data2.not_found;
  }
  if (!store2("local")) {
    store2("session");
  }
}
function emptyCallback() {
}
function loadedNewIcons(storage2) {
  if (!storage2.iconsLoaderFlag) {
    storage2.iconsLoaderFlag = true;
    setTimeout(() => {
      storage2.iconsLoaderFlag = false;
      updateCallbacks(storage2);
    });
  }
}
function loadNewIcons(storage2, icons) {
  if (!storage2.iconsToLoad) {
    storage2.iconsToLoad = icons;
  } else {
    storage2.iconsToLoad = storage2.iconsToLoad.concat(icons).sort();
  }
  if (!storage2.iconsQueueFlag) {
    storage2.iconsQueueFlag = true;
    setTimeout(() => {
      storage2.iconsQueueFlag = false;
      const { provider, prefix } = storage2;
      const icons2 = storage2.iconsToLoad;
      delete storage2.iconsToLoad;
      let api;
      if (!icons2 || !(api = getAPIModule(provider))) {
        return;
      }
      const params = api.prepare(provider, prefix, icons2);
      params.forEach((item) => {
        sendAPIQuery(provider, item, (data2) => {
          if (typeof data2 !== "object") {
            item.icons.forEach((name2) => {
              storage2.missing.add(name2);
            });
          } else {
            try {
              const parsed = addIconSet(
                storage2,
                data2
              );
              if (!parsed.length) {
                return;
              }
              const pending = storage2.pendingIcons;
              if (pending) {
                parsed.forEach((name2) => {
                  pending.delete(name2);
                });
              }
              storeInBrowserStorage(storage2, data2);
            } catch (err) {
              console.error(err);
            }
          }
          loadedNewIcons(storage2);
        });
      });
    });
  }
}
const loadIcons = (icons, callback) => {
  const cleanedIcons = listToIcons(icons, true, allowSimpleNames());
  const sortedIcons = sortIcons(cleanedIcons);
  if (!sortedIcons.pending.length) {
    let callCallback = true;
    if (callback) {
      setTimeout(() => {
        if (callCallback) {
          callback(
            sortedIcons.loaded,
            sortedIcons.missing,
            sortedIcons.pending,
            emptyCallback
          );
        }
      });
    }
    return () => {
      callCallback = false;
    };
  }
  const newIcons = /* @__PURE__ */ Object.create(null);
  const sources = [];
  let lastProvider, lastPrefix;
  sortedIcons.pending.forEach((icon2) => {
    const { provider, prefix } = icon2;
    if (prefix === lastPrefix && provider === lastProvider) {
      return;
    }
    lastProvider = provider;
    lastPrefix = prefix;
    sources.push(getStorage(provider, prefix));
    const providerNewIcons = newIcons[provider] || (newIcons[provider] = /* @__PURE__ */ Object.create(null));
    if (!providerNewIcons[prefix]) {
      providerNewIcons[prefix] = [];
    }
  });
  sortedIcons.pending.forEach((icon2) => {
    const { provider, prefix, name: name2 } = icon2;
    const storage2 = getStorage(provider, prefix);
    const pendingQueue = storage2.pendingIcons || (storage2.pendingIcons = /* @__PURE__ */ new Set());
    if (!pendingQueue.has(name2)) {
      pendingQueue.add(name2);
      newIcons[provider][prefix].push(name2);
    }
  });
  sources.forEach((storage2) => {
    const { provider, prefix } = storage2;
    if (newIcons[provider][prefix].length) {
      loadNewIcons(storage2, newIcons[provider][prefix]);
    }
  });
  return callback ? storeCallback(callback, sortedIcons, sources) : emptyCallback;
};
function mergeCustomisations(defaults, item) {
  const result = {
    ...defaults
  };
  for (const key2 in item) {
    const value2 = item[key2];
    const valueType = typeof value2;
    if (key2 in defaultIconSizeCustomisations) {
      if (value2 === null || value2 && (valueType === "string" || valueType === "number")) {
        result[key2] = value2;
      }
    } else if (valueType === typeof result[key2]) {
      result[key2] = key2 === "rotate" ? value2 % 4 : value2;
    }
  }
  return result;
}
const separator = /[\s,]+/;
function flipFromString(custom, flip) {
  flip.split(separator).forEach((str) => {
    const value2 = str.trim();
    switch (value2) {
      case "horizontal":
        custom.hFlip = true;
        break;
      case "vertical":
        custom.vFlip = true;
        break;
    }
  });
}
function rotateFromString(value2, defaultValue = 0) {
  const units = value2.replace(/^-?[0-9.]*/, "");
  function cleanup(value22) {
    while (value22 < 0) {
      value22 += 4;
    }
    return value22 % 4;
  }
  if (units === "") {
    const num = parseInt(value2);
    return isNaN(num) ? 0 : cleanup(num);
  } else if (units !== value2) {
    let split = 0;
    switch (units) {
      case "%":
        split = 25;
        break;
      case "deg":
        split = 90;
    }
    if (split) {
      let num = parseFloat(value2.slice(0, value2.length - units.length));
      if (isNaN(num)) {
        return 0;
      }
      num = num / split;
      return num % 1 === 0 ? cleanup(num) : 0;
    }
  }
  return defaultValue;
}
function iconToHTML(body2, attributes) {
  let renderAttribsHTML = body2.indexOf("xlink:") === -1 ? "" : ' xmlns:xlink="http://www.w3.org/1999/xlink"';
  for (const attr in attributes) {
    renderAttribsHTML += " " + attr + '="' + attributes[attr] + '"';
  }
  return '<svg xmlns="http://www.w3.org/2000/svg"' + renderAttribsHTML + ">" + body2 + "</svg>";
}
function encodeSVGforURL(svg) {
  return svg.replace(/"/g, "'").replace(/%/g, "%25").replace(/#/g, "%23").replace(/</g, "%3C").replace(/>/g, "%3E").replace(/\s+/g, " ");
}
function svgToData(svg) {
  return "data:image/svg+xml," + encodeSVGforURL(svg);
}
function svgToURL(svg) {
  return 'url("' + svgToData(svg) + '")';
}
let policy;
function createPolicy() {
  try {
    policy = window.trustedTypes.createPolicy("iconify", {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      createHTML: (s) => s
    });
  } catch (err) {
    policy = null;
  }
}
function cleanUpInnerHTML(html2) {
  if (policy === void 0) {
    createPolicy();
  }
  return policy ? policy.createHTML(html2) : html2;
}
const defaultExtendedIconCustomisations = {
  ...defaultIconCustomisations,
  inline: false
};
const svgDefaults = {
  "xmlns": "http://www.w3.org/2000/svg",
  "xmlnsXlink": "http://www.w3.org/1999/xlink",
  "aria-hidden": true,
  "role": "img"
};
const commonProps = {
  display: "inline-block"
};
const monotoneProps = {
  backgroundColor: "currentColor"
};
const coloredProps = {
  backgroundColor: "transparent"
};
const propsToAdd = {
  Image: "var(--svg)",
  Repeat: "no-repeat",
  Size: "100% 100%"
};
const propsToAddTo = {
  WebkitMask: monotoneProps,
  mask: monotoneProps,
  background: coloredProps
};
for (const prefix in propsToAddTo) {
  const list2 = propsToAddTo[prefix];
  for (const prop in propsToAdd) {
    list2[prefix + prop] = propsToAdd[prop];
  }
}
const inlineDefaults = {
  ...defaultExtendedIconCustomisations,
  inline: true
};
function fixSize(value2) {
  return value2 + (value2.match(/^[-0-9.]+$/) ? "px" : "");
}
const render = (icon2, props, inline, ref) => {
  const defaultProps2 = inline ? inlineDefaults : defaultExtendedIconCustomisations;
  const customisations = mergeCustomisations(defaultProps2, props);
  const mode = props.mode || "svg";
  const style = {};
  const customStyle = props.style || {};
  const componentProps = {
    ...mode === "svg" ? svgDefaults : {},
    ref
  };
  for (let key2 in props) {
    const value2 = props[key2];
    if (value2 === void 0) {
      continue;
    }
    switch (key2) {
      case "icon":
      case "style":
      case "children":
      case "onLoad":
      case "mode":
      case "_ref":
      case "_inline":
        break;
      case "inline":
      case "hFlip":
      case "vFlip":
        customisations[key2] = value2 === true || value2 === "true" || value2 === 1;
        break;
      case "flip":
        if (typeof value2 === "string") {
          flipFromString(customisations, value2);
        }
        break;
      case "color":
        style.color = value2;
        break;
      case "rotate":
        if (typeof value2 === "string") {
          customisations[key2] = rotateFromString(value2);
        } else if (typeof value2 === "number") {
          customisations[key2] = value2;
        }
        break;
      case "ariaHidden":
      case "aria-hidden":
        if (value2 !== true && value2 !== "true") {
          delete componentProps["aria-hidden"];
        }
        break;
      default:
        if (defaultProps2[key2] === void 0) {
          componentProps[key2] = value2;
        }
    }
  }
  const item = iconToSVG(icon2, customisations);
  const renderAttribs = item.attributes;
  if (customisations.inline) {
    style.verticalAlign = "-0.125em";
  }
  if (mode === "svg") {
    componentProps.style = {
      ...style,
      ...customStyle
    };
    Object.assign(componentProps, renderAttribs);
    let localCounter = 0;
    let id2 = props.id;
    if (typeof id2 === "string") {
      id2 = id2.replace(/-/g, "_");
    }
    componentProps.dangerouslySetInnerHTML = {
      __html: cleanUpInnerHTML(replaceIDs(item.body, id2 ? () => id2 + "ID" + localCounter++ : "iconifyReact"))
    };
    return React.createElement("svg", componentProps);
  }
  const { body: body2, width: width2, height: height2 } = icon2;
  const useMask = mode === "mask" || (mode === "bg" ? false : body2.indexOf("currentColor") !== -1);
  const html2 = iconToHTML(body2, {
    ...renderAttribs,
    width: width2 + "",
    height: height2 + ""
  });
  componentProps.style = {
    ...style,
    "--svg": svgToURL(html2),
    "width": fixSize(renderAttribs.width),
    "height": fixSize(renderAttribs.height),
    ...commonProps,
    ...useMask ? monotoneProps : coloredProps,
    ...customStyle
  };
  return React.createElement("span", componentProps);
};
allowSimpleNames(true);
setAPIModule("", fetchAPIModule);
if (typeof document !== "undefined" && typeof window !== "undefined") {
  initBrowserStorage();
  const _window2 = window;
  if (_window2.IconifyPreload !== void 0) {
    const preload = _window2.IconifyPreload;
    const err = "Invalid IconifyPreload syntax.";
    if (typeof preload === "object" && preload !== null) {
      (preload instanceof Array ? preload : [preload]).forEach((item) => {
        try {
          if (
            // Check if item is an object and not null/array
            typeof item !== "object" || item === null || item instanceof Array || // Check for 'icons' and 'prefix'
            typeof item.icons !== "object" || typeof item.prefix !== "string" || // Add icon set
            !addCollection(item)
          ) {
            console.error(err);
          }
        } catch (e) {
          console.error(err);
        }
      });
    }
  }
  if (_window2.IconifyProviders !== void 0) {
    const providers = _window2.IconifyProviders;
    if (typeof providers === "object" && providers !== null) {
      for (let key2 in providers) {
        const err = "IconifyProviders[" + key2 + "] is invalid.";
        try {
          const value2 = providers[key2];
          if (typeof value2 !== "object" || !value2 || value2.resources === void 0) {
            continue;
          }
          if (!addAPIProvider(key2, value2)) {
            console.error(err);
          }
        } catch (e) {
          console.error(err);
        }
      }
    }
  }
}
class IconComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      // Render placeholder before component is mounted
      icon: null
    };
  }
  /**
   * Abort loading icon
   */
  _abortLoading() {
    if (this._loading) {
      this._loading.abort();
      this._loading = null;
    }
  }
  /**
   * Update state
   */
  _setData(icon2) {
    if (this.state.icon !== icon2) {
      this.setState({
        icon: icon2
      });
    }
  }
  /**
   * Check if icon should be loaded
   */
  _checkIcon(changed) {
    const state = this.state;
    const icon2 = this.props.icon;
    if (typeof icon2 === "object" && icon2 !== null && typeof icon2.body === "string") {
      this._icon = "";
      this._abortLoading();
      if (changed || state.icon === null) {
        this._setData({
          data: icon2
        });
      }
      return;
    }
    let iconName;
    if (typeof icon2 !== "string" || (iconName = stringToIcon(icon2, false, true)) === null) {
      this._abortLoading();
      this._setData(null);
      return;
    }
    const data2 = getIconData(iconName);
    if (!data2) {
      if (!this._loading || this._loading.name !== icon2) {
        this._abortLoading();
        this._icon = "";
        this._setData(null);
        if (data2 !== null) {
          this._loading = {
            name: icon2,
            abort: loadIcons([iconName], this._checkIcon.bind(this, false))
          };
        }
      }
      return;
    }
    if (this._icon !== icon2 || state.icon === null) {
      this._abortLoading();
      this._icon = icon2;
      const classes = ["iconify"];
      if (iconName.prefix !== "") {
        classes.push("iconify--" + iconName.prefix);
      }
      if (iconName.provider !== "") {
        classes.push("iconify--" + iconName.provider);
      }
      this._setData({
        data: data2,
        classes
      });
      if (this.props.onLoad) {
        this.props.onLoad(icon2);
      }
    }
  }
  /**
   * Component mounted
   */
  componentDidMount() {
    this._checkIcon(false);
  }
  /**
   * Component updated
   */
  componentDidUpdate(oldProps) {
    if (oldProps.icon !== this.props.icon) {
      this._checkIcon(true);
    }
  }
  /**
   * Abort loading
   */
  componentWillUnmount() {
    this._abortLoading();
  }
  /**
   * Render
   */
  render() {
    const props = this.props;
    const icon2 = this.state.icon;
    if (icon2 === null) {
      return props.children ? props.children : React.createElement("span", {});
    }
    let newProps = props;
    if (icon2.classes) {
      newProps = {
        ...props,
        className: (typeof props.className === "string" ? props.className + " " : "") + icon2.classes.join(" ")
      };
    }
    return render({
      ...defaultIconProps,
      ...icon2.data
    }, newProps, props._inline, props._ref);
  }
}
const Icon = React.forwardRef(function Icon2(props, ref) {
  const newProps = {
    ...props,
    _ref: ref,
    _inline: false
  };
  return React.createElement(IconComponent, newProps);
});
React.forwardRef(function InlineIcon(props, ref) {
  const newProps = {
    ...props,
    _ref: ref,
    _inline: true
  };
  return React.createElement(IconComponent, newProps);
});
const Iconify = reactExports.forwardRef(({ icon: icon2, width: width2 = 20, sx, ...other }, ref) => /* @__PURE__ */ jsxRuntimeExports.jsx(
  Box,
  {
    ref,
    component: Icon,
    className: "component-iconify",
    icon: icon2,
    sx: { width: width2, height: width2, ...sx },
    ...other
  }
));
Iconify.propTypes = {
  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  sx: PropTypes.object,
  width: PropTypes.number
};
const ArrowDownIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon, { ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12,16 C11.7663478,16.0004565 11.5399121,15.9190812 11.36,15.77 L5.36,10.77 C4.93474074,10.4165378 4.87653776,9.78525926 5.23,9.36 C5.58346224,8.93474074 6.21474074,8.87653776 6.64,9.23 L12,13.71 L17.36,9.39 C17.5665934,9.2222295 17.8315409,9.14373108 18.0961825,9.17188444 C18.3608241,9.2000378 18.6033268,9.33252029 18.77,9.54 C18.9551341,9.74785947 19.0452548,10.0234772 19.0186853,10.3005589 C18.9921158,10.5776405 18.8512608,10.8311099 18.63,11 L12.63,15.83 C12.444916,15.955516 12.2231011,16.0153708 12,16 Z" }) });
const CheckboxIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon, { ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M17.9 2.318A5 5 0 0 1 22.895 7.1l.005.217v10a5 5 0 0 1-4.783 4.995l-.217.005h-10a5 5 0 0 1-4.995-4.783l-.005-.217v-10a5 5 0 0 1 4.783-4.996l.217-.004h10Zm-.5 1.5h-9a4 4 0 0 0-4 4v9a4 4 0 0 0 4 4h9a4 4 0 0 0 4-4v-9a4 4 0 0 0-4-4Z" }) });
const CheckboxCheckedIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon, { ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M17 2a5 5 0 0 1 5 5v10a5 5 0 0 1-5 5H7a5 5 0 0 1-5-5V7a5 5 0 0 1 5-5Zm-1.625 7.255-4.13 4.13-1.75-1.75a.881.881 0 0 0-1.24 0c-.34.34-.34.89 0 1.24l2.38 2.37c.17.17.39.25.61.25.23 0 .45-.08.62-.25l4.75-4.75c.34-.34.34-.89 0-1.24a.881.881 0 0 0-1.24 0Z" }) });
const CheckboxIndeterminateIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon, { ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M17,2 C19.7614,2 22,4.23858 22,7 L22,7 L22,17 C22,19.7614 19.7614,22 17,22 L17,22 L7,22 C4.23858,22 2,19.7614 2,17 L2,17 L2,7 C2,4.23858 4.23858,2 7,2 L7,2 Z M15,11 L9,11 C8.44772,11 8,11.4477 8,12 C8,12.5523 8.44772,13 9,13 L15,13 C15.5523,13 16,12.5523 16,12 C16,11.4477 15.5523,11 15,11 Z" }) });
const RadioIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon, { ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 2A10 10 0 1 1 2 12C2 6.477 6.477 2 12 2Zm0 1.5a8.5 8.5 0 1 0 0 17 8.5 8.5 0 0 0 0-17Z" }) });
const RadioCheckedIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon, { ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 2A10 10 0 1 1 2 12C2 6.477 6.477 2 12 2Zm0 1.5a8.5 8.5 0 1 0 0 17 8.5 8.5 0 0 0 0-17ZM12 7a5 5 0 1 1 0 10 5 5 0 0 1 0-10Z" }) });
const RatingIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon, { ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M17.56,21 C17.4000767,21.0006435 17.2423316,20.9629218 17.1,20.89 L12,18.22 L6.9,20.89 C6.56213339,21.067663 6.15259539,21.0374771 5.8444287,20.8121966 C5.53626201,20.5869161 5.38323252,20.2058459 5.45,19.83 L6.45,14.2 L2.33,10.2 C2.06805623,9.93860108 1.9718844,9.55391377 2.08,9.2 C2.19824414,8.83742187 2.51242293,8.57366684 2.89,8.52 L8.59,7.69 L11.1,2.56 C11.2670864,2.21500967 11.6166774,1.99588989 12,1.99588989 C12.3833226,1.99588989 12.7329136,2.21500967 12.9,2.56 L15.44,7.68 L21.14,8.51 C21.5175771,8.56366684 21.8317559,8.82742187 21.95,9.19 C22.0581156,9.54391377 21.9619438,9.92860108 21.7,10.19 L17.58,14.19 L18.58,19.82 C18.652893,20.2027971 18.4967826,20.5930731 18.18,20.82 C17.9989179,20.9468967 17.7808835,21.010197 17.56,21 L17.56,21 Z" }) });
const TreeViewCollapseIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon, { ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M18,3 C19.6568542,3 21,4.34314575 21,6 L21,6 L21,18 C21,19.6568542 19.6568542,21 18,21 L18,21 L6,21 C4.34314575,21 3,19.6568542 3,18 L3,18 L3,6 C3,4.34314575 4.34314575,3 6,3 L6,3 Z M18,5 L6,5 C5.44771525,5 5,5.44771525 5,6 L5,6 L5,18 C5,18.5522847 5.44771525,19 6,19 L6,19 L18,19 C18.5522847,19 19,18.5522847 19,18 L19,18 L19,6 C19,5.44771525 18.5522847,5 18,5 L18,5 Z M12,8 C12.5522847,8 13,8.44771525 13,9 L13,9 L13,11 L15,11 C15.5522847,11 16,11.4477153 16,12 C16,12.5522847 15.5522847,13 15,13 L15,13 L13,13 L13,15 C13,15.5522847 12.5522847,16 12,16 C11.4477153,16 11,15.5522847 11,15 L11,15 L11,13 L9,13 C8.44771525,13 8,12.5522847 8,12 C8,11.4477153 8.44771525,11 9,11 L9,11 L11,11 L11,9 C11,8.44771525 11.4477153,8 12,8 Z" }) });
const TreeViewExpandIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon, { ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M18,3 C19.6568542,3 21,4.34314575 21,6 L21,6 L21,18 C21,19.6568542 19.6568542,21 18,21 L18,21 L6,21 C4.34314575,21 3,19.6568542 3,18 L3,18 L3,6 C3,4.34314575 4.34314575,3 6,3 L6,3 Z M18,5 L6,5 C5.44771525,5 5,5.44771525 5,6 L5,6 L5,18 C5,18.5522847 5.44771525,19 6,19 L6,19 L18,19 C18.5522847,19 19,18.5522847 19,18 L19,18 L19,6 C19,5.44771525 18.5522847,5 18,5 L18,5 Z M15,11 C15.5522847,11 16,11.4477153 16,12 C16,12.5522847 15.5522847,13 15,13 L15,13 L9,13 C8.44771525,13 8,12.5522847 8,12 C8,11.4477153 8.44771525,11 9,11 L9,11 Z" }) });
const TreeViewEndIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon, { ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M18,3 C19.6568542,3 21,4.34314575 21,6 L21,6 L21,18 C21,19.6568542 19.6568542,21 18,21 L18,21 L6,21 C4.34314575,21 3,19.6568542 3,18 L3,18 L3,6 C3,4.34314575 4.34314575,3 6,3 L6,3 Z M18,5 L6,5 C5.44771525,5 5,5.44771525 5,6 L5,6 L5,18 C5,18.5522847 5.44771525,19 6,19 L6,19 L18,19 C18.5522847,19 19,18.5522847 19,18 L19,18 L19,6 C19,5.44771525 18.5522847,5 18,5 L18,5 Z M14,8.99420168 C14.2666375,8.99420168 14.5222334,9.10068735 14.71,9.29 C14.8993127,9.4777666 15.0057983,9.73336246 15.0057983,10 C15.0057983,10.2666375 14.8993127,10.5222334 14.71,10.71 L14.71,10.71 L13.41,12 L14.71,13.29 C14.8993127,13.4777666 15.0057983,13.7333625 15.0057983,14 C15.0057983,14.2666375 14.8993127,14.5222334 14.71,14.71 C14.5222334,14.8993127 14.2666375,15.0057983 14,15.0057983 C13.7333625,15.0057983 13.4777666,14.8993127 13.29,14.71 L13.29,14.71 L12,13.41 L10.71,14.71 C10.5222334,14.8993127 10.2666375,15.0057983 10,15.0057983 C9.73336246,15.0057983 9.4777666,14.8993127 9.29,14.71 C9.10068735,14.5222334 8.99420168,14.2666375 8.99420168,14 C8.99420168,13.7333625 9.10068735,13.4777666 9.29,13.29 L9.29,13.29 L10.59,12 L9.29,10.71 C8.89787783,10.3178778 8.89787783,9.68212217 9.29,9.29 C9.68212217,8.89787783 10.3178778,8.89787783 10.71,9.29 L10.71,9.29 L12,10.59 L13.29,9.29 C13.4777666,9.10068735 13.7333625,8.99420168 14,8.99420168 Z" }) });
function defaultProps(theme) {
  return {
    MuiAlert: {
      defaultProps: {
        iconMapping: {
          error: /* @__PURE__ */ jsxRuntimeExports.jsx(Iconify, { icon: "solar:danger-linear", width: 24 }),
          info: /* @__PURE__ */ jsxRuntimeExports.jsx(Iconify, { icon: "carbon:information", width: 24 }),
          success: /* @__PURE__ */ jsxRuntimeExports.jsx(Iconify, { icon: "carbon:checkmark-outline", width: 24 }),
          warning: /* @__PURE__ */ jsxRuntimeExports.jsx(Iconify, { icon: "carbon:warning-alt", width: 24 })
        }
      }
    },
    MuiStack: {
      defaultProps: {
        useFlexGap: true
      }
    },
    MuiAppBar: {
      defaultProps: {
        color: "transparent"
      }
    },
    MuiAvatarGroup: {
      defaultProps: {
        max: 4
      }
    },
    MuiButtonGroup: {
      defaultProps: {
        disableElevation: true
      }
    },
    MuiButton: {
      defaultProps: {
        color: "inherit",
        disableElevation: true
      }
    },
    MuiCardHeader: {
      defaultProps: {
        titleTypographyProps: { variant: "h6" },
        subheaderTypographyProps: {
          variant: "body2",
          marginTop: theme.spacing(0.5)
        }
      }
    },
    MuiChip: {
      defaultProps: {
        deleteIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Iconify, { icon: "solar:close-circle-bold" })
      }
    },
    MuiDialogActions: {
      defaultProps: {
        disableSpacing: true
      }
    },
    MuiFab: {
      defaultProps: {
        color: "primary"
      }
    },
    MuiLink: {
      defaultProps: {
        underline: "hover"
      }
    },
    MuiListItemText: {
      defaultProps: {
        primaryTypographyProps: {
          typography: "subtitle2"
        },
        secondaryTypographyProps: {
          component: "span"
        }
      }
    },
    MuiPaper: {
      defaultProps: {
        elevation: 0
      }
    },
    MuiSkeleton: {
      defaultProps: {
        animation: "wave",
        variant: "rounded"
      }
    },
    MuiFilledInput: {
      defaultProps: {
        disableUnderline: true
      }
    },
    MuiFormHelperText: {
      defaultProps: {
        component: "div"
      }
    },
    MuiTab: {
      defaultProps: {
        disableRipple: true,
        iconPosition: "start"
      }
    },
    MuiTabs: {
      defaultProps: {
        textColor: "inherit",
        variant: "scrollable",
        allowScrollButtonsMobile: true
      }
    },
    MuiTablePagination: {
      defaultProps: {
        backIconButtonProps: {
          size: "small"
        },
        nextIconButtonProps: {
          size: "small"
        }
      }
    },
    MuiSlider: {
      defaultProps: {
        size: "small"
      }
    },
    MuiAutocomplete: {
      defaultProps: {
        popupIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowDownIcon, {})
      }
    },
    MuiSelect: {
      defaultProps: {
        IconComponent: ArrowDownIcon
      }
    },
    MuiNativeSelect: {
      defaultProps: {
        IconComponent: ArrowDownIcon
      }
    },
    MuiCheckbox: {
      defaultProps: {
        size: "small",
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(CheckboxIcon, {}),
        checkedIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(CheckboxCheckedIcon, {}),
        indeterminateIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(CheckboxIndeterminateIcon, {})
      }
    },
    MuiRadio: {
      defaultProps: {
        size: "small",
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(RadioIcon, {}),
        checkedIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(RadioCheckedIcon, {})
      }
    },
    MuiRating: {
      defaultProps: {
        emptyIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(RatingIcon, {}),
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(RatingIcon, {})
      }
    },
    MuiTreeView: {
      defaultProps: {
        defaultCollapseIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TreeViewCollapseIcon, {}),
        defaultExpandIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TreeViewExpandIcon, {}),
        defaultEndIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TreeViewEndIcon, {})
      }
    },
    // Zone
    MuiFormControl: {
      defaultProps: {
        variant: "filled"
      }
    },
    MuiTextField: {
      defaultProps: {
        variant: "filled"
      }
    }
  };
}
function tooltip(theme) {
  const lightMode = theme.palette.mode === "light";
  return {
    MuiTooltip: {
      styleOverrides: {
        tooltip: {
          backgroundColor: theme.palette.grey[lightMode ? 800 : 700]
        },
        arrow: {
          color: theme.palette.grey[lightMode ? 800 : 700]
        }
      }
    }
  };
}
function stepper(theme) {
  return {
    MuiStepConnector: {
      styleOverrides: {
        line: {
          borderColor: theme.palette.divider
        }
      }
    }
  };
}
function svgIcon(theme) {
  return {
    MuiSvgIcon: {
      styleOverrides: {
        fontSizeLarge: {
          width: 32,
          height: 32,
          fontSize: "inherit"
        }
      }
    }
  };
}
function timeline(theme) {
  return {
    MuiTimelineDot: {
      styleOverrides: {
        root: {
          boxShadow: "none"
        }
      }
    },
    MuiTimelineConnector: {
      styleOverrides: {
        root: {
          backgroundColor: theme.palette.divider
        }
      }
    }
  };
}
function backdrop(theme) {
  return {
    MuiBackdrop: {
      styleOverrides: {
        root: {
          backgroundColor: alpha(theme.palette.grey[900], 0.8)
        },
        invisible: {
          background: "transparent"
        }
      }
    }
  };
}
function skeleton(theme) {
  return {
    MuiSkeleton: {
      styleOverrides: {
        root: {
          backgroundColor: theme.palette.background.neutral
        },
        rounded: {
          borderRadius: theme.shape.borderRadius * 2
        }
      }
    }
  };
}
const COLORS$3 = ["primary", "secondary", "info", "success", "warning", "error"];
function progress(theme) {
  const rootStyles = (ownerState) => {
    const bufferVariant = ownerState.variant === "buffer";
    const defaultStyle = {
      borderRadius: 4,
      ["& .".concat(linearProgressClasses.bar)]: {
        borderRadius: 4
      },
      ...bufferVariant && {
        backgroundColor: "transparent"
      }
    };
    const colorStyle = COLORS$3.map((color) => ({
      ...ownerState.color === color && {
        backgroundColor: alpha(theme.palette[color].main, 0.24)
      }
    }));
    return [defaultStyle, ...colorStyle];
  };
  return {
    MuiLinearProgress: {
      styleOverrides: {
        root: ({ ownerState }) => rootStyles(ownerState)
      }
    }
  };
}
function checkbox(theme) {
  return {
    MuiCheckbox: {
      styleOverrides: {
        root: ({ ownerState }) => {
          const { color } = ownerState;
          return {
            padding: theme.spacing(1),
            ...color === "default" && {
              ["&.".concat(checkboxClasses.checked)]: {
                color: theme.palette.text.primary
              }
            },
            ["&.".concat(checkboxClasses.disabled)]: {
              color: theme.palette.action.disabled
            }
          };
        }
      }
    }
  };
}
function dataGrid(theme) {
  const paperStyles = paper$1({ theme, dropdown: true });
  return {
    MuiDataGrid: {
      styleOverrides: {
        root: {
          "--unstable_DataGrid-radius": 0,
          "--unstable_DataGrid-headWeight": theme.typography.fontWeightSemiBold,
          borderWidth: 0
        },
        withBorderColor: {
          borderColor: theme.palette.divider
        },
        // Column
        columnHeaders: {
          borderBottom: 0
        },
        columnHeader: {
          fontSize: 14,
          color: theme.palette.text.secondary,
          backgroundColor: theme.palette.background.neutral,
          "&--sorted": {
            color: theme.palette.text.primary
          }
        },
        columnSeparator: {
          color: theme.palette.divider
        },
        // Row, Cell
        cell: {
          borderBottom: "1px dashed",
          "&--editing": {
            boxShadow: "none !important",
            backgroundColor: "".concat(alpha(theme.palette.primary.main, 0.08), " !important")
          }
        },
        // Toolbar
        toolbarContainer: {
          gap: theme.spacing(2),
          padding: theme.spacing(2)
        },
        toolbarQuickFilter: {
          padding: 0,
          width: "100%",
          [theme.breakpoints.up("md")]: {
            width: "unset"
          }
        },
        // Paper
        paper: {
          ...paperStyles,
          padding: 0
        },
        menu: {
          ["& .".concat(paperClasses.root)]: {
            ...paperStyles,
            minWidth: 140
          },
          ["& .".concat(listClasses.root)]: {
            padding: 0,
            ["& .".concat(listItemIconClasses.root)]: {
              minWidth: 0,
              marginRight: theme.spacing(2)
            }
          }
        },
        // Icons
        menuIcon: {
          ["& .".concat(iconButtonClasses.root)]: {
            margin: theme.spacing(0, 1),
            padding: theme.spacing(0.25)
          }
        },
        iconButtonContainer: {
          ["& .".concat(iconButtonClasses.root)]: {
            padding: theme.spacing(0.25),
            marginLeft: theme.spacing(1)
          }
        },
        // Footer
        footerContainer: {
          minHeight: "auto",
          borderTop: "1px dashed"
        },
        selectedRowCount: {
          display: "none",
          whiteSpace: "nowrap"
        },
        overlay: {
          ["& .".concat(circularProgressClasses.root)]: {
            color: theme.palette.text.primary
          }
        },
        // Columns Panel
        panelHeader: {
          padding: theme.spacing(2, 2, 0, 2)
        },
        panelContent: {
          padding: theme.spacing(1)
        },
        columnsPanelRow: {
          margin: theme.spacing(0.5, 0)
        },
        panelFooter: {
          display: "none",
          gap: theme.spacing(1),
          padding: theme.spacing(2),
          justifyContent: "flex-end",
          borderTop: "dashed 1px ".concat(theme.palette.divider),
          ["& .".concat(buttonClasses.root)]: {
            padding: theme.spacing(0.5, 1.5),
            "&:first-of-type": {
              border: "solid 1px ".concat(alpha(theme.palette.grey[500], 0.24))
            },
            "&:last-of-type": {
              color: theme.palette.background.paper,
              backgroundColor: theme.palette.text.primary
            }
          }
        },
        filterForm: {
          alignItems: "center",
          gap: theme.spacing(1.5),
          padding: theme.spacing(1)
        },
        filterFormValueInput: {
          ["& .".concat(formControlClasses.root)]: {
            width: "100%"
          },
          ["& .".concat(inputLabelClasses.root)]: {
            transform: "translate(14px, -9px) scale(0.75)"
          }
        }
      }
    }
  };
}
function treeView(theme) {
  return {
    MuiTreeItem: {
      styleOverrides: {
        label: {
          ...theme.typography.body2
        },
        iconContainer: {
          width: "auto"
        }
      }
    }
  };
}
function textField(theme) {
  const color = {
    focused: theme.palette.text.primary,
    active: theme.palette.text.secondary,
    placeholder: theme.palette.text.disabled
  };
  const font = {
    label: theme.typography.body1,
    value: theme.typography.body2
  };
  return {
    // HELPER
    MuiFormHelperText: {
      styleOverrides: {
        root: {
          marginTop: theme.spacing(1)
        }
      }
    },
    // LABEL
    MuiFormLabel: {
      styleOverrides: {
        root: {
          ...font.value,
          color: color.placeholder,
          ["&.".concat(inputLabelClasses.shrink)]: {
            ...font.label,
            fontWeight: 600,
            color: color.active,
            ["&.".concat(inputLabelClasses.focused)]: {
              color: color.focused
            },
            ["&.".concat(inputLabelClasses.error)]: {
              color: theme.palette.error.main
            },
            ["&.".concat(inputLabelClasses.disabled)]: {
              color: theme.palette.text.disabled
            },
            ["&.".concat(inputLabelClasses.filled)]: {
              transform: "translate(12px, 6px) scale(0.75)"
            }
          }
        }
      }
    },
    // BASE
    MuiInputBase: {
      styleOverrides: {
        root: {
          ["&.".concat(inputBaseClasses.disabled)]: {
            "& svg": {
              color: theme.palette.text.disabled
            }
          }
        },
        input: {
          ...font.value,
          "&::placeholder": {
            opacity: 1,
            color: color.placeholder
          }
        }
      }
    },
    // STANDARD
    MuiInput: {
      styleOverrides: {
        underline: {
          "&:before": {
            borderBottomColor: alpha(theme.palette.grey[500], 0.32)
          },
          "&:after": {
            borderBottomColor: color.focused
          }
        }
      }
    },
    // OUTLINED
    MuiOutlinedInput: {
      styleOverrides: {
        root: {
          ["&.".concat(outlinedInputClasses.focused)]: {
            ["& .".concat(outlinedInputClasses.notchedOutline)]: {
              borderColor: color.focused
            }
          },
          ["&.".concat(outlinedInputClasses.error)]: {
            ["& .".concat(outlinedInputClasses.notchedOutline)]: {
              borderColor: theme.palette.error.main
            }
          },
          ["&.".concat(outlinedInputClasses.disabled)]: {
            ["& .".concat(outlinedInputClasses.notchedOutline)]: {
              borderColor: theme.palette.action.disabledBackground
            }
          }
        },
        notchedOutline: {
          borderColor: alpha(theme.palette.grey[500], 0.2),
          transition: theme.transitions.create(["border-color"], {
            duration: theme.transitions.duration.shortest
          })
        }
      }
    },
    // FILLED
    MuiFilledInput: {
      styleOverrides: {
        root: {
          borderRadius: theme.shape.borderRadius,
          backgroundColor: alpha(theme.palette.grey[500], 0.08),
          "&:hover": {
            backgroundColor: alpha(theme.palette.grey[500], 0.16)
          },
          ["&.".concat(filledInputClasses.focused)]: {
            backgroundColor: alpha(theme.palette.grey[500], 0.16)
          },
          ["&.".concat(filledInputClasses.error)]: {
            backgroundColor: alpha(theme.palette.error.main, 0.08),
            ["&.".concat(filledInputClasses.focused)]: {
              backgroundColor: alpha(theme.palette.error.main, 0.16)
            }
          },
          ["&.".concat(filledInputClasses.disabled)]: {
            backgroundColor: theme.palette.action.disabledBackground
          }
        }
      }
    }
  };
}
function accordion(theme) {
  return {
    MuiAccordion: {
      styleOverrides: {
        root: {
          backgroundColor: "transparent",
          ["&.".concat(accordionClasses.expanded)]: {
            boxShadow: theme.customShadows.z8,
            borderRadius: theme.shape.borderRadius,
            backgroundColor: theme.palette.background.paper
          },
          ["&.".concat(accordionClasses.disabled)]: {
            backgroundColor: "transparent"
          }
        }
      }
    },
    MuiAccordionSummary: {
      styleOverrides: {
        root: {
          paddingLeft: theme.spacing(2),
          paddingRight: theme.spacing(1),
          ["&.".concat(accordionSummaryClasses.disabled)]: {
            opacity: 1,
            color: theme.palette.action.disabled,
            ["& .".concat(typographyClasses.root)]: {
              color: "inherit"
            }
          }
        },
        expandIconWrapper: {
          color: "inherit"
        }
      }
    }
  };
}
function typography(theme) {
  return {
    MuiTypography: {
      styleOverrides: {
        paragraph: {
          marginBottom: theme.spacing(2)
        },
        gutterBottom: {
          marginBottom: theme.spacing(1)
        }
      }
    }
  };
}
const COLORS$2 = ["primary", "secondary", "info", "success", "warning", "error"];
function pagination(theme) {
  const lightMode = theme.palette.mode === "light";
  const rootStyles = (ownerState) => {
    const defaultColor = ownerState.color === "standard";
    const filledVariant = ownerState.variant === "text";
    const outlinedVariant = ownerState.variant === "outlined";
    const softVariant = ownerState.variant === "soft";
    const defaultStyle = {
      ["& .".concat(paginationItemClasses.root)]: {
        ...outlinedVariant && {
          borderColor: alpha(theme.palette.grey[500], 0.24)
        },
        ["&.".concat(paginationItemClasses.selected)]: {
          fontWeight: theme.typography.fontWeightSemiBold,
          ...outlinedVariant && {
            borderColor: "currentColor"
          },
          ...defaultColor && {
            backgroundColor: alpha(theme.palette.grey[500], 0.08),
            ...filledVariant && {
              color: lightMode ? theme.palette.common.white : theme.palette.grey[800],
              backgroundColor: theme.palette.text.primary,
              "&:hover": {
                backgroundColor: lightMode ? theme.palette.grey[700] : theme.palette.grey[100]
              }
            }
          }
        }
      }
    };
    const colorStyle = COLORS$2.map((color) => ({
      ...ownerState.color === color && {
        ["& .".concat(paginationItemClasses.root)]: {
          ["&.".concat(paginationItemClasses.selected)]: {
            ...ownerState.color === color && {
              // SOFT
              ...softVariant && {
                color: theme.palette[color][lightMode ? "dark" : "light"],
                backgroundColor: alpha(theme.palette[color].main, 0.08),
                "&:hover": {
                  backgroundColor: alpha(theme.palette[color].main, 0.16)
                }
              }
            }
          }
        }
      }
    }));
    return [defaultStyle, ...colorStyle];
  };
  return {
    MuiPagination: {
      styleOverrides: {
        root: ({ ownerState }) => rootStyles(ownerState)
      }
    }
  };
}
const dateList = [
  "DatePicker",
  "DateTimePicker",
  "StaticDatePicker",
  "DesktopDatePicker",
  "DesktopDateTimePicker",
  //
  "MobileDatePicker",
  "MobileDateTimePicker"
];
const timeList = [
  "TimePicker",
  "MobileTimePicker",
  "StaticTimePicker",
  "DesktopTimePicker"
];
const switchIcon = () => /* @__PURE__ */ jsxRuntimeExports.jsx(Iconify, { icon: "eva:chevron-down-fill", width: 24 });
const leftIcon = () => /* @__PURE__ */ jsxRuntimeExports.jsx(Iconify, { icon: "eva:arrow-ios-back-fill", width: 24 });
const rightIcon = () => /* @__PURE__ */ jsxRuntimeExports.jsx(Iconify, { icon: "eva:arrow-ios-forward-fill", width: 24 });
const calendarIcon = () => /* @__PURE__ */ jsxRuntimeExports.jsx(Iconify, { icon: "solar:calendar-minimalistic-linear", width: 24 });
const clockIcon = () => /* @__PURE__ */ jsxRuntimeExports.jsx(Iconify, { icon: "solar:clock-circle-outline", width: 24 });
const desktopTypes = dateList.reduce((result, currentValue) => {
  result["Mui".concat(currentValue)] = {
    defaultProps: {
      slots: {
        openPickerIcon: calendarIcon,
        leftArrowIcon: leftIcon,
        rightArrowIcon: rightIcon,
        switchViewIcon: switchIcon
      }
    }
  };
  return result;
}, {});
const timeTypes = timeList.reduce((result, currentValue) => {
  result["Mui".concat(currentValue)] = {
    defaultProps: {
      slots: {
        openPickerIcon: clockIcon,
        rightArrowIcon: rightIcon,
        switchViewIcon: switchIcon
      }
    }
  };
  return result;
}, {});
function datePicker(theme) {
  return {
    MuiPickersLayout: {
      styleOverrides: {
        root: {
          "& .MuiPickersLayout-actionBar": {
            ["& .".concat(buttonClasses.root, ":last-of-type")]: {
              backgroundColor: theme.palette.text.primary,
              color: theme.palette.mode === "light" ? theme.palette.common.white : theme.palette.grey[800]
            }
          }
        }
      }
    },
    // Date
    ...desktopTypes,
    // Time
    ...timeTypes
  };
}
function breadcrumbs(theme) {
  return {
    MuiBreadcrumbs: {
      styleOverrides: {
        separator: {
          marginLeft: theme.spacing(2),
          marginRight: theme.spacing(2)
        },
        li: {
          display: "inline-flex",
          margin: theme.spacing(0.25, 0),
          "& > *": {
            ...theme.typography.body2
          }
        }
      }
    }
  };
}
function cssBaseline(theme) {
  return {
    MuiCssBaseline: {
      styleOverrides: {
        "*": {
          boxSizing: "border-box"
        },
        html: {
          margin: 0,
          padding: 0,
          width: "100%",
          height: "100%",
          WebkitOverflowScrolling: "touch"
        },
        body: {
          margin: 0,
          padding: 0,
          width: "100%",
          height: "100%"
        },
        "#root, #__next": {
          width: "100%",
          height: "100%"
        },
        input: {
          "&[type=number]": {
            MozAppearance: "textfield",
            "&::-webkit-outer-spin-button": {
              margin: 0,
              WebkitAppearance: "none"
            },
            "&::-webkit-inner-spin-button": {
              margin: 0,
              WebkitAppearance: "none"
            }
          }
        },
        img: {
          maxWidth: "100%",
          display: "inline-block",
          verticalAlign: "bottom"
        }
      }
    }
  };
}
const COLORS$1 = ["primary", "secondary", "info", "success", "warning", "error"];
function buttonGroup(theme) {
  const rootStyles = (ownerState) => {
    const inheritColor = ownerState.color === "inherit";
    const containedVariant = ownerState.variant === "contained";
    const outlinedVariant = ownerState.variant === "outlined";
    const textVariant = ownerState.variant === "text";
    const softVariant = ownerState.variant === "soft";
    const horizontalOrientation = ownerState.orientation === "horizontal";
    const verticalOrientation = ownerState.orientation === "vertical";
    const defaultStyle = {
      ["& .".concat(buttonGroupClasses.grouped)]: {
        "&:not(:last-of-type)": {
          ...!outlinedVariant && {
            borderStyle: "solid",
            ...inheritColor && {
              borderColor: alpha(theme.palette.grey[500], 0.32)
            },
            // HORIZONTAL
            ...horizontalOrientation && {
              borderWidth: "0px 1px 0px 0px"
            },
            // VERTICAL
            ...verticalOrientation && {
              borderWidth: "0px 0px 1px 0px"
            }
          }
        }
      }
    };
    const colorStyle = COLORS$1.map((color) => ({
      ["& .".concat(buttonGroupClasses.grouped)]: {
        "&:not(:last-of-type)": {
          ...!outlinedVariant && {
            ...ownerState.color === color && {
              // CONTAINED
              ...containedVariant && {
                borderColor: alpha(theme.palette[color].dark, 0.48)
              },
              // TEXT
              ...textVariant && {
                borderColor: alpha(theme.palette[color].main, 0.48)
              },
              // SOFT
              ...softVariant && {
                borderColor: alpha(theme.palette[color].dark, 0.24)
              }
            }
          }
        }
      }
    }));
    const disabledState = {
      ["& .".concat(buttonGroupClasses.grouped)]: {
        ["&.".concat(buttonGroupClasses.disabled)]: {
          "&:not(:last-of-type)": {
            borderColor: theme.palette.action.disabledBackground
          }
        }
      }
    };
    return [defaultStyle, ...colorStyle, disabledState];
  };
  return {
    MuiButtonGroup: {
      styleOverrides: {
        root: ({ ownerState }) => rootStyles(ownerState)
      }
    }
  };
}
function autocomplete(theme) {
  return {
    MuiAutocomplete: {
      styleOverrides: {
        root: {
          ["& span.".concat(autocompleteClasses.tag)]: {
            ...theme.typography.subtitle2,
            height: 24,
            minWidth: 24,
            lineHeight: "24px",
            textAlign: "center",
            padding: theme.spacing(0, 0.75),
            color: theme.palette.text.secondary,
            borderRadius: theme.shape.borderRadius,
            backgroundColor: alpha(theme.palette.grey[500], 0.16)
          }
        },
        paper: {
          ...paper$1({ theme, dropdown: true })
        },
        listbox: {
          padding: 0,
          ["& .".concat(autocompleteClasses.option)]: {
            ...menuItem(theme)
          }
        },
        endAdornment: {
          ["& .".concat(svgIconClasses.root)]: {
            width: 18,
            height: 18
          }
        }
      }
    }
  };
}
const COLORS = ["primary", "secondary", "info", "success", "warning", "error"];
function toggleButton(theme) {
  const rootStyles = (ownerState) => {
    const defaultStyle = {
      ["&.".concat(toggleButtonClasses.selected)]: {
        borderColor: "currentColor",
        boxShadow: "0 0 0 0.5px currentColor"
      }
    };
    const colorStyle = COLORS.map((color) => ({
      ...ownerState.color === color && {
        "&:hover": {
          borderColor: alpha(theme.palette[color].main, 0.48),
          backgroundColor: alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)
        }
      }
    }));
    const disabledState = {
      ["&.".concat(toggleButtonClasses.disabled)]: {
        ["&.".concat(toggleButtonClasses.selected)]: {
          color: theme.palette.action.disabled,
          backgroundColor: theme.palette.action.selected,
          borderColor: theme.palette.action.disabledBackground
        }
      }
    };
    return [defaultStyle, ...colorStyle, disabledState];
  };
  return {
    MuiToggleButton: {
      styleOverrides: {
        root: ({ ownerState }) => rootStyles(ownerState)
      }
    },
    MuiToggleButtonGroup: {
      styleOverrides: {
        root: {
          borderRadius: theme.shape.borderRadius,
          backgroundColor: theme.palette.background.paper,
          border: "solid 1px ".concat(alpha(theme.palette.grey[500], 0.08))
        },
        grouped: {
          margin: 4,
          ["&.".concat(toggleButtonClasses.selected)]: {
            boxShadow: "none"
          },
          "&:not(:first-of-type), &:not(:last-of-type)": {
            borderRadius: theme.shape.borderRadius,
            borderColor: "transparent"
          }
        }
      }
    }
  };
}
function getLoadingButtonUtilityClass(slot) {
  return generateUtilityClass("MuiLoadingButton", slot);
}
const loadingButtonClasses = generateUtilityClasses("MuiLoadingButton", ["root", "loading", "loadingIndicator", "loadingIndicatorCenter", "loadingIndicatorStart", "loadingIndicatorEnd", "endIconLoadingEnd", "startIconLoadingStart"]);
function loadingButton(theme) {
  return {
    MuiLoadingButton: {
      styleOverrides: {
        root: ({ ownerState }) => ({
          ...ownerState.variant === "soft" && {
            ["& .".concat(loadingButtonClasses.loadingIndicatorStart)]: {
              left: 10
            },
            ["& .".concat(loadingButtonClasses.loadingIndicatorEnd)]: {
              right: 14
            },
            ...ownerState.size === "small" && {
              ["& .".concat(loadingButtonClasses.loadingIndicatorStart)]: {
                left: 10
              },
              ["& .".concat(loadingButtonClasses.loadingIndicatorEnd)]: {
                right: 10
              }
            }
          }
        })
      }
    }
  };
}
function componentsOverrides(theme) {
  const components = merge(
    defaultProps(theme),
    //
    fab(theme),
    tabs(theme),
    chip(theme),
    card(theme),
    menu(theme),
    list(theme),
    badge(theme),
    table(theme),
    paper(theme),
    alert(theme),
    radio(theme),
    select(),
    button(theme),
    rating(theme),
    dialog(theme),
    appBar(),
    avatar(theme),
    slider(theme),
    drawer(theme),
    stepper(theme),
    tooltip(theme),
    popover(theme),
    svgIcon(),
    switches(theme),
    checkbox(theme),
    dataGrid(theme),
    skeleton(theme),
    timeline(theme),
    treeView(theme),
    backdrop(theme),
    progress(theme),
    textField(theme),
    accordion(theme),
    typography(theme),
    pagination(theme),
    datePicker(theme),
    buttonGroup(theme),
    breadcrumbs(theme),
    cssBaseline(),
    autocomplete(theme),
    toggleButton(theme),
    loadingButton()
  );
  return components;
}
function createPresets(preset) {
  const { primary: primaryColor, secondary: secondaryColor } = getPrimary(preset);
  const theme = {
    palette: {
      primary: primaryColor,
      secondary: secondaryColor
    },
    customShadows: {
      primary: "0 8px 16px 0 ".concat(alpha("".concat(primaryColor.main), 0.24)),
      secondary: "0 8px 16px 0 ".concat(alpha("".concat(secondaryColor.main), 0.24))
    }
  };
  return {
    ...theme
  };
}
[
  { name: "default", value: [primary.main, secondary.main] }
];
function getPrimary(preset) {
  return {
    default: { primary, secondary }
  }[preset];
}
function ThemeProvider({ children }) {
  const themeMode = "light";
  const lang = localStorage.getItem("lang");
  const presets = createPresets("default");
  const direction = reactExports.useMemo(
    () => rtlLanguage.includes(lang) ? "rtl" : "ltr",
    [lang]
  );
  const theme = createTheme$1({
    palette: {
      ...palette(themeMode),
      ...presets.palette
    },
    customShadows: {
      ...customShadows(),
      ...presets.customShadows
    },
    direction: "ltr",
    shadows: shadows(),
    shape: { borderRadius: 8 },
    typography: typography$1
  });
  theme.components = componentsOverrides(theme);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider$1, { theme, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(RTL, { themeDirection: direction, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(CssBaseline, {}),
    children
  ] }) });
}
ThemeProvider.propTypes = {
  children: PropTypes.node
};
function UnsupportedView() {
  const { t } = useTranslation("manage");
  return /* @__PURE__ */ jsxRuntimeExports.jsx(CompactLayout, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", paragraph: true, children: t("mobile_view") }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { sx: { color: "text.secondary" }, children: t("mobile_view_working") }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Image$1,
      {
        alt: "maintenance",
        src: "/illustration_maintenance.svg",
        sx: {
          mx: "auto",
          maxWidth: 320,
          my: { xs: 5, sm: 8 }
        }
      }
    )
  ] }) });
}
const ManagePageWrapper = ({ showHeader = true, children }) => {
  const lang = localStorage.getItem("lang");
  const { i18n } = useTranslation("manage");
  const [isSupportedScreenSize, setIsSupportedScreenSize] = reactExports.useState(() => {
    const minWidth = 768;
    const minHeight = 600;
    return window.innerWidth >= minWidth && window.innerHeight >= minHeight;
  });
  reactExports.useEffect(() => {
    document.body.style.overflow = "hidden";
    setLangFromSession(i18n);
  }, [lang]);
  const cacheRtlMemo = reactExports.useMemo(() => cacheRtl(lang), [lang]);
  reactExports.useEffect(() => {
    const checkScreenSize = () => {
      const minWidth = 768;
      const minHeight = 600;
      if (window.innerWidth < minWidth || window.innerHeight < minHeight) {
        setIsSupportedScreenSize(false);
      } else {
        setIsSupportedScreenSize(true);
      }
    };
    window.addEventListener("resize", checkScreenSize);
    return () => {
      window.removeEventListener("resize", checkScreenSize);
    };
  }, []);
  if (!isSupportedScreenSize) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(UnsupportedView, {});
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(CacheProvider, { value: cacheRtlMemo, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Provider, { store: manageStore, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(ThemeProvider, { children: [
    showHeader && /* @__PURE__ */ jsxRuntimeExports.jsx(Header, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(ErrorWrapper, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(StatefulLoadingIndicator, {}),
    children
  ] }) }) });
};
const savingProgress = "_savingProgress_tmvkb_1";
const snackBar = "_snackBar_tmvkb_7";
const styles$6 = {
  savingProgress,
  snackBar
};
function SavingSurvey() {
  const isSaving = useSelector((state) => {
    return state.designState.isSaving || state.editState.isSaving;
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Snackbar, { open: isSaving, className: styles$6.snackBar, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Alert, { severity: "warning", children: [
    "Saving Survey...",
    " ",
    /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgress, { className: styles$6.savingProgress, color: "warning" })
  ] }) });
}
const wrapper$1 = "_wrapper_1tgcz_2";
const styles$5 = {
  wrapper: wrapper$1
};
const styles$4 = {};
const BaseLanguage = ({
  baseLanguage,
  onBaseLanguageChanged,
  disabled
}) => {
  const { t } = useTranslation("manage");
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { id: "label-base-language", children: t("label.base_language") }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Select,
      {
        disabled,
        labelId: "label-base-language",
        value: baseLanguage,
        label: t("label.base_language"),
        onChange: onBaseLanguageChanged,
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "en", children: LANGUAGE_DEF["en"].name }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "de", children: LANGUAGE_DEF["de"].name }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "ar", children: LANGUAGE_DEF["ar"].name })
        ]
      }
    )
  ] });
};
const AdditionalLanguages = ({
  baseLanguage,
  onAdditionalLanguagesChanged,
  additionalLanguages,
  disabled
}) => {
  const { t } = useTranslation("manage");
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { sx: { marginTop: "16px" }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(FormLabel, { id: "additional-languages-label", children: t("label.additional_languages") }),
    Object.keys(LANGUAGE_DEF).map((key2) => {
      const el = LANGUAGE_DEF[key2];
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        FormControlLabel,
        {
          control: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Checkbox,
            {
              disabled: baseLanguage == el.code || disabled,
              checked: additionalLanguages.indexOf(el.code) > -1,
              onChange: onAdditionalLanguagesChanged,
              name: el.code
            }
          ),
          label: el.name
        },
        key2
      );
    })
  ] });
};
var Close = {};
var _interopRequireDefault$3 = interopRequireDefaultExports;
Object.defineProperty(Close, "__esModule", {
  value: true
});
var default_1$3 = Close.default = void 0;
var _createSvgIcon$3 = _interopRequireDefault$3(requireCreateSvgIcon());
var _jsxRuntime$3 = jsxRuntimeExports;
default_1$3 = Close.default = (0, _createSvgIcon$3.default)(/* @__PURE__ */ (0, _jsxRuntime$3.jsx)("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close");
function ManageTranslations({ onManageTranslationsClose, onStartTranslation }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    Dialog,
    {
      fullWidth: true,
      maxWidth: "sm",
      open: true,
      onClose: onManageTranslationsClose,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(DialogTitle, { children: [
          "Translations",
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            IconButton,
            {
              "aria-label": "close",
              onClick: onManageTranslationsClose,
              sx: {
                position: "absolute",
                right: 8,
                top: 8,
                color: (theme) => theme.palette.grey[500]
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(default_1$3, {})
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContent, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          ManageLanguages,
          {
            onTranlsationStarted: () => {
              onManageTranslationsClose();
              onStartTranslation();
            },
            onManageTranslationsClose
          }
        ) })
      ]
    }
  );
}
function ManageLanguages() {
  const dispatch = useDispatch();
  const langInfo = useSelector((state) => {
    return state.designState.langInfo;
  });
  const lang = langInfo == null ? void 0 : langInfo.lang;
  const allLang = (langInfo == null ? void 0 : langInfo.languagesList) || [];
  const additionalLanguages = allLang.filter(
    (e) => langInfo.mainLang != e.code
  );
  const additionalLanguagesCodes = additionalLanguages.map((e) => e.code);
  const onBaseLanguageChanged = (e) => {
    dispatch(onBaseLangChanged(LANGUAGE_DEF[e.target.value]));
  };
  const onAdditionalLanguagesChanged = (e) => {
    if (e.target.checked) {
      dispatch(onAdditionalLangAdded(LANGUAGE_DEF[e.target.name]));
    } else {
      dispatch(onAdditionalLangRemoved(LANGUAGE_DEF[e.target.name]));
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { paddingTop: "8px" }, className: styles$4.blockItem, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      BaseLanguage,
      {
        onBaseLanguageChanged,
        baseLanguage: langInfo.mainLang
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      AdditionalLanguages,
      {
        onAdditionalLanguagesChanged,
        additionalLanguages: additionalLanguagesCodes,
        baseLanguage: langInfo.mainLang
      }
    ),
    allLang.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Typography,
        {
          sx: { marginTop: "16px", marginBottom: "8px", fontSize: "1em" },
          children: "Translate Survey To:"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { id: "label-base-language", children: "Language" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Select,
          {
            id: "ChangeLang",
            value: lang,
            label: "Design Language",
            onChange: (event) => {
              dispatch(changeLang(event.target.value));
            },
            children: allLang.map((lang2, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: lang2.code, children: lang2.name }, index2))
          }
        )
      ] })
    ] })
  ] });
}
var TableRows = {};
var _interopRequireDefault$2 = interopRequireDefaultExports;
Object.defineProperty(TableRows, "__esModule", {
  value: true
});
var default_1$2 = TableRows.default = void 0;
var _createSvgIcon$2 = _interopRequireDefault$2(requireCreateSvgIcon());
var _jsxRuntime$2 = jsxRuntimeExports;
default_1$2 = TableRows.default = (0, _createSvgIcon$2.default)(/* @__PURE__ */ (0, _jsxRuntime$2.jsx)("path", {
  d: "M21 8H3V4h18zm0 2H3v4h18zm0 6H3v4h18z"
}), "TableRows");
const surveyHeader = "_surveyHeader_6kre5_1";
const icon$1 = "_icon_6kre5_9";
const launchContainer = "_launchContainer_6kre5_13";
const unpublishedChangesDot = "_unpublishedChangesDot_6kre5_16";
const styles$3 = {
  surveyHeader,
  icon: icon$1,
  launchContainer,
  unpublishedChangesDot
};
var HelpOutline = {};
var _interopRequireDefault$1 = interopRequireDefaultExports;
Object.defineProperty(HelpOutline, "__esModule", {
  value: true
});
var default_1$1 = HelpOutline.default = void 0;
var _createSvgIcon$1 = _interopRequireDefault$1(requireCreateSvgIcon());
var _jsxRuntime$1 = jsxRuntimeExports;
default_1$1 = HelpOutline.default = (0, _createSvgIcon$1.default)(/* @__PURE__ */ (0, _jsxRuntime$1.jsx)("path", {
  d: "M11 18h2v-2h-2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8m0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4"
}), "HelpOutline");
const CustomTooltip = ({
  title,
  body: body2,
  url,
  children,
  showIcon = true,
  placement = "bottom-start"
}) => {
  const [tooltipOpen, setTooltipOpen] = reactExports.useState(false);
  const theme = useTheme$2();
  const tooltipContent = /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
    title && /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: title }),
    body2 && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: body2 }),
    url && /* @__PURE__ */ jsxRuntimeExports.jsx(
      Button,
      {
        variant: "text",
        href: url,
        target: "_blank",
        sx: { padding: 0, textTransform: "none" },
        children: "Read more..."
      }
    )
  ] });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Tooltip,
    {
      title: tooltipContent,
      onOpen: () => setTooltipOpen(true),
      onClose: () => setTooltipOpen(false),
      componentsProps: {
        tooltip: {
          sx: {
            backgroundColor: "#fff",
            color: "#1a2052",
            fontSize: "0.875rem",
            border: "1px solid #dadde9"
          }
        }
      },
      placement,
      children: showIcon ? /* @__PURE__ */ jsxRuntimeExports.jsx(
        default_1$1,
        {
          sx: {
            borderRadius: "50%",
            transition: "background-color 0.3s ease, color 0.3s ease",
            backgroundColor: tooltipOpen ? theme.palette.primary.main : "transparent",
            color: tooltipOpen ? "#fff" : "#1a2052",
            outline: "none",
            "&:hover": {
              backgroundColor: theme.palette.primary.main,
              color: "#fff",
              outline: "none"
            },
            "&:focus": {
              outline: "none"
            }
          },
          fontSize: "medium"
        }
      ) : children
    }
  );
};
function SideTabs({ selectedPage, onPageChange, availablePages: availablePages2, surveyId }) {
  const tabAvailable = (tab) => availablePages2.indexOf(tab) !== -1;
  const { t } = useTranslation("design");
  const dispatch = useDispatch();
  const getTabButtonStyle = (selected) => ({
    minWidth: "auto",
    margin: "0px !important",
    padding: "12px 0px",
    backgroundColor: selected ? "#2d3cb2" : void 0,
    color: "#fff"
  });
  const versionDto = useSelector((state) => {
    return state.designState.versionDto;
  });
  const published = versionDto == null ? void 0 : versionDto.published;
  availablePages2.indexOf(selectedPage);
  function component() {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(List, { children: [
      tabAvailable(MANAGE_SURVEY_LANDING_PAGES.DESIGN) && /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        SideTab,
        {
          tooltip: t("design"),
          style: getTabButtonStyle(
            selectedPage == MANAGE_SURVEY_LANDING_PAGES.DESIGN
          ),
          link: routes.designSurvey.replace(":surveyId", surveyId),
          icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Edit, { sx: { color: "#fff" } }),
          onClick: () => {
            dispatch(resetSetup());
            onPageChange(MANAGE_SURVEY_LANDING_PAGES.DESIGN);
          }
        }
      ) }),
      tabAvailable(MANAGE_SURVEY_LANDING_PAGES.PREVIEW) && /* @__PURE__ */ jsxRuntimeExports.jsx(
        SideTab,
        {
          tooltip: t("preview"),
          style: getTabButtonStyle(
            selectedPage == MANAGE_SURVEY_LANDING_PAGES.PREVIEW
          ),
          link: routes.preview.replace(":surveyId", surveyId),
          icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Visibility, { sx: { color: "#fff" } }),
          onClick: () => {
            onPageChange(MANAGE_SURVEY_LANDING_PAGES.PREVIEW);
          }
        }
      ),
      tabAvailable(MANAGE_SURVEY_LANDING_PAGES.SETTINGS) && /* @__PURE__ */ jsxRuntimeExports.jsx(
        SideTab,
        {
          tooltip: t("settings"),
          style: getTabButtonStyle(
            selectedPage == MANAGE_SURVEY_LANDING_PAGES.SETTINGS
          ),
          link: routes.editSurvey.replace(":surveyId", surveyId),
          icon: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.launchContainer, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Settings, { sx: { color: "#fff" } }),
            !published && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.unpublishedChangesDot })
          ] }),
          onClick: () => {
            onPageChange(MANAGE_SURVEY_LANDING_PAGES.SETTINGS);
          }
        }
      ),
      tabAvailable(MANAGE_SURVEY_LANDING_PAGES.RESPONSES) && /* @__PURE__ */ jsxRuntimeExports.jsx(
        SideTab,
        {
          tooltip: t("responses"),
          style: getTabButtonStyle(
            selectedPage == MANAGE_SURVEY_LANDING_PAGES.RESPONSES
          ),
          link: routes.responses.replace(":surveyId", surveyId),
          icon: /* @__PURE__ */ jsxRuntimeExports.jsx(default_1$2, { sx: { color: "#fff" } }),
          onClick: () => {
            onPageChange(MANAGE_SURVEY_LANDING_PAGES.RESPONSES);
          }
        }
      )
    ] });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$3.surveyHeader, children: component() });
}
const SideTabs$1 = React.memo(SideTabs);
function SideTab({ tooltip: tooltip2, style, link, onClick, icon: icon2 }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTooltip, { showIcon: false, title: tooltip2, placement: "right", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Link, { to: link, onClick: () => onClick(), children: /* @__PURE__ */ jsxRuntimeExports.jsx(ListItem, { disablePadding: true, style, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemButton, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemIcon, { children: icon2 }) }) }) }) });
}
const ResponsesSurvey = React.lazy(() => __vitePreload(() => import("./index-Ct665bQK.js"), true ? __vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) : void 0));
const EditSurvey = React.lazy(() => __vitePreload(() => import("./index-D1ggAoGZ.js"), true ? __vite__mapDeps([19,1,2,20,4,5,21,22,23,24,7,25,16,26,6,27,28,13,14,15,10,17,29]) : void 0));
const DesignSurvey = React.lazy(() => __vitePreload(() => import("./index-CQPYgnOI.js"), true ? __vite__mapDeps([30,1,2,4,5,31,32,33,16,8,9,10,34,14,35,15,36,37,28,24,7,25,38,39,20,17,13,40,3,41,26,42,43]) : void 0));
function ManageSurvey({ landingPage }) {
  const surveyService = useService("survey");
  const designService = useService("design");
  const params = useParams();
  const user = TokenService.getUser();
  const [selectedPage, setSelectedTab] = reactExports.useState(
    landingTab(landingPage, user)
  );
  const [designAvailable, setDesignAvailable] = reactExports.useState(false);
  const dispatch = useDispatch();
  const setState = (state) => {
    dispatch(designStateReceived(state));
  };
  const processApirror = (e) => {
    dispatch(setLoading(false));
  };
  reactExports.useEffect(() => {
    dispatch(onAddComponentsVisibilityChange(true));
    dispatch(resetSetup());
    if (!isSurveyAdmin()) {
      return;
    }
    dispatch(setLoading(true));
    GetData(designService, setState, processApirror).then((data2) => {
      if (data2) {
        setDesignAvailable(true);
        dispatch(setLoading(false));
      }
    }).catch((err) => {
      dispatch(setLoading(false));
    });
    loadSurvey();
  }, []);
  const loadSurvey = () => {
    surveyService.getSurvey().then((data2) => {
      if (data2) {
        dispatch(surveyReceived(data2));
      }
    }).catch((err) => {
    });
  };
  reactExports.useEffect(() => {
    const handlePopState = () => {
      const currentPath = window.location.pathname;
      const currentTab = currentPath.split("/")[1];
      setSelectedTab(currentTab);
    };
    window.addEventListener("popstate", handlePopState);
    return () => {
      window.removeEventListener("popstate", handlePopState);
    };
  }, []);
  const shouldShowDesign = () => selectedPage == MANAGE_SURVEY_LANDING_PAGES.DESIGN && designAvailable;
  const shouldShowResponses = () => selectedPage == MANAGE_SURVEY_LANDING_PAGES.RESPONSES;
  const shouldShowEditSurvey = () => selectedPage == MANAGE_SURVEY_LANDING_PAGES.SETTINGS;
  const changePage = reactExports.useCallback((tab) => {
    setSelectedTab(tab);
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex" }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SideTabs$1,
        {
          availablePages: availablePages(user),
          selectedPage,
          surveyId: params.surveyId,
          onPageChange: changePage
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingDots, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { className: styles$5.wrapper, children: shouldShowResponses() ? /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsesSurvey, {}) : shouldShowEditSurvey() ? /* @__PURE__ */ jsxRuntimeExports.jsx(EditSurvey, { onPublish: () => loadSurvey() }) : shouldShowDesign() ? /* @__PURE__ */ jsxRuntimeExports.jsx(DesignSurvey, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(SavingSurvey, {})
    ] }),
    designAvailable && selectedPage == MANAGE_SURVEY_LANDING_PAGES.LANGUAGE && /* @__PURE__ */ jsxRuntimeExports.jsx(
      ManageTranslations,
      {
        onManageTranslationsClose: () => {
          setSelectedTab(MANAGE_SURVEY_LANDING_PAGES.DESIGN);
        },
        permissionsLoadingpermissionsLoading: true,
        onStartTranslation: () => {
        }
      }
    )
  ] });
}
const ManageSurvey$1 = React.memo(ManageSurvey);
const availablePages = (user) => {
  if (isSurveyAdmin()) {
    return [
      MANAGE_SURVEY_LANDING_PAGES.DESIGN,
      MANAGE_SURVEY_LANDING_PAGES.PREVIEW,
      MANAGE_SURVEY_LANDING_PAGES.SETTINGS,
      MANAGE_SURVEY_LANDING_PAGES.RESPONSES
    ];
  } else if (isAnalyst(user)) {
    return [
      MANAGE_SURVEY_LANDING_PAGES.PREVIEW,
      MANAGE_SURVEY_LANDING_PAGES.RESPONSES
    ];
  } else {
    return [MANAGE_SURVEY_LANDING_PAGES.PREVIEW];
  }
};
const landingTab = (landingPage, user) => {
  if (isAnalyst(user) && landingPage == MANAGE_SURVEY_LANDING_PAGES.RESPONSES) {
    return MANAGE_SURVEY_LANDING_PAGES.RESPONSES;
  } else if (isSurveyAdmin() && (landingPage == MANAGE_SURVEY_LANDING_PAGES.DESIGN || landingPage == MANAGE_SURVEY_LANDING_PAGES.SETTINGS)) {
    return landingPage;
  } else {
    return "";
  }
};
function useResponsive(query, start, end) {
  const theme = useTheme$1();
  const mediaUp = useMediaQuery(theme.breakpoints.up(start));
  useMediaQuery(theme.breakpoints.down(start));
  useMediaQuery(theme.breakpoints.between(start, end));
  useMediaQuery(theme.breakpoints.only(start));
  {
    return mediaUp;
  }
}
const authContainer = "_authContainer_1r79w_1";
const styles$2 = {
  authContainer
};
function AuthIllustrationLayout({ children }) {
  const mdUp = useResponsive("up", "md");
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { className: styles$2.authContainer, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    Container,
    {
      sx: {
        pb: 10,
        minHeight: 1,
        pt: { xs: 12, md: 21 }
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        Grid2,
        {
          container: true,
          columnSpacing: { md: 5 },
          justifyContent: "space-between",
          children: [
            mdUp && /* @__PURE__ */ jsxRuntimeExports.jsx(Grid2, { xs: 12, md: 7, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "img",
              {
                style: { width: "100%" },
                alt: "login",
                src: "/illustration_login.jpg"
              }
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Grid2, { xs: 12, md: 5, lg: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Stack,
              {
                spacing: 4,
                sx: {
                  p: 4,
                  borderRadius: 2,
                  textAlign: { xs: "center", md: "left" },
                  boxShadow: (theme) => "22"
                },
                children
              }
            ) })
          ]
        }
      )
    }
  ) });
}
const container = "_container_f0r9q_1";
const onlinePreview = "_onlinePreview_f0r9q_11";
const icon = "_icon_f0r9q_17";
const offlinePreview = "_offlinePreview_f0r9q_22";
const wrapperMob = "_wrapperMob_f0r9q_31";
const phoneBg = "_phoneBg_f0r9q_37";
const iconButton = "_iconButton_f0r9q_42";
const styles$1 = {
  container,
  onlinePreview,
  icon,
  offlinePreview,
  wrapperMob,
  phoneBg,
  iconButton
};
var FileCopy = {};
var _interopRequireDefault = interopRequireDefaultExports;
Object.defineProperty(FileCopy, "__esModule", {
  value: true
});
var default_1 = FileCopy.default = void 0;
var _createSvgIcon = _interopRequireDefault(requireCreateSvgIcon());
var _jsxRuntime = jsxRuntimeExports;
default_1 = FileCopy.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
  d: "M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12zm-1 4 6 6v10c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2zm-1 7h5.5L14 6.5z"
}), "FileCopy");
const wrapper = "_wrapper_p5m09_1";
const action = "_action_p5m09_12";
const upload = "_upload_p5m09_18";
const uploadFileName = "_uploadFileName_p5m09_23";
const errorText = "_errorText_p5m09_27";
const styles = {
  wrapper,
  action,
  upload,
  uploadFileName,
  errorText
};
var isCheckBoxInput = (element) => element.type === "checkbox";
var isDateObject = (value2) => value2 instanceof Date;
var isNullOrUndefined = (value2) => value2 == null;
const isObjectType = (value2) => typeof value2 === "object";
var isObject = (value2) => !isNullOrUndefined(value2) && !Array.isArray(value2) && isObjectType(value2) && !isDateObject(value2);
var getEventValue = (event) => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;
var getNodeParentName = (name2) => name2.substring(0, name2.search(/\.\d+(\.|$)/)) || name2;
var isNameInFieldArray = (names, name2) => names.has(getNodeParentName(name2));
var isPlainObject = (tempObject) => {
  const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
  return isObject(prototypeCopy) && prototypeCopy.hasOwnProperty("isPrototypeOf");
};
var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
function cloneObject(data2) {
  let copy;
  const isArray3 = Array.isArray(data2);
  if (data2 instanceof Date) {
    copy = new Date(data2);
  } else if (data2 instanceof Set) {
    copy = new Set(data2);
  } else if (!(isWeb && (data2 instanceof Blob || data2 instanceof FileList)) && (isArray3 || isObject(data2))) {
    copy = isArray3 ? [] : {};
    if (!isArray3 && !isPlainObject(data2)) {
      copy = data2;
    } else {
      for (const key2 in data2) {
        if (data2.hasOwnProperty(key2)) {
          copy[key2] = cloneObject(data2[key2]);
        }
      }
    }
  } else {
    return data2;
  }
  return copy;
}
var compact = (value2) => Array.isArray(value2) ? value2.filter(Boolean) : [];
var isUndefined = (val2) => val2 === void 0;
var get = (object, path, defaultValue) => {
  if (!path || !isObject(object)) {
    return defaultValue;
  }
  const result = compact(path.split(/[,[\].]+?/)).reduce((result2, key2) => isNullOrUndefined(result2) ? result2 : result2[key2], object);
  return isUndefined(result) || result === object ? isUndefined(object[path]) ? defaultValue : object[path] : result;
};
var isBoolean = (value2) => typeof value2 === "boolean";
var isKey = (value2) => /^\w*$/.test(value2);
var stringToPath = (input) => compact(input.replace(/["|']|\]/g, "").split(/\.|\[/));
var set = (object, path, value2) => {
  let index2 = -1;
  const tempPath = isKey(path) ? [path] : stringToPath(path);
  const length2 = tempPath.length;
  const lastIndex = length2 - 1;
  while (++index2 < length2) {
    const key2 = tempPath[index2];
    let newValue = value2;
    if (index2 !== lastIndex) {
      const objValue = object[key2];
      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index2 + 1]) ? [] : {};
    }
    if (key2 === "__proto__") {
      return;
    }
    object[key2] = newValue;
    object = object[key2];
  }
  return object;
};
const EVENTS = {
  BLUR: "blur",
  FOCUS_OUT: "focusout",
  CHANGE: "change"
};
const VALIDATION_MODE = {
  onBlur: "onBlur",
  onChange: "onChange",
  onSubmit: "onSubmit",
  onTouched: "onTouched",
  all: "all"
};
const INPUT_VALIDATION_RULES = {
  max: "max",
  min: "min",
  maxLength: "maxLength",
  minLength: "minLength",
  pattern: "pattern",
  required: "required",
  validate: "validate"
};
const HookFormContext = React.createContext(null);
const useFormContext = () => React.useContext(HookFormContext);
const FormProvider$1 = (props) => {
  const { children, ...data2 } = props;
  return React.createElement(HookFormContext.Provider, { value: data2 }, children);
};
var getProxyFormState = (formState, control2, localProxyFormState, isRoot = true) => {
  const result = {
    defaultValues: control2._defaultValues
  };
  for (const key2 in formState) {
    Object.defineProperty(result, key2, {
      get: () => {
        const _key = key2;
        if (control2._proxyFormState[_key] !== VALIDATION_MODE.all) {
          control2._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
        }
        localProxyFormState && (localProxyFormState[_key] = true);
        return formState[_key];
      }
    });
  }
  return result;
};
var isEmptyObject = (value2) => isObject(value2) && !Object.keys(value2).length;
var shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {
  updateFormState(formStateData);
  const { name: name2, ...formState } = formStateData;
  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find((key2) => _proxyFormState[key2] === (!isRoot || VALIDATION_MODE.all));
};
var convertToArrayPayload = (value2) => Array.isArray(value2) ? value2 : [value2];
var shouldSubscribeByName = (name2, signalName, exact) => !name2 || !signalName || name2 === signalName || convertToArrayPayload(name2).some((currentName) => currentName && (exact ? currentName === signalName : currentName.startsWith(signalName) || signalName.startsWith(currentName)));
function useSubscribe(props) {
  const _props = React.useRef(props);
  _props.current = props;
  React.useEffect(() => {
    const subscription = !props.disabled && _props.current.subject && _props.current.subject.subscribe({
      next: _props.current.next
    });
    return () => {
      subscription && subscription.unsubscribe();
    };
  }, [props.disabled]);
}
function useFormState(props) {
  const methods = useFormContext();
  const { control: control2 = methods.control, disabled, name: name2, exact } = props || {};
  const [formState, updateFormState] = React.useState(control2._formState);
  const _mounted = React.useRef(true);
  const _localProxyFormState = React.useRef({
    isDirty: false,
    isLoading: false,
    dirtyFields: false,
    touchedFields: false,
    validatingFields: false,
    isValidating: false,
    isValid: false,
    errors: false
  });
  const _name = React.useRef(name2);
  _name.current = name2;
  useSubscribe({
    disabled,
    next: (value2) => _mounted.current && shouldSubscribeByName(_name.current, value2.name, exact) && shouldRenderFormState(value2, _localProxyFormState.current, control2._updateFormState) && updateFormState({
      ...control2._formState,
      ...value2
    }),
    subject: control2._subjects.state
  });
  React.useEffect(() => {
    _mounted.current = true;
    _localProxyFormState.current.isValid && control2._updateValid(true);
    return () => {
      _mounted.current = false;
    };
  }, [control2]);
  return getProxyFormState(formState, control2, _localProxyFormState.current, false);
}
var isString = (value2) => typeof value2 === "string";
var generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {
  if (isString(names)) {
    isGlobal && _names.watch.add(names);
    return get(formValues, names, defaultValue);
  }
  if (Array.isArray(names)) {
    return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));
  }
  isGlobal && (_names.watchAll = true);
  return formValues;
};
function useWatch(props) {
  const methods = useFormContext();
  const { control: control2 = methods.control, name: name2, defaultValue, disabled, exact } = props || {};
  const _name = React.useRef(name2);
  _name.current = name2;
  useSubscribe({
    disabled,
    subject: control2._subjects.values,
    next: (formState) => {
      if (shouldSubscribeByName(_name.current, formState.name, exact)) {
        updateValue(cloneObject(generateWatchOutput(_name.current, control2._names, formState.values || control2._formValues, false, defaultValue)));
      }
    }
  });
  const [value2, updateValue] = React.useState(control2._getWatch(name2, defaultValue));
  React.useEffect(() => control2._removeUnmounted());
  return value2;
}
function useController(props) {
  const methods = useFormContext();
  const { name: name2, disabled, control: control2 = methods.control, shouldUnregister } = props;
  const isArrayField = isNameInFieldArray(control2._names.array, name2);
  const value2 = useWatch({
    control: control2,
    name: name2,
    defaultValue: get(control2._formValues, name2, get(control2._defaultValues, name2, props.defaultValue)),
    exact: true
  });
  const formState = useFormState({
    control: control2,
    name: name2,
    exact: true
  });
  const _registerProps = React.useRef(control2.register(name2, {
    ...props.rules,
    value: value2,
    ...isBoolean(props.disabled) ? { disabled: props.disabled } : {}
  }));
  React.useEffect(() => {
    const _shouldUnregisterField = control2._options.shouldUnregister || shouldUnregister;
    const updateMounted = (name3, value3) => {
      const field = get(control2._fields, name3);
      if (field && field._f) {
        field._f.mount = value3;
      }
    };
    updateMounted(name2, true);
    if (_shouldUnregisterField) {
      const value3 = cloneObject(get(control2._options.defaultValues, name2));
      set(control2._defaultValues, name2, value3);
      if (isUndefined(get(control2._formValues, name2))) {
        set(control2._formValues, name2, value3);
      }
    }
    return () => {
      (isArrayField ? _shouldUnregisterField && !control2._state.action : _shouldUnregisterField) ? control2.unregister(name2) : updateMounted(name2, false);
    };
  }, [name2, control2, isArrayField, shouldUnregister]);
  React.useEffect(() => {
    if (get(control2._fields, name2)) {
      control2._updateDisabledField({
        disabled,
        fields: control2._fields,
        name: name2,
        value: get(control2._fields, name2)._f.value
      });
    }
  }, [disabled, name2, control2]);
  return {
    field: {
      name: name2,
      value: value2,
      ...isBoolean(disabled) || formState.disabled ? { disabled: formState.disabled || disabled } : {},
      onChange: React.useCallback((event) => _registerProps.current.onChange({
        target: {
          value: getEventValue(event),
          name: name2
        },
        type: EVENTS.CHANGE
      }), [name2]),
      onBlur: React.useCallback(() => _registerProps.current.onBlur({
        target: {
          value: get(control2._formValues, name2),
          name: name2
        },
        type: EVENTS.BLUR
      }), [name2, control2]),
      ref: React.useCallback((elm) => {
        const field = get(control2._fields, name2);
        if (field && elm) {
          field._f.ref = {
            focus: () => elm.focus(),
            select: () => elm.select(),
            setCustomValidity: (message) => elm.setCustomValidity(message),
            reportValidity: () => elm.reportValidity()
          };
        }
      }, [control2._fields, name2])
    },
    formState,
    fieldState: Object.defineProperties({}, {
      invalid: {
        enumerable: true,
        get: () => !!get(formState.errors, name2)
      },
      isDirty: {
        enumerable: true,
        get: () => !!get(formState.dirtyFields, name2)
      },
      isTouched: {
        enumerable: true,
        get: () => !!get(formState.touchedFields, name2)
      },
      isValidating: {
        enumerable: true,
        get: () => !!get(formState.validatingFields, name2)
      },
      error: {
        enumerable: true,
        get: () => get(formState.errors, name2)
      }
    })
  };
}
const Controller = (props) => props.render(useController(props));
var appendErrors = (name2, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? {
  ...errors[name2],
  types: {
    ...errors[name2] && errors[name2].types ? errors[name2].types : {},
    [type]: message || true
  }
} : {};
var getValidationModes = (mode) => ({
  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
  isOnBlur: mode === VALIDATION_MODE.onBlur,
  isOnChange: mode === VALIDATION_MODE.onChange,
  isOnAll: mode === VALIDATION_MODE.all,
  isOnTouch: mode === VALIDATION_MODE.onTouched
});
var isWatched = (name2, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name2) || [..._names.watch].some((watchName) => name2.startsWith(watchName) && /^\.\w+/.test(name2.slice(watchName.length))));
const iterateFieldsByAction = (fields, action2, fieldsNames, abortEarly) => {
  for (const key2 of fieldsNames || Object.keys(fields)) {
    const field = get(fields, key2);
    if (field) {
      const { _f, ...currentField } = field;
      if (_f) {
        if (_f.refs && _f.refs[0] && action2(_f.refs[0], key2) && !abortEarly) {
          return true;
        } else if (_f.ref && action2(_f.ref, _f.name) && !abortEarly) {
          return true;
        } else {
          if (iterateFieldsByAction(currentField, action2)) {
            break;
          }
        }
      } else if (isObject(currentField)) {
        if (iterateFieldsByAction(currentField, action2)) {
          break;
        }
      }
    }
  }
  return;
};
var updateFieldArrayRootError = (errors, error2, name2) => {
  const fieldArrayErrors = convertToArrayPayload(get(errors, name2));
  set(fieldArrayErrors, "root", error2[name2]);
  set(errors, name2, fieldArrayErrors);
  return errors;
};
var isFileInput = (element) => element.type === "file";
var isFunction = (value2) => typeof value2 === "function";
var isHTMLElement = (value2) => {
  if (!isWeb) {
    return false;
  }
  const owner = value2 ? value2.ownerDocument : 0;
  return value2 instanceof (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement);
};
var isMessage = (value2) => isString(value2);
var isRadioInput = (element) => element.type === "radio";
var isRegex = (value2) => value2 instanceof RegExp;
const defaultResult = {
  value: false,
  isValid: false
};
const validResult = { value: true, isValid: true };
var getCheckboxValue = (options) => {
  if (Array.isArray(options)) {
    if (options.length > 1) {
      const values = options.filter((option) => option && option.checked && !option.disabled).map((option) => option.value);
      return { value: values, isValid: !!values.length };
    }
    return options[0].checked && !options[0].disabled ? (
      // @ts-expect-error expected to work in the browser
      options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === "" ? validResult : { value: options[0].value, isValid: true } : validResult
    ) : defaultResult;
  }
  return defaultResult;
};
const defaultReturn = {
  isValid: false,
  value: null
};
var getRadioValue = (options) => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {
  isValid: true,
  value: option.value
} : previous, defaultReturn) : defaultReturn;
function getValidateError(result, ref, type = "validate") {
  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {
    return {
      type,
      message: isMessage(result) ? result : "",
      ref
    };
  }
}
var getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData) ? validationData : {
  value: validationData,
  message: ""
};
var validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {
  const { ref, refs, required, maxLength, minLength, min: min2, max: max2, pattern, validate, name: name2, valueAsNumber, mount, disabled } = field._f;
  const inputValue = get(formValues, name2);
  if (!mount || disabled) {
    return {};
  }
  const inputRef = refs ? refs[0] : ref;
  const setCustomValidity = (message) => {
    if (shouldUseNativeValidation && inputRef.reportValidity) {
      inputRef.setCustomValidity(isBoolean(message) ? "" : message || "");
      inputRef.reportValidity();
    }
  };
  const error2 = {};
  const isRadio = isRadioInput(ref);
  const isCheckBox = isCheckBoxInput(ref);
  const isRadioOrCheckbox2 = isRadio || isCheckBox;
  const isEmpty = (valueAsNumber || isFileInput(ref)) && isUndefined(ref.value) && isUndefined(inputValue) || isHTMLElement(ref) && ref.value === "" || inputValue === "" || Array.isArray(inputValue) && !inputValue.length;
  const appendErrorsCurry = appendErrors.bind(null, name2, validateAllFieldCriteria, error2);
  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
    const message = exceedMax ? maxLengthMessage : minLengthMessage;
    error2[name2] = {
      type: exceedMax ? maxType : minType,
      message,
      ref,
      ...appendErrorsCurry(exceedMax ? maxType : minType, message)
    };
  };
  if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox2 && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {
    const { value: value2, message } = isMessage(required) ? { value: !!required, message: required } : getValueAndMessage(required);
    if (value2) {
      error2[name2] = {
        type: INPUT_VALIDATION_RULES.required,
        message,
        ref: inputRef,
        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message)
      };
      if (!validateAllFieldCriteria) {
        setCustomValidity(message);
        return error2;
      }
    }
  }
  if (!isEmpty && (!isNullOrUndefined(min2) || !isNullOrUndefined(max2))) {
    let exceedMax;
    let exceedMin;
    const maxOutput = getValueAndMessage(max2);
    const minOutput = getValueAndMessage(min2);
    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {
      const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);
      if (!isNullOrUndefined(maxOutput.value)) {
        exceedMax = valueNumber > maxOutput.value;
      }
      if (!isNullOrUndefined(minOutput.value)) {
        exceedMin = valueNumber < minOutput.value;
      }
    } else {
      const valueDate = ref.valueAsDate || new Date(inputValue);
      const convertTimeToDate = (time2) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + time2);
      const isTime = ref.type == "time";
      const isWeek = ref.type == "week";
      if (isString(maxOutput.value) && inputValue) {
        exceedMax = isTime ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value) : isWeek ? inputValue > maxOutput.value : valueDate > new Date(maxOutput.value);
      }
      if (isString(minOutput.value) && inputValue) {
        exceedMin = isTime ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value) : isWeek ? inputValue < minOutput.value : valueDate < new Date(minOutput.value);
      }
    }
    if (exceedMax || exceedMin) {
      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
      if (!validateAllFieldCriteria) {
        setCustomValidity(error2[name2].message);
        return error2;
      }
    }
  }
  if ((maxLength || minLength) && !isEmpty && (isString(inputValue) || isFieldArray && Array.isArray(inputValue))) {
    const maxLengthOutput = getValueAndMessage(maxLength);
    const minLengthOutput = getValueAndMessage(minLength);
    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > +maxLengthOutput.value;
    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < +minLengthOutput.value;
    if (exceedMax || exceedMin) {
      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
      if (!validateAllFieldCriteria) {
        setCustomValidity(error2[name2].message);
        return error2;
      }
    }
  }
  if (pattern && !isEmpty && isString(inputValue)) {
    const { value: patternValue, message } = getValueAndMessage(pattern);
    if (isRegex(patternValue) && !inputValue.match(patternValue)) {
      error2[name2] = {
        type: INPUT_VALIDATION_RULES.pattern,
        message,
        ref,
        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message)
      };
      if (!validateAllFieldCriteria) {
        setCustomValidity(message);
        return error2;
      }
    }
  }
  if (validate) {
    if (isFunction(validate)) {
      const result = await validate(inputValue, formValues);
      const validateError = getValidateError(result, inputRef);
      if (validateError) {
        error2[name2] = {
          ...validateError,
          ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message)
        };
        if (!validateAllFieldCriteria) {
          setCustomValidity(validateError.message);
          return error2;
        }
      }
    } else if (isObject(validate)) {
      let validationResult = {};
      for (const key2 in validate) {
        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {
          break;
        }
        const validateError = getValidateError(await validate[key2](inputValue, formValues), inputRef, key2);
        if (validateError) {
          validationResult = {
            ...validateError,
            ...appendErrorsCurry(key2, validateError.message)
          };
          setCustomValidity(validateError.message);
          if (validateAllFieldCriteria) {
            error2[name2] = validationResult;
          }
        }
      }
      if (!isEmptyObject(validationResult)) {
        error2[name2] = {
          ref: inputRef,
          ...validationResult
        };
        if (!validateAllFieldCriteria) {
          return error2;
        }
      }
    }
  }
  setCustomValidity(true);
  return error2;
};
function baseGet(object, updatePath) {
  const length2 = updatePath.slice(0, -1).length;
  let index2 = 0;
  while (index2 < length2) {
    object = isUndefined(object) ? index2++ : object[updatePath[index2++]];
  }
  return object;
}
function isEmptyArray(obj) {
  for (const key2 in obj) {
    if (obj.hasOwnProperty(key2) && !isUndefined(obj[key2])) {
      return false;
    }
  }
  return true;
}
function unset(object, path) {
  const paths = Array.isArray(path) ? path : isKey(path) ? [path] : stringToPath(path);
  const childObject = paths.length === 1 ? object : baseGet(object, paths);
  const index2 = paths.length - 1;
  const key2 = paths[index2];
  if (childObject) {
    delete childObject[key2];
  }
  if (index2 !== 0 && (isObject(childObject) && isEmptyObject(childObject) || Array.isArray(childObject) && isEmptyArray(childObject))) {
    unset(object, paths.slice(0, -1));
  }
  return object;
}
var createSubject = () => {
  let _observers = [];
  const next = (value2) => {
    for (const observer of _observers) {
      observer.next && observer.next(value2);
    }
  };
  const subscribe = (observer) => {
    _observers.push(observer);
    return {
      unsubscribe: () => {
        _observers = _observers.filter((o) => o !== observer);
      }
    };
  };
  const unsubscribe = () => {
    _observers = [];
  };
  return {
    get observers() {
      return _observers;
    },
    next,
    subscribe,
    unsubscribe
  };
};
var isPrimitive = (value2) => isNullOrUndefined(value2) || !isObjectType(value2);
function deepEqual(object1, object2) {
  if (isPrimitive(object1) || isPrimitive(object2)) {
    return object1 === object2;
  }
  if (isDateObject(object1) && isDateObject(object2)) {
    return object1.getTime() === object2.getTime();
  }
  const keys1 = Object.keys(object1);
  const keys2 = Object.keys(object2);
  if (keys1.length !== keys2.length) {
    return false;
  }
  for (const key2 of keys1) {
    const val1 = object1[key2];
    if (!keys2.includes(key2)) {
      return false;
    }
    if (key2 !== "ref") {
      const val2 = object2[key2];
      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {
        return false;
      }
    }
  }
  return true;
}
var isMultipleSelect = (element) => element.type === "select-multiple";
var isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);
var live = (ref) => isHTMLElement(ref) && ref.isConnected;
var objectHasFunction = (data2) => {
  for (const key2 in data2) {
    if (isFunction(data2[key2])) {
      return true;
    }
  }
  return false;
};
function markFieldsDirty(data2, fields = {}) {
  const isParentNodeArray = Array.isArray(data2);
  if (isObject(data2) || isParentNodeArray) {
    for (const key2 in data2) {
      if (Array.isArray(data2[key2]) || isObject(data2[key2]) && !objectHasFunction(data2[key2])) {
        fields[key2] = Array.isArray(data2[key2]) ? [] : {};
        markFieldsDirty(data2[key2], fields[key2]);
      } else if (!isNullOrUndefined(data2[key2])) {
        fields[key2] = true;
      }
    }
  }
  return fields;
}
function getDirtyFieldsFromDefaultValues(data2, formValues, dirtyFieldsFromValues) {
  const isParentNodeArray = Array.isArray(data2);
  if (isObject(data2) || isParentNodeArray) {
    for (const key2 in data2) {
      if (Array.isArray(data2[key2]) || isObject(data2[key2]) && !objectHasFunction(data2[key2])) {
        if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key2])) {
          dirtyFieldsFromValues[key2] = Array.isArray(data2[key2]) ? markFieldsDirty(data2[key2], []) : { ...markFieldsDirty(data2[key2]) };
        } else {
          getDirtyFieldsFromDefaultValues(data2[key2], isNullOrUndefined(formValues) ? {} : formValues[key2], dirtyFieldsFromValues[key2]);
        }
      } else {
        dirtyFieldsFromValues[key2] = !deepEqual(data2[key2], formValues[key2]);
      }
    }
  }
  return dirtyFieldsFromValues;
}
var getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));
var getFieldValueAs = (value2, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value2) ? value2 : valueAsNumber ? value2 === "" ? NaN : value2 ? +value2 : value2 : valueAsDate && isString(value2) ? new Date(value2) : setValueAs ? setValueAs(value2) : value2;
function getFieldValue(_f) {
  const ref = _f.ref;
  if (_f.refs ? _f.refs.every((ref2) => ref2.disabled) : ref.disabled) {
    return;
  }
  if (isFileInput(ref)) {
    return ref.files;
  }
  if (isRadioInput(ref)) {
    return getRadioValue(_f.refs).value;
  }
  if (isMultipleSelect(ref)) {
    return [...ref.selectedOptions].map(({ value: value2 }) => value2);
  }
  if (isCheckBoxInput(ref)) {
    return getCheckboxValue(_f.refs).value;
  }
  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);
}
var getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
  const fields = {};
  for (const name2 of fieldsNames) {
    const field = get(_fields, name2);
    field && set(fields, name2, field._f);
  }
  return {
    criteriaMode,
    names: [...fieldsNames],
    fields,
    shouldUseNativeValidation
  };
};
var getRuleValue = (rule) => isUndefined(rule) ? rule : isRegex(rule) ? rule.source : isObject(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;
const ASYNC_FUNCTION = "AsyncFunction";
var hasPromiseValidation = (fieldReference) => (!fieldReference || !fieldReference.validate) && !!(isFunction(fieldReference.validate) && fieldReference.validate.constructor.name === ASYNC_FUNCTION || isObject(fieldReference.validate) && Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION));
var hasValidation = (options) => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);
function schemaErrorLookup(errors, _fields, name2) {
  const error2 = get(errors, name2);
  if (error2 || isKey(name2)) {
    return {
      error: error2,
      name: name2
    };
  }
  const names = name2.split(".");
  while (names.length) {
    const fieldName = names.join(".");
    const field = get(_fields, fieldName);
    const foundError = get(errors, fieldName);
    if (field && !Array.isArray(field) && name2 !== fieldName) {
      return { name: name2 };
    }
    if (foundError && foundError.type) {
      return {
        name: fieldName,
        error: foundError
      };
    }
    names.pop();
  }
  return {
    name: name2
  };
}
var skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {
  if (mode.isOnAll) {
    return false;
  } else if (!isSubmitted && mode.isOnTouch) {
    return !(isTouched || isBlurEvent);
  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {
    return !isBlurEvent;
  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {
    return isBlurEvent;
  }
  return true;
};
var unsetEmptyArray = (ref, name2) => !compact(get(ref, name2)).length && unset(ref, name2);
const defaultOptions = {
  mode: VALIDATION_MODE.onSubmit,
  reValidateMode: VALIDATION_MODE.onChange,
  shouldFocusError: true
};
function createFormControl(props = {}) {
  let _options = {
    ...defaultOptions,
    ...props
  };
  let _formState = {
    submitCount: 0,
    isDirty: false,
    isLoading: isFunction(_options.defaultValues),
    isValidating: false,
    isSubmitted: false,
    isSubmitting: false,
    isSubmitSuccessful: false,
    isValid: false,
    touchedFields: {},
    dirtyFields: {},
    validatingFields: {},
    errors: _options.errors || {},
    disabled: _options.disabled || false
  };
  let _fields = {};
  let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values) ? cloneObject(_options.defaultValues || _options.values) || {} : {};
  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);
  let _state = {
    action: false,
    mount: false,
    watch: false
  };
  let _names = {
    mount: /* @__PURE__ */ new Set(),
    unMount: /* @__PURE__ */ new Set(),
    array: /* @__PURE__ */ new Set(),
    watch: /* @__PURE__ */ new Set()
  };
  let delayErrorCallback;
  let timer = 0;
  const _proxyFormState = {
    isDirty: false,
    dirtyFields: false,
    validatingFields: false,
    touchedFields: false,
    isValidating: false,
    isValid: false,
    errors: false
  };
  const _subjects = {
    values: createSubject(),
    array: createSubject(),
    state: createSubject()
  };
  const validationModeBeforeSubmit = getValidationModes(_options.mode);
  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
  const debounce = (callback) => (wait) => {
    clearTimeout(timer);
    timer = setTimeout(callback, wait);
  };
  const _updateValid = async (shouldUpdateValid) => {
    if (!props.disabled && (_proxyFormState.isValid || shouldUpdateValid)) {
      const isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuiltInValidation(_fields, true);
      if (isValid !== _formState.isValid) {
        _subjects.state.next({
          isValid
        });
      }
    }
  };
  const _updateIsValidating = (names, isValidating) => {
    if (!props.disabled && (_proxyFormState.isValidating || _proxyFormState.validatingFields)) {
      (names || Array.from(_names.mount)).forEach((name2) => {
        if (name2) {
          isValidating ? set(_formState.validatingFields, name2, isValidating) : unset(_formState.validatingFields, name2);
        }
      });
      _subjects.state.next({
        validatingFields: _formState.validatingFields,
        isValidating: !isEmptyObject(_formState.validatingFields)
      });
    }
  };
  const _updateFieldArray = (name2, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
    if (args && method && !props.disabled) {
      _state.action = true;
      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name2))) {
        const fieldValues = method(get(_fields, name2), args.argA, args.argB);
        shouldSetValues && set(_fields, name2, fieldValues);
      }
      if (shouldUpdateFieldsAndState && Array.isArray(get(_formState.errors, name2))) {
        const errors = method(get(_formState.errors, name2), args.argA, args.argB);
        shouldSetValues && set(_formState.errors, name2, errors);
        unsetEmptyArray(_formState.errors, name2);
      }
      if (_proxyFormState.touchedFields && shouldUpdateFieldsAndState && Array.isArray(get(_formState.touchedFields, name2))) {
        const touchedFields = method(get(_formState.touchedFields, name2), args.argA, args.argB);
        shouldSetValues && set(_formState.touchedFields, name2, touchedFields);
      }
      if (_proxyFormState.dirtyFields) {
        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
      }
      _subjects.state.next({
        name: name2,
        isDirty: _getDirty(name2, values),
        dirtyFields: _formState.dirtyFields,
        errors: _formState.errors,
        isValid: _formState.isValid
      });
    } else {
      set(_formValues, name2, values);
    }
  };
  const updateErrors = (name2, error2) => {
    set(_formState.errors, name2, error2);
    _subjects.state.next({
      errors: _formState.errors
    });
  };
  const _setErrors = (errors) => {
    _formState.errors = errors;
    _subjects.state.next({
      errors: _formState.errors,
      isValid: false
    });
  };
  const updateValidAndValue = (name2, shouldSkipSetValueAs, value2, ref) => {
    const field = get(_fields, name2);
    if (field) {
      const defaultValue = get(_formValues, name2, isUndefined(value2) ? get(_defaultValues, name2) : value2);
      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name2, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name2, defaultValue);
      _state.mount && _updateValid();
    }
  };
  const updateTouchAndDirty = (name2, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {
    let shouldUpdateField = false;
    let isPreviousDirty = false;
    const output = {
      name: name2
    };
    if (!props.disabled) {
      const disabledField = !!(get(_fields, name2) && get(_fields, name2)._f && get(_fields, name2)._f.disabled);
      if (!isBlurEvent || shouldDirty) {
        if (_proxyFormState.isDirty) {
          isPreviousDirty = _formState.isDirty;
          _formState.isDirty = output.isDirty = _getDirty();
          shouldUpdateField = isPreviousDirty !== output.isDirty;
        }
        const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name2), fieldValue);
        isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name2));
        isCurrentFieldPristine || disabledField ? unset(_formState.dirtyFields, name2) : set(_formState.dirtyFields, name2, true);
        output.dirtyFields = _formState.dirtyFields;
        shouldUpdateField = shouldUpdateField || _proxyFormState.dirtyFields && isPreviousDirty !== !isCurrentFieldPristine;
      }
      if (isBlurEvent) {
        const isPreviousFieldTouched = get(_formState.touchedFields, name2);
        if (!isPreviousFieldTouched) {
          set(_formState.touchedFields, name2, isBlurEvent);
          output.touchedFields = _formState.touchedFields;
          shouldUpdateField = shouldUpdateField || _proxyFormState.touchedFields && isPreviousFieldTouched !== isBlurEvent;
        }
      }
      shouldUpdateField && shouldRender && _subjects.state.next(output);
    }
    return shouldUpdateField ? output : {};
  };
  const shouldRenderByError = (name2, isValid, error2, fieldState) => {
    const previousFieldError = get(_formState.errors, name2);
    const shouldUpdateValid = _proxyFormState.isValid && isBoolean(isValid) && _formState.isValid !== isValid;
    if (props.delayError && error2) {
      delayErrorCallback = debounce(() => updateErrors(name2, error2));
      delayErrorCallback(props.delayError);
    } else {
      clearTimeout(timer);
      delayErrorCallback = null;
      error2 ? set(_formState.errors, name2, error2) : unset(_formState.errors, name2);
    }
    if ((error2 ? !deepEqual(previousFieldError, error2) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) {
      const updatedFormState = {
        ...fieldState,
        ...shouldUpdateValid && isBoolean(isValid) ? { isValid } : {},
        errors: _formState.errors,
        name: name2
      };
      _formState = {
        ..._formState,
        ...updatedFormState
      };
      _subjects.state.next(updatedFormState);
    }
  };
  const _executeSchema = async (name2) => {
    _updateIsValidating(name2, true);
    const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name2 || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
    _updateIsValidating(name2);
    return result;
  };
  const executeSchemaAndUpdateState = async (names) => {
    const { errors } = await _executeSchema(names);
    if (names) {
      for (const name2 of names) {
        const error2 = get(errors, name2);
        error2 ? set(_formState.errors, name2, error2) : unset(_formState.errors, name2);
      }
    } else {
      _formState.errors = errors;
    }
    return errors;
  };
  const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {
    valid: true
  }) => {
    for (const name2 in fields) {
      const field = fields[name2];
      if (field) {
        const { _f, ...fieldValue } = field;
        if (_f) {
          const isFieldArrayRoot = _names.array.has(_f.name);
          const isPromiseFunction = field._f && hasPromiseValidation(field._f);
          if (isPromiseFunction && _proxyFormState.validatingFields) {
            _updateIsValidating([name2], true);
          }
          const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
          if (isPromiseFunction && _proxyFormState.validatingFields) {
            _updateIsValidating([name2]);
          }
          if (fieldError[_f.name]) {
            context.valid = false;
            if (shouldOnlyCheckValid) {
              break;
            }
          }
          !shouldOnlyCheckValid && (get(fieldError, _f.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name) : set(_formState.errors, _f.name, fieldError[_f.name]) : unset(_formState.errors, _f.name));
        }
        !isEmptyObject(fieldValue) && await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context);
      }
    }
    return context.valid;
  };
  const _removeUnmounted = () => {
    for (const name2 of _names.unMount) {
      const field = get(_fields, name2);
      field && (field._f.refs ? field._f.refs.every((ref) => !live(ref)) : !live(field._f.ref)) && unregister(name2);
    }
    _names.unMount = /* @__PURE__ */ new Set();
  };
  const _getDirty = (name2, data2) => !props.disabled && (name2 && data2 && set(_formValues, name2, data2), !deepEqual(getValues(), _defaultValues));
  const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {
    ..._state.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? { [names]: defaultValue } : defaultValue
  }, isGlobal, defaultValue);
  const _getFieldArray = (name2) => compact(get(_state.mount ? _formValues : _defaultValues, name2, props.shouldUnregister ? get(_defaultValues, name2, []) : []));
  const setFieldValue = (name2, value2, options = {}) => {
    const field = get(_fields, name2);
    let fieldValue = value2;
    if (field) {
      const fieldReference = field._f;
      if (fieldReference) {
        !fieldReference.disabled && set(_formValues, name2, getFieldValueAs(value2, fieldReference));
        fieldValue = isHTMLElement(fieldReference.ref) && isNullOrUndefined(value2) ? "" : value2;
        if (isMultipleSelect(fieldReference.ref)) {
          [...fieldReference.ref.options].forEach((optionRef) => optionRef.selected = fieldValue.includes(optionRef.value));
        } else if (fieldReference.refs) {
          if (isCheckBoxInput(fieldReference.ref)) {
            fieldReference.refs.length > 1 ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) && (checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find((data2) => data2 === checkboxRef.value) : fieldValue === checkboxRef.value)) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);
          } else {
            fieldReference.refs.forEach((radioRef) => radioRef.checked = radioRef.value === fieldValue);
          }
        } else if (isFileInput(fieldReference.ref)) {
          fieldReference.ref.value = "";
        } else {
          fieldReference.ref.value = fieldValue;
          if (!fieldReference.ref.type) {
            _subjects.values.next({
              name: name2,
              values: { ..._formValues }
            });
          }
        }
      }
    }
    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name2, fieldValue, options.shouldTouch, options.shouldDirty, true);
    options.shouldValidate && trigger(name2);
  };
  const setValues = (name2, value2, options) => {
    for (const fieldKey in value2) {
      const fieldValue = value2[fieldKey];
      const fieldName = "".concat(name2, ".").concat(fieldKey);
      const field = get(_fields, fieldName);
      (_names.array.has(name2) || isObject(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);
    }
  };
  const setValue = (name2, value2, options = {}) => {
    const field = get(_fields, name2);
    const isFieldArray = _names.array.has(name2);
    const cloneValue = cloneObject(value2);
    set(_formValues, name2, cloneValue);
    if (isFieldArray) {
      _subjects.array.next({
        name: name2,
        values: { ..._formValues }
      });
      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {
        _subjects.state.next({
          name: name2,
          dirtyFields: getDirtyFields(_defaultValues, _formValues),
          isDirty: _getDirty(name2, cloneValue)
        });
      }
    } else {
      field && !field._f && !isNullOrUndefined(cloneValue) ? setValues(name2, cloneValue, options) : setFieldValue(name2, cloneValue, options);
    }
    isWatched(name2, _names) && _subjects.state.next({ ..._formState });
    _subjects.values.next({
      name: _state.mount ? name2 : void 0,
      values: { ..._formValues }
    });
  };
  const onChange = async (event) => {
    _state.mount = true;
    const target = event.target;
    let name2 = target.name;
    let isFieldValueUpdated = true;
    const field = get(_fields, name2);
    const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);
    const _updateIsFieldValueUpdated = (fieldValue) => {
      isFieldValueUpdated = Number.isNaN(fieldValue) || isDateObject(fieldValue) && isNaN(fieldValue.getTime()) || deepEqual(fieldValue, get(_formValues, name2, fieldValue));
    };
    if (field) {
      let error2;
      let isValid;
      const fieldValue = getCurrentFieldValue();
      const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;
      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name2) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name2), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
      const watched = isWatched(name2, _names, isBlurEvent);
      set(_formValues, name2, fieldValue);
      if (isBlurEvent) {
        field._f.onBlur && field._f.onBlur(event);
        delayErrorCallback && delayErrorCallback(0);
      } else if (field._f.onChange) {
        field._f.onChange(event);
      }
      const fieldState = updateTouchAndDirty(name2, fieldValue, isBlurEvent, false);
      const shouldRender = !isEmptyObject(fieldState) || watched;
      !isBlurEvent && _subjects.values.next({
        name: name2,
        type: event.type,
        values: { ..._formValues }
      });
      if (shouldSkipValidation) {
        if (_proxyFormState.isValid) {
          if (props.mode === "onBlur") {
            if (isBlurEvent) {
              _updateValid();
            }
          } else {
            _updateValid();
          }
        }
        return shouldRender && _subjects.state.next({ name: name2, ...watched ? {} : fieldState });
      }
      !isBlurEvent && watched && _subjects.state.next({ ..._formState });
      if (_options.resolver) {
        const { errors } = await _executeSchema([name2]);
        _updateIsFieldValueUpdated(fieldValue);
        if (isFieldValueUpdated) {
          const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name2);
          const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name2);
          error2 = errorLookupResult.error;
          name2 = errorLookupResult.name;
          isValid = isEmptyObject(errors);
        }
      } else {
        _updateIsValidating([name2], true);
        error2 = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name2];
        _updateIsValidating([name2]);
        _updateIsFieldValueUpdated(fieldValue);
        if (isFieldValueUpdated) {
          if (error2) {
            isValid = false;
          } else if (_proxyFormState.isValid) {
            isValid = await executeBuiltInValidation(_fields, true);
          }
        }
      }
      if (isFieldValueUpdated) {
        field._f.deps && trigger(field._f.deps);
        shouldRenderByError(name2, isValid, error2, fieldState);
      }
    }
  };
  const _focusInput = (ref, key2) => {
    if (get(_formState.errors, key2) && ref.focus) {
      ref.focus();
      return 1;
    }
    return;
  };
  const trigger = async (name2, options = {}) => {
    let isValid;
    let validationResult;
    const fieldNames = convertToArrayPayload(name2);
    if (_options.resolver) {
      const errors = await executeSchemaAndUpdateState(isUndefined(name2) ? name2 : fieldNames);
      isValid = isEmptyObject(errors);
      validationResult = name2 ? !fieldNames.some((name3) => get(errors, name3)) : isValid;
    } else if (name2) {
      validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {
        const field = get(_fields, fieldName);
        return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);
      }))).every(Boolean);
      !(!validationResult && !_formState.isValid) && _updateValid();
    } else {
      validationResult = isValid = await executeBuiltInValidation(_fields);
    }
    _subjects.state.next({
      ...!isString(name2) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : { name: name2 },
      ..._options.resolver || !name2 ? { isValid } : {},
      errors: _formState.errors
    });
    options.shouldFocus && !validationResult && iterateFieldsByAction(_fields, _focusInput, name2 ? fieldNames : _names.mount);
    return validationResult;
  };
  const getValues = (fieldNames) => {
    const values = {
      ..._state.mount ? _formValues : _defaultValues
    };
    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map((name2) => get(values, name2));
  };
  const getFieldState = (name2, formState) => ({
    invalid: !!get((formState || _formState).errors, name2),
    isDirty: !!get((formState || _formState).dirtyFields, name2),
    error: get((formState || _formState).errors, name2),
    isValidating: !!get(_formState.validatingFields, name2),
    isTouched: !!get((formState || _formState).touchedFields, name2)
  });
  const clearErrors = (name2) => {
    name2 && convertToArrayPayload(name2).forEach((inputName) => unset(_formState.errors, inputName));
    _subjects.state.next({
      errors: name2 ? _formState.errors : {}
    });
  };
  const setError = (name2, error2, options) => {
    const ref = (get(_fields, name2, { _f: {} })._f || {}).ref;
    const currentError = get(_formState.errors, name2) || {};
    const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;
    set(_formState.errors, name2, {
      ...restOfErrorTree,
      ...error2,
      ref
    });
    _subjects.state.next({
      name: name2,
      errors: _formState.errors,
      isValid: false
    });
    options && options.shouldFocus && ref && ref.focus && ref.focus();
  };
  const watch = (name2, defaultValue) => isFunction(name2) ? _subjects.values.subscribe({
    next: (payload) => name2(_getWatch(void 0, defaultValue), payload)
  }) : _getWatch(name2, defaultValue, true);
  const unregister = (name2, options = {}) => {
    for (const fieldName of name2 ? convertToArrayPayload(name2) : _names.mount) {
      _names.mount.delete(fieldName);
      _names.array.delete(fieldName);
      if (!options.keepValue) {
        unset(_fields, fieldName);
        unset(_formValues, fieldName);
      }
      !options.keepError && unset(_formState.errors, fieldName);
      !options.keepDirty && unset(_formState.dirtyFields, fieldName);
      !options.keepTouched && unset(_formState.touchedFields, fieldName);
      !options.keepIsValidating && unset(_formState.validatingFields, fieldName);
      !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);
    }
    _subjects.values.next({
      values: { ..._formValues }
    });
    _subjects.state.next({
      ..._formState,
      ...!options.keepDirty ? {} : { isDirty: _getDirty() }
    });
    !options.keepIsValid && _updateValid();
  };
  const _updateDisabledField = ({ disabled, name: name2, field, fields, value: value2 }) => {
    if (isBoolean(disabled) && _state.mount || !!disabled) {
      const inputValue = disabled ? void 0 : isUndefined(value2) ? getFieldValue(field ? field._f : get(fields, name2)._f) : value2;
      set(_formValues, name2, inputValue);
      updateTouchAndDirty(name2, inputValue, false, false, true);
    }
  };
  const register = (name2, options = {}) => {
    let field = get(_fields, name2);
    const disabledIsDefined = isBoolean(options.disabled) || isBoolean(props.disabled);
    set(_fields, name2, {
      ...field || {},
      _f: {
        ...field && field._f ? field._f : { ref: { name: name2 } },
        name: name2,
        mount: true,
        ...options
      }
    });
    _names.mount.add(name2);
    if (field) {
      _updateDisabledField({
        field,
        disabled: isBoolean(options.disabled) ? options.disabled : props.disabled,
        name: name2,
        value: options.value
      });
    } else {
      updateValidAndValue(name2, true, options.value);
    }
    return {
      ...disabledIsDefined ? { disabled: options.disabled || props.disabled } : {},
      ..._options.progressive ? {
        required: !!options.required,
        min: getRuleValue(options.min),
        max: getRuleValue(options.max),
        minLength: getRuleValue(options.minLength),
        maxLength: getRuleValue(options.maxLength),
        pattern: getRuleValue(options.pattern)
      } : {},
      name: name2,
      onChange,
      onBlur: onChange,
      ref: (ref) => {
        if (ref) {
          register(name2, options);
          field = get(_fields, name2);
          const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll("input,select,textarea")[0] || ref : ref : ref;
          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
          const refs = field._f.refs || [];
          if (radioOrCheckbox ? refs.find((option) => option === fieldRef) : fieldRef === field._f.ref) {
            return;
          }
          set(_fields, name2, {
            _f: {
              ...field._f,
              ...radioOrCheckbox ? {
                refs: [
                  ...refs.filter(live),
                  fieldRef,
                  ...Array.isArray(get(_defaultValues, name2)) ? [{}] : []
                ],
                ref: { type: fieldRef.type, name: name2 }
              } : { ref: fieldRef }
            }
          });
          updateValidAndValue(name2, false, void 0, fieldRef);
        } else {
          field = get(_fields, name2, {});
          if (field._f) {
            field._f.mount = false;
          }
          (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name2) && _state.action) && _names.unMount.add(name2);
        }
      }
    };
  };
  const _focusError = () => _options.shouldFocusError && iterateFieldsByAction(_fields, _focusInput, _names.mount);
  const _disableForm = (disabled) => {
    if (isBoolean(disabled)) {
      _subjects.state.next({ disabled });
      iterateFieldsByAction(_fields, (ref, name2) => {
        const currentField = get(_fields, name2);
        if (currentField) {
          ref.disabled = currentField._f.disabled || disabled;
          if (Array.isArray(currentField._f.refs)) {
            currentField._f.refs.forEach((inputRef) => {
              inputRef.disabled = currentField._f.disabled || disabled;
            });
          }
        }
      }, 0, false);
    }
  };
  const handleSubmit = (onValid, onInvalid) => async (e) => {
    let onValidError = void 0;
    if (e) {
      e.preventDefault && e.preventDefault();
      e.persist && e.persist();
    }
    let fieldValues = cloneObject(_formValues);
    _subjects.state.next({
      isSubmitting: true
    });
    if (_options.resolver) {
      const { errors, values } = await _executeSchema();
      _formState.errors = errors;
      fieldValues = values;
    } else {
      await executeBuiltInValidation(_fields);
    }
    unset(_formState.errors, "root");
    if (isEmptyObject(_formState.errors)) {
      _subjects.state.next({
        errors: {}
      });
      try {
        await onValid(fieldValues, e);
      } catch (error2) {
        onValidError = error2;
      }
    } else {
      if (onInvalid) {
        await onInvalid({ ..._formState.errors }, e);
      }
      _focusError();
      setTimeout(_focusError);
    }
    _subjects.state.next({
      isSubmitted: true,
      isSubmitting: false,
      isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,
      submitCount: _formState.submitCount + 1,
      errors: _formState.errors
    });
    if (onValidError) {
      throw onValidError;
    }
  };
  const resetField = (name2, options = {}) => {
    if (get(_fields, name2)) {
      if (isUndefined(options.defaultValue)) {
        setValue(name2, cloneObject(get(_defaultValues, name2)));
      } else {
        setValue(name2, options.defaultValue);
        set(_defaultValues, name2, cloneObject(options.defaultValue));
      }
      if (!options.keepTouched) {
        unset(_formState.touchedFields, name2);
      }
      if (!options.keepDirty) {
        unset(_formState.dirtyFields, name2);
        _formState.isDirty = options.defaultValue ? _getDirty(name2, cloneObject(get(_defaultValues, name2))) : _getDirty();
      }
      if (!options.keepError) {
        unset(_formState.errors, name2);
        _proxyFormState.isValid && _updateValid();
      }
      _subjects.state.next({ ..._formState });
    }
  };
  const _reset = (formValues, keepStateOptions = {}) => {
    const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;
    const cloneUpdatedValues = cloneObject(updatedValues);
    const isEmptyResetValues = isEmptyObject(formValues);
    const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;
    if (!keepStateOptions.keepDefaultValues) {
      _defaultValues = updatedValues;
    }
    if (!keepStateOptions.keepValues) {
      if (keepStateOptions.keepDirtyValues) {
        const fieldsToCheck = /* @__PURE__ */ new Set([
          ..._names.mount,
          ...Object.keys(getDirtyFields(_defaultValues, _formValues))
        ]);
        for (const fieldName of Array.from(fieldsToCheck)) {
          get(_formState.dirtyFields, fieldName) ? set(values, fieldName, get(_formValues, fieldName)) : setValue(fieldName, get(values, fieldName));
        }
      } else {
        if (isWeb && isUndefined(formValues)) {
          for (const name2 of _names.mount) {
            const field = get(_fields, name2);
            if (field && field._f) {
              const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;
              if (isHTMLElement(fieldReference)) {
                const form = fieldReference.closest("form");
                if (form) {
                  form.reset();
                  break;
                }
              }
            }
          }
        }
        _fields = {};
      }
      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneObject(values);
      _subjects.array.next({
        values: { ...values }
      });
      _subjects.values.next({
        values: { ...values }
      });
    }
    _names = {
      mount: keepStateOptions.keepDirtyValues ? _names.mount : /* @__PURE__ */ new Set(),
      unMount: /* @__PURE__ */ new Set(),
      array: /* @__PURE__ */ new Set(),
      watch: /* @__PURE__ */ new Set(),
      watchAll: false,
      focus: ""
    };
    _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid || !!keepStateOptions.keepDirtyValues;
    _state.watch = !!props.shouldUnregister;
    _subjects.state.next({
      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,
      isDirty: isEmptyResetValues ? false : keepStateOptions.keepDirty ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual(formValues, _defaultValues)),
      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,
      dirtyFields: isEmptyResetValues ? {} : keepStateOptions.keepDirtyValues ? keepStateOptions.keepDefaultValues && _formValues ? getDirtyFields(_defaultValues, _formValues) : _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : keepStateOptions.keepDirty ? _formState.dirtyFields : {},
      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},
      errors: keepStateOptions.keepErrors ? _formState.errors : {},
      isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful ? _formState.isSubmitSuccessful : false,
      isSubmitting: false
    });
  };
  const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues) ? formValues(_formValues) : formValues, keepStateOptions);
  const setFocus = (name2, options = {}) => {
    const field = get(_fields, name2);
    const fieldReference = field && field._f;
    if (fieldReference) {
      const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;
      if (fieldRef.focus) {
        fieldRef.focus();
        options.shouldSelect && fieldRef.select();
      }
    }
  };
  const _updateFormState = (updatedFormState) => {
    _formState = {
      ..._formState,
      ...updatedFormState
    };
  };
  const _resetDefaultValues = () => isFunction(_options.defaultValues) && _options.defaultValues().then((values) => {
    reset(values, _options.resetOptions);
    _subjects.state.next({
      isLoading: false
    });
  });
  return {
    control: {
      register,
      unregister,
      getFieldState,
      handleSubmit,
      setError,
      _executeSchema,
      _getWatch,
      _getDirty,
      _updateValid,
      _removeUnmounted,
      _updateFieldArray,
      _updateDisabledField,
      _getFieldArray,
      _reset,
      _resetDefaultValues,
      _updateFormState,
      _disableForm,
      _subjects,
      _proxyFormState,
      _setErrors,
      get _fields() {
        return _fields;
      },
      get _formValues() {
        return _formValues;
      },
      get _state() {
        return _state;
      },
      set _state(value2) {
        _state = value2;
      },
      get _defaultValues() {
        return _defaultValues;
      },
      get _names() {
        return _names;
      },
      set _names(value2) {
        _names = value2;
      },
      get _formState() {
        return _formState;
      },
      set _formState(value2) {
        _formState = value2;
      },
      get _options() {
        return _options;
      },
      set _options(value2) {
        _options = {
          ..._options,
          ...value2
        };
      }
    },
    trigger,
    register,
    handleSubmit,
    watch,
    setValue,
    getValues,
    reset,
    resetField,
    clearErrors,
    unregister,
    setError,
    setFocus,
    getFieldState
  };
}
function useForm(props = {}) {
  const _formControl = React.useRef();
  const _values = React.useRef();
  const [formState, updateFormState] = React.useState({
    isDirty: false,
    isValidating: false,
    isLoading: isFunction(props.defaultValues),
    isSubmitted: false,
    isSubmitting: false,
    isSubmitSuccessful: false,
    isValid: false,
    submitCount: 0,
    dirtyFields: {},
    touchedFields: {},
    validatingFields: {},
    errors: props.errors || {},
    disabled: props.disabled || false,
    defaultValues: isFunction(props.defaultValues) ? void 0 : props.defaultValues
  });
  if (!_formControl.current) {
    _formControl.current = {
      ...createFormControl(props),
      formState
    };
  }
  const control2 = _formControl.current.control;
  control2._options = props;
  useSubscribe({
    subject: control2._subjects.state,
    next: (value2) => {
      if (shouldRenderFormState(value2, control2._proxyFormState, control2._updateFormState, true)) {
        updateFormState({ ...control2._formState });
      }
    }
  });
  React.useEffect(() => control2._disableForm(props.disabled), [control2, props.disabled]);
  React.useEffect(() => {
    if (control2._proxyFormState.isDirty) {
      const isDirty = control2._getDirty();
      if (isDirty !== formState.isDirty) {
        control2._subjects.state.next({
          isDirty
        });
      }
    }
  }, [control2, formState.isDirty]);
  React.useEffect(() => {
    if (props.values && !deepEqual(props.values, _values.current)) {
      control2._reset(props.values, control2._options.resetOptions);
      _values.current = props.values;
      updateFormState((state) => ({ ...state }));
    } else {
      control2._resetDefaultValues();
    }
  }, [props.values, control2]);
  React.useEffect(() => {
    if (props.errors) {
      control2._setErrors(props.errors);
    }
  }, [props.errors, control2]);
  React.useEffect(() => {
    if (!control2._state.mount) {
      control2._updateValid();
      control2._state.mount = true;
    }
    if (control2._state.watch) {
      control2._state.watch = false;
      control2._subjects.state.next({ ...control2._formState });
    }
    control2._removeUnmounted();
  });
  React.useEffect(() => {
    props.shouldUnregister && control2._subjects.values.next({
      values: control2._getWatch()
    });
  }, [props.shouldUnregister, control2]);
  React.useEffect(() => {
    if (_formControl.current) {
      _formControl.current.watch = _formControl.current.watch.bind({});
    }
  }, [formState]);
  _formControl.current.formState = getProxyFormState(formState, control2);
  return _formControl.current;
}
function RHFSelect({
  name: name2,
  native,
  maxHeight = 220,
  helperText,
  children,
  PaperPropsSx,
  label,
  onChange,
  value: value2,
  ...other
}) {
  const context = useFormContext();
  if (!context) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, ...other, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: label }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Select,
        {
          value: value2,
          sx: {
            borderRadius: "12px",
            "& .MuiOutlinedInput-notchedOutline": {
              border: "1px solid #d7d7d7"
            },
            "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
              border: "1px solid #181735"
            },
            "&:hover .MuiOutlinedInput-notchedOutline": {
              borderColor: "#181735"
            },
            "& .MuiOutlinedInput-input": {
              padding: ".5rem"
            }
          },
          onChange,
          label,
          children: React.Children.map(children, (child, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: child.props.value, children: child.props.children }, index2))
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(FormHelperText, { children: helperText })
    ] });
  }
  const { control: control2 } = context;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Controller,
    {
      name: name2,
      control: control2,
      render: ({ field, fieldState: { error: error2 } }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, ...field, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: label }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Select,
          {
            ...field,
            sx: {
              borderRadius: "12px",
              "& .MuiOutlinedInput-notchedOutline": {
                border: "1px solid #d7d7d7"
              },
              "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
                border: "1px solid #181735"
              },
              "&:hover .MuiOutlinedInput-notchedOutline": {
                borderColor: "#181735"
              },
              "& .MuiOutlinedInput-input": {
                padding: ".5rem"
              }
            },
            error: !!error2,
            label,
            ...other,
            children: React.Children.map(children, (child, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: child.props.value, children: child.props.children }, index2))
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(FormHelperText, { children: helperText })
      ] })
    }
  );
}
RHFSelect.propTypes = {
  PaperPropsSx: PropTypes.object,
  children: PropTypes.node,
  helperText: PropTypes.object,
  maxHeight: PropTypes.number,
  name: PropTypes.string,
  native: PropTypes.bool
};
function RHFMultiSelect({
  name: name2,
  chip: chip2,
  label,
  options,
  checkbox: checkbox2,
  placeholder,
  helperText,
  isOptionDisabled,
  ...other
}) {
  const { control: control2 } = useFormContext();
  const renderValues = (selectedIds) => {
    const selectedItems = options.filter(
      (item) => selectedIds.includes(item.value)
    );
    if (!selectedItems.length && placeholder) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { color: "text.disabled" }, children: placeholder });
    }
    if (chip2) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", flexWrap: "wrap", gap: 0.5 }, children: selectedItems.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx(Chip, { size: "small", label: item.label }, item.value)) });
    }
    return selectedItems.map((item) => item.label).join(", ");
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Controller,
    {
      name: name2,
      control: control2,
      render: ({ field, fieldState: { error: error2 } }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { error: !!error2, ...other, children: [
        label && /* @__PURE__ */ jsxRuntimeExports.jsxs(InputLabel, { id: name2, children: [
          " ",
          label,
          " "
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Select,
          {
            ...field,
            multiple: true,
            displayEmpty: !!placeholder,
            id: "multiple-".concat(name2),
            labelId: name2,
            label,
            renderValue: renderValues,
            children: options.map((option) => {
              const selected = field.value.includes(option.value);
              return /* @__PURE__ */ jsxRuntimeExports.jsxs(
                MenuItem,
                {
                  disabled: isOptionDisabled ? isOptionDisabled(option.value, field.value) : false,
                  value: option.value,
                  children: [
                    checkbox2 && /* @__PURE__ */ jsxRuntimeExports.jsx(Checkbox, { size: "small", disableRipple: true, checked: selected }),
                    option.label
                  ]
                },
                option.value
              );
            })
          }
        ),
        (!!error2 || helperText) && /* @__PURE__ */ jsxRuntimeExports.jsx(FormHelperText, { error: !!error2, children: error2 ? error2 == null ? void 0 : error2.message : helperText })
      ] })
    }
  );
}
RHFMultiSelect.propTypes = {
  checkbox: PropTypes.bool,
  chip: PropTypes.bool,
  helperText: PropTypes.object,
  label: PropTypes.string,
  name: PropTypes.string,
  options: PropTypes.array,
  placeholder: PropTypes.string
};
({
  helperText: PropTypes.string,
  name: PropTypes.string
});
({
  helperText: PropTypes.string,
  label: PropTypes.string,
  name: PropTypes.string,
  options: PropTypes.array,
  row: PropTypes.bool,
  spacing: PropTypes.number,
  sx: PropTypes.object
});
function FormProvider({ children, onSubmit, methods }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(FormProvider$1, { ...methods, children: /* @__PURE__ */ jsxRuntimeExports.jsx("form", { onSubmit, children }) });
}
FormProvider.propTypes = {
  children: PropTypes.node,
  methods: PropTypes.object,
  onSubmit: PropTypes.func
};
const G = styled$1(TextField)(_e || (_e = __template(["\n  input {\n    text-align: center;\n  }\n"]))), J = {
  TextFieldStyled: G
}, Q = (n) => /* @__PURE__ */ jsxRuntimeExports.jsx(J.TextFieldStyled, { ...n }), B = {
  left: "ArrowLeft",
  right: "ArrowRight",
  backspace: "Backspace",
  home: "Home",
  end: "End"
};
function U(n, l) {
  return n <= 0 ? [] : Array.from({ length: n }, l);
}
function X(n, l, f) {
  return n.map((u, x) => l === x ? f : u);
}
function P(n) {
  return n.join("");
}
function M(n, l) {
  return [...n, l];
}
function Z(n, l, f) {
  return n.reduce(
    (u, x, C) => {
      const { characters: y, restArrayMerged: d } = u;
      if (C < f)
        return {
          restArrayMerged: d,
          characters: M(y, x)
        };
      const [D, ...V] = d;
      return {
        restArrayMerged: V,
        characters: M(y, D || "")
      };
    },
    {
      restArrayMerged: l,
      characters: []
    }
  ).characters;
}
function v(n) {
  return n.split("");
}
function N(n) {
  const l = React.useRef(() => {
    throw new Error("Cannot call an event handler while rendering.");
  });
  return React.useInsertionEffect(() => {
    l.current = n;
  }), React.useCallback((...f) => {
    var _a2;
    return (_a2 = l.current) == null ? void 0 : _a2.call(l, ...f);
  }, []);
}
const ee = () => true, oe = React.forwardRef(
  (n, l) => {
    const {
      value: f = "",
      length: u = 4,
      autoFocus: x = false,
      onChange: C,
      TextFieldsProps: y,
      onComplete: d,
      validateChar: D = ee,
      className: V,
      onBlur: b,
      ...K
    } = n, j2 = React.useRef(f), k2 = N(d), I = N((e) => {
      const t = e.slice(0, u);
      return {
        isCompleted: t.length === u,
        finalValue: t
      };
    });
    React.useEffect(() => {
      const { isCompleted: e, finalValue: t } = I(
        j2.current
      );
      e && k2(t);
    }, [u, k2, I]);
    const p = U(
      u,
      (e, t) => ({
        character: f[t] || "",
        inputRef: React.createRef()
      })
    ), A = (e) => p.findIndex(({ inputRef: t }) => t.current === e), T = () => p.map(({ character: e }) => e), O = (e, t) => {
      const a = X(
        T(),
        e,
        t
      );
      return P(a);
    }, $ = (e) => {
      var _a2, _b2;
      (_b2 = (_a2 = p[e]) == null ? void 0 : _a2.inputRef.current) == null ? void 0 : _b2.focus();
    }, c = (e) => {
      var _a2, _b2;
      (_b2 = (_a2 = p[e]) == null ? void 0 : _a2.inputRef.current) == null ? void 0 : _b2.select();
    }, R = (e) => {
      e + 1 !== u && (p[e + 1].character ? c(e + 1) : $(e + 1));
    }, S = (e, t) => typeof D != "function" ? true : D(e, t), Y = (e) => {
      const t = A(e.target);
      if (t === 0 && e.target.value.length > 1) {
        const { finalValue: m, isCompleted: F } = I(
          e.target.value
        );
        C == null ? void 0 : C(m), F && (d == null ? void 0 : d(m)), c(m.length - 1);
        return;
      }
      const a = e.target.value[0] || "";
      let o = a;
      o && !S(o, t) && (o = "");
      const s = O(t, o);
      C == null ? void 0 : C(s);
      const { isCompleted: h, finalValue: i2 } = I(s);
      h && (d == null ? void 0 : d(i2)), o !== "" ? s.length - 1 < t ? c(s.length) : R(t) : a === "" && s.length <= t && c(t - 1);
    }, _2 = (e) => {
      const t = e.target, a = t.selectionStart, o = t.selectionEnd, s = A(t), h = a === 0 && o === 0;
      if (t.value === e.key)
        e.preventDefault(), R(s);
      else if (B.backspace === e.key) {
        if (!t.value)
          e.preventDefault(), c(s - 1);
        else if (h) {
          e.preventDefault();
          const i2 = O(s, "");
          C == null ? void 0 : C(i2), i2.length <= s && c(s - 1);
        }
      } else B.left === e.key ? (e.preventDefault(), c(s - 1)) : B.right === e.key ? (e.preventDefault(), c(s + 1)) : B.home === e.key ? (e.preventDefault(), c(0)) : B.end === e.key && (e.preventDefault(), c(p.length - 1));
    }, H = (e) => {
      const t = e.clipboardData.getData("text/plain"), a = e.target, o = p.findIndex(
        ({ character: r, inputRef: w }) => r === "" || w.current === a
      ), s = T(), h = Z(
        s,
        v(t),
        o
      ).map((r, w) => S(r, w) ? r : ""), i2 = P(h);
      C == null ? void 0 : C(i2);
      const { isCompleted: m, finalValue: F } = I(i2);
      m ? (d == null ? void 0 : d(F), c(u - 1)) : c(i2.length);
    }, L = (e) => {
      if (!p.some(({ inputRef: a }) => a.current === e.relatedTarget)) {
        const { isCompleted: a, finalValue: o } = I(f);
        b == null ? void 0 : b(o, a);
      }
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        display: "flex",
        gap: "20px",
        alignItems: "center",
        ref: l,
        className: "MuiOtpInput-Box ".concat(V || ""),
        ...K,
        children: p.map(({ character: e, inputRef: t }, a) => {
          const {
            onPaste: o,
            onFocus: s,
            onKeyDown: h,
            className: i2,
            onBlur: m,
            ...F
          } = typeof y == "function" ? y(a) || {} : y || {};
          return /* @__PURE__ */ jsxRuntimeExports.jsx(
            Q,
            {
              autoFocus: x ? a === 0 : false,
              autoComplete: "one-time-code",
              value: e,
              inputRef: t,
              className: "MuiOtpInput-TextField MuiOtpInput-TextField-".concat(a + 1, " ").concat(i2 || ""),
              onPaste: (r) => {
                r.preventDefault(), H(r), o == null ? void 0 : o(r);
              },
              onFocus: (r) => {
                r.preventDefault(), r.target.select(), s == null ? void 0 : s(r);
              },
              onChange: Y,
              onKeyDown: (r) => {
                _2(r), h == null ? void 0 : h(r);
              },
              onBlur: (r) => {
                m == null ? void 0 : m(r), L(r);
              },
              ...F
            },
            a
          );
        })
      }
    );
  }
);
function RHFCode({ name: name2, ...other }) {
  const { control: control2 } = useFormContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Controller,
    {
      name: name2,
      control: control2,
      render: ({ field, fieldState: { error: error2 } }) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          oe,
          {
            ...field,
            autoFocus: true,
            gap: 1.5,
            length: 6,
            TextFieldsProps: {
              error: !!error2,
              placeholder: "-"
            },
            ...other
          }
        ),
        error2 && /* @__PURE__ */ jsxRuntimeExports.jsx(FormHelperText, { sx: { px: 2 }, error: true, children: error2.message })
      ] })
    }
  );
}
RHFCode.propTypes = {
  name: PropTypes.string
};
({
  helperText: PropTypes.string,
  name: PropTypes.string
});
function RHFSwitch({ name: name2, helperText, ...other }) {
  const context = useFormContext();
  if (!context) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      FormControlLabel,
      {
        control: /* @__PURE__ */ jsxRuntimeExports.jsx(Switch, { ...other, name: name2, checked: other.checked }),
        ...other
      }
    );
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Controller,
    {
      name: name2,
      control,
      render: ({ field, fieldState: { error: error2 } }) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          FormControlLabel,
          {
            control: /* @__PURE__ */ jsxRuntimeExports.jsx(Switch, { ...field, checked: field.value }),
            ...other
          }
        ),
        (!!error2 || helperText) && /* @__PURE__ */ jsxRuntimeExports.jsx(FormHelperText, { error: !!error2, children: error2 ? error2 == null ? void 0 : error2.message : helperText })
      ] })
    }
  );
}
RHFSwitch.propTypes = {
  helperText: PropTypes.string,
  name: PropTypes.string
};
function RHFTextField({ name: name2, helperText, type, ...other }) {
  const context = useFormContext();
  if (!context) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TextField, { fullWidth: true, type, helperText, ...other });
  }
  const { control: control2 } = context;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Controller,
    {
      name: name2,
      control: control2,
      render: ({ field, fieldState: { error: error2 } }) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        TextField,
        {
          ...field,
          fullWidth: true,
          type,
          value: type === "number" && field.value === 0 ? "" : field.value,
          onChange: (event) => {
            if (type === "number") {
              field.onChange(Number(event.target.value));
            } else {
              field.onChange(event.target.value);
            }
          },
          error: !!error2,
          helperText: error2 ? error2 == null ? void 0 : error2.message : helperText,
          ...other
        }
      )
    }
  );
}
RHFTextField.propTypes = {
  helperText: PropTypes.string,
  name: PropTypes.string,
  type: PropTypes.string
};
({
  helperText: PropTypes.string,
  label: PropTypes.string,
  name: PropTypes.string,
  options: PropTypes.array,
  row: PropTypes.bool,
  spacing: PropTypes.number
});
({
  name: PropTypes.string,
  type: PropTypes.string,
  label: PropTypes.string,
  helperText: PropTypes.node,
  hiddenLabel: PropTypes.bool,
  placeholder: PropTypes.string
});
const SurveyClone = ({
  open,
  onClose,
  survey,
  importSurvey = false,
  onSurveyCloned
}) => {
  const surveyService = useService("survey");
  const { t } = useTranslation("manage");
  const [newSurveyName, setNewSurveyName] = reactExports.useState("");
  const [fileToImport, setFileToImport] = reactExports.useState(null);
  const [newSurveyNameError, setNewSurveyNameError] = reactExports.useState("");
  const [fileMissing, setFileMissing] = reactExports.useState(false);
  const dispatch = useDispatch();
  const onSurveyNameChanged = (e) => {
    setNewSurveyName(e.target.value);
    setNewSurveyNameError("");
    setFileMissing(false);
  };
  const validate = () => {
    setNewSurveyNameError("");
    if (newSurveyName.length == 0) {
      setNewSurveyNameError(t("survey_required"));
      return false;
    }
    if (importSurvey && !fileToImport) {
      setFileMissing(true);
      return false;
    }
    return true;
  };
  const handleFileUpload = (event) => {
    const files = event.target.files;
    if (files) {
      let file = event.target.files[0];
      setFileToImport(file);
      setFileMissing("");
    }
  };
  const cloneSurvey = () => {
    if (!validate()) {
      return;
    }
    dispatch(setLoading(true));
    const handleSuccess = (surveyName) => {
      onClose(true);
      setNewSurveyName("");
      if (onSurveyCloned) {
        onSurveyCloned(surveyName);
      }
    };
    if (importSurvey) {
      surveyService.importSurvey(fileToImport, newSurveyName).then(() => {
        handleSuccess(newSurveyName);
      }).catch((processedError) => {
        if (processedError.name === PROCESSED_ERRORS.DUPLICATE_SURVEY_NAME.name) {
          setNewSurveyNameError(t("processed_errors.".concat(processedError.name)));
        }
      }).finally(() => {
        dispatch(setLoading(false));
      });
    } else if (survey.example) {
      surveyService.cloneGuestSurvey(survey.id, { name: newSurveyName }).then(() => {
        handleSuccess(newSurveyName);
      }).catch((processedError) => {
        if (processedError.name === PROCESSED_ERRORS.DUPLICATE_SURVEY_NAME.name) {
          setNewSurveyNameError(t("processed_errors.".concat(processedError.name)));
        }
      }).finally(() => {
        dispatch(setLoading(false));
      });
    } else {
      surveyService.cloneSurvey(survey.id, { name: newSurveyName }).then(() => {
        handleSuccess(newSurveyName);
      }).catch((processedError) => {
        if (processedError.name === PROCESSED_ERRORS.DUPLICATE_SURVEY_NAME.name) {
          setNewSurveyNameError(t("processed_errors.".concat(processedError.name)));
        }
      }).finally(() => {
        dispatch(setLoading(false));
      });
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    Modal,
    {
      sx: {
        ".MuiBackdrop-root": {
          backgroundColor: "rgba(0, 0, 0, 0.3)"
        }
      },
      open,
      onClose: () => onClose(false),
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: styles.wrapper, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { fontWeight: 600, variant: "h5", children: t("edit_survey.clone_survey") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          RHFTextField,
          {
            error: newSurveyNameError.length > 0,
            sx: { minWidth: "400px", mt: 2 },
            required: true,
            value: newSurveyName,
            label: t("label.new_survey_name"),
            onChange: onSurveyNameChanged,
            onKeyDown: (e) => {
              if (e.key === "Enter") {
                e.preventDefault();
                cloneSurvey();
              }
            },
            helperText: newSurveyNameError
          }
        ),
        importSurvey && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles.upload, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Button, { variant: "outlined", component: "label", children: [
            "Upload Zip Folder",
            /* @__PURE__ */ jsxRuntimeExports.jsx(FileUpload, {}),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                hidden: true,
                id: "zip-upload",
                accept: ".zip",
                multiple: true,
                type: "file",
                onChange: (event) => handleFileUpload(event)
              }
            )
          ] }),
          fileMissing && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Typography,
            {
              variant: "caption",
              color: "error",
              sx: { margin: "4px" },
              children: t("file_required")
            }
          ),
          fileToImport && /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { sx: { margin: "4px" }, children: fileToImport.name })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: styles.action, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              size: "medium",
              color: "primary",
              variant: "secondary",
              onClick: () => onClose(false),
              children: t("action_btn.cancel")
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              size: "medium",
              color: "primary",
              variant: "contained",
              type: "submit",
              onClick: cloneSurvey,
              sx: { ml: 1 },
              children: t("action_btn.save")
            }
          )
        ] })
      ] })
    }
  ) });
};
function PreviewSurvey({ guest = false }) {
  const navigate = useNavigate();
  const { t } = useTranslation("run");
  const [searchParams] = useSearchParams();
  const [previewMode, setPreviewMode] = reactExports.useState(
    searchParams.get("mode") || "online"
  );
  const [lang, setLang] = reactExports.useState(
    searchParams.get("lang")
  );
  const surveyId = getparam(useParams(), "surveyId");
  const surveyModel = {
    id: surveyId,
    example: true
  };
  const withEmbeddedParam = (surveyId2, previewMode2, lang2) => {
    return (guest ? routes.iframePreviewGuestSurvey : routes.iframePreviewSurvey).replace(":surveyId", surveyId2) + "?mode=" + previewMode2 + (lang2 ? "&lang=" + lang2 : "");
  };
  const handleChange = (event, newValue) => {
    setPreviewMode(newValue);
  };
  const [openCloneModal, setOpenCloneModal] = reactExports.useState(false);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        mb: 2,
        onClick: () => navigate(-1),
        sx: { position: "absolute", left: "8px", top: "8px", zIndex: "1" },
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Chip,
          {
            label: t("preview"),
            color: "primary",
            onDelete: () => navigate(-1),
            deleteIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Close$1, {}),
            style: { marginLeft: "auto", marginRight: "auto" }
          }
        )
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      SurveyClone,
      {
        open: openCloneModal,
        onClose: (cloned) => {
          setOpenCloneModal(false);
          if (cloned) {
            navigate(-1);
          }
        },
        survey: surveyModel
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Box,
      {
        display: "flex",
        position: "relative",
        width: "100%",
        justifyContent: "center",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Tabs,
            {
              value: previewMode,
              onChange: handleChange,
              "aria-label": "Preview mode tabs",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Tab,
                  {
                    value: PREVIEW_MODE.ONLINE,
                    label: /* @__PURE__ */ jsxRuntimeExports.jsx(SurveyIcon, { name: "pc" })
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Tab,
                  {
                    value: PREVIEW_MODE.ONLINE_PHONE,
                    label: /* @__PURE__ */ jsxRuntimeExports.jsx(SurveyIcon, { name: "phone" })
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Tab,
                  {
                    value: PREVIEW_MODE.OFFLINE,
                    label: /* @__PURE__ */ jsxRuntimeExports.jsx(SurveyIcon, { name: "offline" })
                  }
                )
              ]
            }
          ),
          guest && isSurveyAdmin() && /* @__PURE__ */ jsxRuntimeExports.jsx(
            IconButton,
            {
              className: styles$1.iconButton,
              "aria-label": "stop",
              size: "large",
              onClick: () => setOpenCloneModal(true),
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(default_1, { color: "primary" })
            }
          )
        ]
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        className: styles$1.container,
        style: {
          backgroundColor: BG_COLOR
        },
        children: previewMode == "online" ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { height: "calc(100vh - 48px)" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "iframe",
          {
            src: withEmbeddedParam(surveyId, previewMode, lang),
            className: styles$1.onlinePreview,
            style: { width: "100%", height: "100%" }
          }
        ) }) : previewMode == "online-phone" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$1.wrapperMob, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: "/phone-android.png", className: styles$1.phoneBg }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "iframe",
            {
              src: withEmbeddedParam(surveyId, previewMode, lang),
              className: styles$1.offlinePreview
            }
          )
        ] }) }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$1.wrapperMob, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: "/phone-android.png", className: styles$1.phoneBg }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "iframe",
            {
              src: withEmbeddedParam(surveyId, previewMode, lang),
              className: styles$1.offlinePreview
            }
          )
        ] })
      }
    )
  ] });
}
const PreviewSurvey$1 = React.memo(PreviewSurvey);
const Page404 = reactExports.lazy(() => __vitePreload(() => import("./index-D0_MXkK0.js"), true ? __vite__mapDeps([44,1,2,45]) : void 0));
const ForgotPasswordView = reactExports.lazy(() => __vitePreload(() => import("./index-CVvzllyt.js"), true ? __vite__mapDeps([46,1,2,47,4,5,48,49,50,13,14,7,15,10,16,17,51]) : void 0));
const ResetPasswordView = reactExports.lazy(() => __vitePreload(() => import("./index-DkwXoLjM.js"), true ? __vite__mapDeps([52,1,2,47,4,5,48,42,25,50,13,14,7,15,10,16,17]) : void 0));
const Dashboard = reactExports.lazy(() => __vitePreload(() => import("./index-CsEUyNpt.js"), true ? __vite__mapDeps([53,1,2,4,5,32,33,6,23,3,28,16,49,41,54,55,47,26,11,7,9,10,12,13,14,15,17,56]) : void 0));
const LoginView = reactExports.lazy(() => __vitePreload(() => import("./index-Dbypx-LI.js"), true ? __vite__mapDeps([57,1,2,47,4,5,42,48,25,50,13,14,7,15,10,16,17]) : void 0));
const ManageUsers = reactExports.lazy(() => __vitePreload(() => import("./index-D3A8ta7E.js"), true ? __vite__mapDeps([58,1,2,4,5,47,7,41,8,9,10,55,13,14,15,16,17,59]) : void 0));
const ProfileView = reactExports.lazy(() => __vitePreload(() => import("./index-C21aYqNv.js"), true ? __vite__mapDeps([60,1,2,47,4,5,42,50,27,25,13,14,7,15,10,16,17,61]) : void 0));
const CreateSurvey = reactExports.lazy(() => __vitePreload(() => import("./index-BTbhsMIE.js"), true ? __vite__mapDeps([62,1,2,4,5,6,26,16,21,22,23,24,7,25,41,63,13,14,15,10,17,64]) : void 0));
const RunSurvey = reactExports.lazy(() => __vitePreload(() => import("./index-DAoruMCC.js").then((n) => n.i), true ? __vite__mapDeps([65,1,2,4,5,31,28,54,41,12,66]) : void 0));
function Web() {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Routes, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.runSurvey,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Provider, { store: runStore, children: /* @__PURE__ */ jsxRuntimeExports.jsx(RunSurveyWrapper, {}) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.resumeSurvey,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Provider, { store: runStore, children: /* @__PURE__ */ jsxRuntimeExports.jsx(RunSurveyWrapper, { resume: true }) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.iframePreviewSurvey,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Provider, { store: runStore, children: /* @__PURE__ */ jsxRuntimeExports.jsx(PreviewSurveyWrapper, {}) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.iframePreviewGuestSurvey,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Provider, { store: runStore, children: /* @__PURE__ */ jsxRuntimeExports.jsx(PreviewGuestSurveyWrapper, {}) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.designSurvey,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          PrivateDesignSurvey,
          {
            landingPage: MANAGE_SURVEY_LANDING_PAGES.DESIGN
          }
        ) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.preview,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { showHeader: false, children: /* @__PURE__ */ jsxRuntimeExports.jsx(PrivatePreviewSurvey, {}) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.guestPreview,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(PreviewSurvey$1, { guest: true }) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.editSurvey,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          PrivateDesignSurvey,
          {
            landingPage: MANAGE_SURVEY_LANDING_PAGES.SETTINGS
          }
        ) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.responses,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          PrivateDesignSurvey,
          {
            landingPage: MANAGE_SURVEY_LANDING_PAGES.RESPONSES
          }
        ) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.language,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          PrivateDesignSurvey,
          {
            landingPage: MANAGE_SURVEY_LANDING_PAGES.LANGUAGE
          }
        ) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.theme,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          PrivateDesignSurvey,
          {
            landingPage: MANAGE_SURVEY_LANDING_PAGES.THEME
          }
        ) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.manageUsers,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(PrivateManageUsers, { roles: [ROLES.SUPER_ADMIN], children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManageUsers, {}) }) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.profile,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(PrivateComponent, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ProfileView, {}) }) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.createSurvey,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(PrivateManageUsers, { roles: [ROLES.SUPER_ADMIN, ROLES.SUPER_ADMIN], children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(CreateSurvey, {}) }) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.page404,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Page404, {}) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.dashboard,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(PrivateComponent, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Dashboard, {}) }) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.login,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(AuthIllustrationLayout, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(LoginView, {}) }) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.forgotPassword,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(AuthIllustrationLayout, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ForgotPasswordView, {}) }) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.resetPassword,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResetPasswordView, {}) }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: routes.confirmNewUser,
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingIndicator, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManagePageWrapper, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResetPasswordView, { confirmNewUser: true }) }) })
      }
    )
  ] });
}
const PrivateDesignSurvey = ({ landingPage }) => {
  const params = useParams();
  sessionStorage.setItem("surveyId", params.surveyId);
  sessionStorage.setItem("isGuest", "0");
  const location = useLocation();
  return TokenService.isAuthenticated() ? /* @__PURE__ */ jsxRuntimeExports.jsx(ManageSurvey$1, { landingPage }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/login", replace: true, state: { from: location } });
};
const PrivatePreviewSurvey = () => {
  const params = useParams();
  sessionStorage.setItem("surveyId", params.surveyId);
  sessionStorage.setItem("isGuest", "0");
  const location = useLocation();
  return TokenService.isAuthenticated() ? /* @__PURE__ */ jsxRuntimeExports.jsx(PreviewSurvey$1, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/login", replace: true, state: { from: location } });
};
const PrivateComponent = ({ children }) => {
  const location = useLocation();
  return TokenService.isAuthenticated() ? children : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/login", replace: true, state: { from: location } });
};
const PrivateManageUsers = ({ roles, children }) => {
  const location = useLocation();
  const user = TokenService.getUser();
  let hasCorrectRole = false;
  user.roles.forEach((el) => {
    if (roles.indexOf(el) > -1) {
      hasCorrectRole = true;
    }
  });
  if (!hasCorrectRole) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/", replace: true });
  }
  return TokenService.isAuthenticated() ? children : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/login", replace: true, state: { from: location } });
};
const RunSurveyWrapper = ({ resume = false }) => {
  const surveyId = getparam(useParams(), "surveyId");
  const responseId = getparam(useParams(), "responseId");
  sessionStorage.setItem("surveyId", surveyId);
  sessionStorage.setItem("isGuest", "0");
  return /* @__PURE__ */ jsxRuntimeExports.jsx(RunSurvey, { responseId, resume });
};
const PreviewSurveyWrapper = () => {
  const surveyId = getparam(useParams(), "surveyId");
  sessionStorage.setItem("surveyId", surveyId);
  sessionStorage.setItem("isGuest", "0");
  const location = useLocation();
  const searchParams = new URLSearchParams(location.search);
  const mode = searchParams.get("mode") || "online";
  return /* @__PURE__ */ jsxRuntimeExports.jsx(RunSurvey, { preview: true, mode });
};
const PreviewGuestSurveyWrapper = () => {
  const surveyId = getparam(useParams(), "surveyId");
  sessionStorage.setItem("surveyId", surveyId);
  sessionStorage.setItem("isGuest", "1");
  const location = useLocation();
  const searchParams = new URLSearchParams(location.search);
  const mode = searchParams.get("mode") || "online";
  return /* @__PURE__ */ jsxRuntimeExports.jsx(RunSurvey, { preview: true, guest: true, mode });
};
const Web$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Web
}, Symbol.toStringTag, { value: "Module" }));
export {
  Alert as A,
  getAccordionSummaryUtilityClass as B,
  CustomTooltip as C,
  DialogTitle as D,
  Edit as E,
  FormProvider as F,
  autocompleteClasses as G,
  ClearIcon as H,
  Iconify as I,
  Chip as J,
  KeyboardArrowDown as K,
  getAutocompleteUtilityClass as L,
  buttonGroupClasses as M,
  getButtonGroupUtilityClass as N,
  fabClasses as O,
  getFabUtilityClass as P,
  sliderClasses as Q,
  RHFTextField as R,
  SavingSurvey as S,
  getSliderUtilityClass as T,
  Tooltip as U,
  Switch as V,
  ListItemIcon as W,
  merge as X,
  ManageLanguages as Y,
  Web$1 as Z,
  Snackbar as a,
  badgeClasses as b,
  default_1 as c,
  default_1$2 as d,
  RHFSelect as e,
  FileUpload as f,
  getBadgeUtilityClass as g,
  SurveyClone as h,
  isSurveyAdmin as i,
  ROLES as j,
  getLoadingButtonUtilityClass as k,
  loadingButtonClasses as l,
  CircularProgress as m,
  get as n,
  appendErrors as o,
  useWatch as p,
  RHFMultiSelect as q,
  RHFCode as r,
  set as s,
  RHFSwitch as t,
  useForm as u,
  default_1$3 as v,
  accordionClasses as w,
  useSlot as x,
  getAccordionUtilityClass as y,
  accordionSummaryClasses as z
};
//# sourceMappingURL=Web-BJ9GQG1r.js.map
