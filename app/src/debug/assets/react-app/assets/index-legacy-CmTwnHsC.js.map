{"version":3,"file":"index-legacy-CmTwnHsC.js","sources":["../../src/components/common/SuccessMessage/SuccessMessage.jsx","../../src/pages/manage/ForgotPassword/index.jsx"],"sourcesContent":["import React from \"react\";\nimport { Box, Typography, Button } from \"@mui/material\";\nimport { Check } from \"@mui/icons-material\";\nimport { useNavigate } from \"react-router-dom\";\nimport styles from \"./SuccessMessage.module.css\";\nconst SuccessMessage = ({ message, t }) => {\n  const navigate = useNavigate();\n  return (\n    <Box className={styles.successText}>\n      <Box className={styles.iconContainer}>\n        <Check\n          sx={{\n            fontSize: \"40px\",\n            color: \"#32CD32\",\n            stroke: \"#32CD32\",\n            strokeWidth: 1,\n          }}\n        />\n      </Box>\n      <Box>\n        <Typography variant=\"h4\" color=\"primary\">\n          {t(\"email.check\")}\n        </Typography>\n        <Typography variant=\"body1\" mt={1} color=\"textSecondary\">\n          {t(`${message}`)}\n        </Typography>\n      </Box>\n      <Button\n        onClick={() => {\n          navigate(\"/login\");\n        }}\n        fullWidth\n        size=\"large\"\n        color=\"primary\"\n        variant=\"contained\"\n      >\n        {t(\"login.login\")}\n      </Button>\n    </Box>\n  );\n};\n\nexport default SuccessMessage;\n","import * as Yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\nimport Link from \"@mui/material/Link\";\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\n\nimport RouterLink from \"~/components/router/router-link\";\nimport Iconify from \"~/components/iconify\";\nimport Image from \"~/components/image/image\";\nimport FormProvider, { RHFTextField } from \"../../../components/hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setLoading } from \"~/state/edit/editState\";\nimport { routes } from \"~/routes\";\nimport { useNavigate } from \"react-router-dom\";\nimport SuccessMessage from \"~/components/common/SuccessMessage/SuccessMessage\";\nimport { useService } from \"~/hooks/use-service\";\n// ----------------------------------------------------------------------\n\nexport default function ForgotPasswordView() {\n  const authService = useService(\"auth\");\n\n  const { t } = useTranslation(\"manage\");\n  const [isSuccess, setSuccess] = useState(false);\n  const dispatch = useDispatch();\n  const ForgotPasswordSchema = Yup.object().shape({\n    email: Yup.string()\n      .required(t(\"email_required\"))\n      .matches(\n        /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/i,\n        t(\"error.invalid_email\")\n      ),\n  });\n\n  const defaultValues = {\n    email: \"\",\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(ForgotPasswordSchema),\n    defaultValues,\n  });\n\n  const {\n    reset,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      dispatch(setLoading(true));\n      await authService.forgotPassword(data.email);\n      setSuccess(true);\n    } catch (e) {\n    } finally {\n      dispatch(setLoading(false));\n    }\n  });\n\n  return (\n    <>\n      {isSuccess ? (\n        <SuccessMessage t={t} message=\"forgot_password.success\" />\n      ) : (\n        <Stack sx={{ textAlign: \"center\" }}>\n          <Image\n            alt=\"reset password\"\n            src=\"/ic_lock_password.svg\"\n            sx={{ mb: 5, width: 96, height: 96, mx: \"auto\" }}\n          />\n\n          <Typography variant=\"h3\" paragraph>\n            {t(\"forgot_password.title\")}\n          </Typography>\n\n          <Typography variant=\"body2\" color=\"textSecondary\" mb={5}>\n            {t(\"forgot_password.helper_text\")}\n          </Typography>\n\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n            <RHFTextField\n              name=\"email\"\n              hiddenLabel\n              placeholder={t(\"label.email\")}\n            />\n\n            <LoadingButton\n              fullWidth\n              size=\"large\"\n              color=\"primary\"\n              type=\"submit\"\n              variant=\"contained\"\n              loading={isSubmitting}\n              sx={{ mt: 2.5 }}\n            >\n              {t(\"forgot_password.send\")}\n            </LoadingButton>\n          </FormProvider>\n\n          <Link\n            component={RouterLink}\n            href={routes.login}\n            color=\"inherit\"\n            variant=\"subtitle2\"\n            sx={{\n              mt: 3,\n              mx: \"auto\",\n              alignItems: \"center\",\n              display: \"inline-flex\",\n            }}\n          >\n            <Iconify icon=\"carbon:chevron-left\" width={16} sx={{ mr: 1 }} />\n            {t(\"forgot_password.return_to_signin\")}\n          </Link>\n        </Stack>\n      )}\n    </>\n  );\n}\n"],"names":["SuccessMessage","message","t","navigate","useNavigate","jsxs","Box","className","styles","successText","children","jsx","iconContainer","Check","sx","fontSize","color","stroke","strokeWidth","Typography","variant","mt","Button","onClick","fullWidth","size","ForgotPasswordView","authService","useService","_useTranslation","useTranslation","_reactExports$useStat","useState","_reactExports$useStat2","_slicedToArray","isSuccess","setSuccess","dispatch","useDispatch","ForgotPasswordSchema","Yup.object","shape","email","Yup.string","required","matches","defaultValues","methods","useForm","resolver","yupResolver","reset","handleSubmit","isSubmitting","formState","onSubmit","_ref","_asyncToGenerator","data","setLoading","forgotPassword","e","_x","apply","arguments","Fragment","Stack","textAlign","Image","alt","src","mb","width","height","mx","paragraph","FormProvider","RHFTextField","name","hiddenLabel","placeholder","LoadingButton","type","loading","Link","component","RouterLink","href","routes","login","alignItems","display","Iconify","icon","mr"],"mappings":"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"}