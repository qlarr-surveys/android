{"version":3,"file":"Array-legacy-BcI0qlIK.js","sources":["../../src/components/Questions/SCQArray/Array.jsx"],"sourcesContent":["import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { useTheme } from \"@emotion/react\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { Checkbox, Radio } from \"@mui/material\";\nimport { valueChange } from \"~/state/runState\";\nimport Validation from \"~/components/run/Validation\";\nimport { columnMinWidth } from \"~/utils/design/utils\";\n\nfunction Array(props) {\n  const theme = useTheme();\n  let columns = props.component.answers.filter(\n    (answer) => answer.type == \"column\"\n  );\n  let rows = props.component.answers.filter((answer) => answer.type == \"row\");\n  const { header, rowLabel } = columnMinWidth(null, props.component);\n\n  return (\n    <TableContainer\n      sx={{\n        overflowX: \"auto\",\n        maxWidth: \"100%\",\n      }}\n    >\n      <Table\n        sx={{\n          tableLayout: \"fixed\",\n        }}\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell\n              key=\"content\"\n              sx={{\n                padding: \"2px\",\n                width: rowLabel + \"px\",\n              }}\n            ></TableCell>\n            {columns.map((option) => {\n              return (\n                <TableCell\n                  sx={{\n                    fontFamily: theme.textStyles.text.font,\n                    color: theme.textStyles.text.color,\n                    padding: \"2px\",\n                    fontSize: theme.textStyles.text.size,\n                    width: header + \"px\",\n                  }}\n                  key={option.qualifiedCode}\n                >\n                  {option.content?.label}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((answer) => {\n            return (\n              <React.Fragment key={answer.qualifiedCode}>\n                <ArrayRow\n                  type={props.component.type}\n                  key={answer.qualifiedCode}\n                  answer={answer}\n                  choices={columns}\n                />\n              </React.Fragment>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction ArrayRow(props) {\n  const theme = useTheme();\n  const state = useSelector((state) => {\n    return {\n      show_errors: state.runState.values.Survey.show_errors,\n      validity: state.runState.values[props.answer.qualifiedCode]?.validity,\n      value: state.runState.values[props.answer.qualifiedCode]?.value,\n      relevance: state.runState.values[props.answer.qualifiedCode]?.relevance,\n    };\n  }, shallowEqual);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    if (props.type === \"scq_array\") {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n          value: event.target.value,\n        })\n      );\n    } else if (props.type === \"mcq_array\") {\n      let currentValue = state.value || []\n      let value = [...currentValue];\n      if (event.target.checked) {\n        value.push(event.target.value);\n      } else {\n        value = value.filter((el) => el !== event.target.value);\n      }\n      dispatch(\n        valueChange({\n          componentCode: event.target.name,\n          value: value,\n        })\n      );\n    }\n  };\n\n  const invalid =\n    (state.show_errors || state.isDirty) && state.validity === false;\n\n  return typeof state.relevance === \"undefined\" || state.relevance ? (\n    <React.Fragment>\n      <TableRow key={props.answer.code}>\n        <TableCell\n          sx={{\n            fontFamily: theme.textStyles.text.font,\n            color: theme.textStyles.text.color,\n            fontSize: theme.textStyles.text.size,\n            borderBottom: invalid ? \"0\" : \"\",\n            padding: \"2px\",\n            wordWrap: \"break-word\",\n          }}\n        >\n          {props.answer.content?.label}\n        </TableCell>\n        {props.choices.map((option) => {\n          return (\n            <TableCell\n              key={option.code}\n              component=\"th\"\n              scope=\"row\"\n              sx={{\n                borderBottom: invalid ? \"0\" : \"\",\n                padding: \"2px\",\n              }}\n            >\n              {props.type === \"scq_array\" ? (\n                <Radio\n                name={props.answer.qualifiedCode}\n                onChange={handleChange}\n                checked={state.value === option.code}\n                value={option.code}\n              />\n              ) : (\n                <Checkbox\n                  name={props.answer.qualifiedCode}\n                  onChange={handleChange}\n                  checked={(state.value || []).indexOf(option.code) > -1}\n                  value={option.code}\n                />\n              )}\n            </TableCell>\n          );\n        })}\n      </TableRow>\n      {invalid ? (\n        <TableRow>\n          <TableCell\n            sx={{ padding: \"8px\" }}\n            colSpan={props.choices ? props.choices.length + 1 : 1}\n          >\n            <Validation component={props.answer} />\n          </TableCell>\n        </TableRow>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  ) : (\n    \"\"\n  );\n}\n\nexport default Array;\n"],"names":["Array","props","theme","useTheme","columns","component","answers","filter","answer","type","rows","_columnMinWidth","columnMinWidth","header","rowLabel","jsx","TableContainer","sx","overflowX","maxWidth","children","jsxs","Table","tableLayout","TableHead","TableRow","TableCell","padding","width","map","option","_option$content","fontFamily","textStyles","text","font","color","fontSize","size","content","label","qualifiedCode","TableBody","React","Fragment","ArrayRow","choices","_props$answer$content","state","useSelector","_state2$runState$valu","_state2$runState$valu2","_state2$runState$valu3","show_errors","runState","values","Survey","validity","value","relevance","shallowEqual","dispatch","useDispatch","handleChange","event","valueChange","componentCode","target","name","currentValue","checked","push","el","invalid","isDirty","borderBottom","wordWrap","scope","Radio","onChange","code","Checkbox","indexOf","colSpan","length","Validation"],"mappings":"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"}