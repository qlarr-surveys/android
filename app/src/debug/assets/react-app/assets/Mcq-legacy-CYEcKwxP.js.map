{"version":3,"file":"Mcq-legacy-CYEcKwxP.js","sources":["../../src/components/Questions/Mcq/MCQAnswer.jsx","../../src/components/Questions/Mcq/Mcq.jsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\n\nimport Checkbox from \"@mui/material/Checkbox\";\nimport { alpha, useTheme } from \"@mui/material/styles\";\nimport { valueChange } from \"~/state/runState\";\nimport { setDirty } from \"~/state/templateState\";\nimport Content from \"~/components/run/Content\";\n\nfunction McqAnswer(props) {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n\n  const disabled =\n    (props.Answer.type !== \"all\" && props.allSelected) ||\n    (props.Answer.type !== \"none\" && props.noneSelected);\n\n  const relevance = useSelector((state) => {\n    let answerState = state.runState.values[props.Answer?.qualifiedCode];\n    return (\n      typeof answerState?.relevance == \"undefined\" || answerState.relevance\n    );\n  }, shallowEqual);\n\n\n  const handleChange = (event) => {\n    let value = [...props.parentValue];\n    if (event.target.checked && props.Answer.code === \"Aall\") {\n      value = props.allCodes;\n    } else if (!event.target.checked && props.Answer.code === \"Aall\") {\n      value = [];\n    } else if (event.target.checked && props.Answer.code === \"Anone\") {\n      value = [\"Anone\"];\n    } else if (event.target.checked) {\n      value.push(props.Answer.code);\n    } else {\n      value = value.filter((el) => el !== props.Answer.code);\n    }\n    console.log(value);\n    dispatch(\n      valueChange({\n        componentCode: props.parentCode,\n        value: value,\n      })\n    );\n    dispatch(setDirty(event.target.name));\n    dispatch(setDirty(props.parentCode));\n  };\n\n  return relevance ? (\n    <FormControlLabel\n      control={\n        <Checkbox\n          checked={\n            props.parentValue.indexOf(props.Answer.code) > -1 ||\n            (props.Answer.code === \"Aall\" && props.allSelected)\n          }\n          onChange={handleChange}\n          disabled={disabled}\n          name={props.Answer.qualifiedCode}\n          sx={{\n            color: theme.textStyles.text.color,\n          }}\n        />\n      }\n      label={\n        <Content\n          elementCode={props.Answer.code}\n          fontFamily={theme.textStyles.text.font}\n          color={alpha(theme.textStyles.text.color, disabled ? 0.5 : 1)}\n          fontSize={theme.textStyles.text.size}\n          name=\"label\"\n          lang={props.lang}\n          content={props.Answer.content?.label}\n        />\n      }\n    />\n  ) : (\n    \"\"\n  );\n}\n\nexport default memo(McqAnswer);\n","import FormControl from \"@mui/material/FormControl\";\nimport FormGroup from \"@mui/material/RadioGroup\";\n\nimport React, { memo, useRef } from \"react\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport TextField from \"@mui/material/TextField\";\n\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Validation from \"~/components/run/Validation\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { valueChange } from \"~/state/runState\";\nimport { setDirty } from \"~/state/templateState\";\nimport MCQAnswer from \"./MCQAnswer\";\n\nfunction MCQ(props) {\n  const parentValue = useSelector((state) => {\n    return state.runState.values[props.component.qualifiedCode].value || [];\n  }, shallowEqual);\n  const hasAll = props.component.answers\n  .some((answer) => answer.type == \"all\");\n  const allCodes = props.component.answers\n    .filter(\n      (answer) =>\n        answer.type !== \"all\" &&\n        answer.type !== \"none\" &&\n        answer.type !== \"other\"\n    )\n    .map((answer) => answer.code);\n  const allSelected = hasAll && allCodes.every((code) => parentValue.indexOf(code) > -1);\n  const noneSelected = parentValue.indexOf(\"Anone\") > -1;\n\n  return (\n    <FormControl component=\"fieldset\">\n      <FormGroup>\n        {props.component.answers.map((option) => {\n          if (option.type === \"other\") {\n            return (\n              <McqAnswerOther\n                disabled={allSelected || noneSelected}\n                key={option.qualifiedCode}\n                allSelected={allSelected}\n                noneSelected={noneSelected}\n                Answer={option}\n                parentCode={props.component.qualifiedCode}\n              />\n            );\n          } else {\n            return (\n              <MCQAnswer\n                lang={props.lang}\n                parentValue={parentValue}\n                key={option.qualifiedCode}\n                Answer={option}\n                allCodes={allCodes}\n                parentCode={props.component.qualifiedCode}\n                allSelected={allSelected}\n                noneSelected={noneSelected}\n              />\n            );\n          }\n        })}\n      </FormGroup>\n    </FormControl>\n  );\n}\n\nfunction McqAnswerOther(props) {\n  const theme = useTheme();\n  const nestedTextChild = props.Answer.answers[0];\n  const parentValue = useSelector((state) => {\n    return state.runState.values[props.parentCode].value || [];\n  }, shallowEqual);\n  const isSelected = parentValue.indexOf(props.Answer.code) > -1;\n  const state = useSelector((state) => {\n    let own = state.runState.values[props.Answer.qualifiedCode];\n    let textChild = state.runState.values[nestedTextChild.qualifiedCode];\n    let show_errors = state.runState.values.Survey.show_errors;\n    let isChildDirty = state.templateState[nestedTextChild.qualifiedCode];\n    return {\n      showAnswer: typeof own?.relevance === \"undefined\" || own.relevance,\n      childInvalid:\n        (show_errors || isChildDirty) &&\n        textChild?.relevance === true &&\n        textChild?.validity === false,\n      textValue: textChild?.value || \"\",\n      textRelevance: state.textChild?.relevance,\n    };\n  }, shallowEqual);\n\n  const dispatch = useDispatch();\n  const onButtonClick = (event) => {\n    let value = [...parentValue];\n    if (event.target.checked) {\n      value.push(props.Answer.code);\n    } else {\n      value = value.filter((el) => el !== props.Answer.code);\n    }\n    dispatch(\n      valueChange({\n        componentCode: props.parentCode,\n        value: value,\n      })\n    );\n    dispatch(setDirty(event.target.name));\n    dispatch(setDirty(props.parentCode));\n    if (event.target.checked) {\n      textInput.current.focus();\n    }\n  };\n  const handleChange = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n        value: event.target.value,\n      })\n    );\n  };\n\n  const textInput = useRef();\n  const handleFocus = (event) => {\n    let value = [...parentValue];\n    if (value.indexOf(props.Answer.code) == -1) {\n      value.push(props.Answer.code);\n      dispatch(valueChange({ componentCode: props.parentCode, value: value }));\n    }\n  };\n\n  const lostFocus = (event) => {\n    dispatch(setDirty(event.target.name));\n  };\n\n  const showAnswer = () => {\n    return (\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={isSelected}\n            disabled={props.disabled}\n            onChange={onButtonClick}\n            name={props.Answer.qualifiedCode}\n            sx={{\n              color: theme.textStyles.text.color,\n            }}\n          />\n        }\n        label={\n          <div >\n            <TextField\n              variant=\"standard\"\n              required={\n                state.textRelevance && nestedTextChild.validation?.required\n              }\n              inputRef={textInput}\n              id={nestedTextChild.qualifiedCode}\n              name={nestedTextChild.qualifiedCode}\n              disabled={props.disabled}\n              label={props.Answer.content?.label}\n              onChange={handleChange}\n              onFocus={handleFocus}\n              onBlur={lostFocus}\n              sx={{\n                label: { color: theme.textStyles.text.color },\n              }}\n              value={state.textValue}\n              InputProps={{\n                sx: {\n                  fontFamily: theme.textStyles.text.font,\n                  color: theme.textStyles.text.color,\n                  fontSize: theme.textStyles.text.size,\n                },\n              }}\n              helperText={\n                state.childInvalid ? (\n                  <Validation component={nestedTextChild} limit={1} />\n                ) : (\n                  \"\"\n                )\n              }\n            />\n          </div>\n        }\n      />\n    );\n  };\n\n  return state.showAnswer ? showAnswer() : \"\";\n}\n\nexport default memo(MCQ);\n"],"names":["McqAnswer","props","_props$Answer$content","theme","useTheme","dispatch","useDispatch","disabled","Answer","type","allSelected","noneSelected","relevance","useSelector","state","_props$Answer","answerState","runState","values","qualifiedCode","shallowEqual","handleChange","event","value","parentValue","target","checked","code","allCodes","push","filter","el","console","log","valueChange","componentCode","parentCode","setDirty","name","jsx","FormControlLabel","control","Checkbox","indexOf","onChange","sx","color","textStyles","text","label","Content","elementCode","fontFamily","font","alpha","fontSize","size","lang","content","MCQAnswer","memo","MCQ","component","hasAll","answers","some","answer","map","every","FormControl","children","FormGroup","option","McqAnswerOther","nestedTextChild","isSelected","_state2$textChild","own","textChild","show_errors","Survey","isChildDirty","templateState","showAnswer","childInvalid","validity","textValue","textRelevance","onButtonClick","textInput","current","focus","useRef","handleFocus","lostFocus","_nestedTextChild$vali","_props$Answer$content2","TextField","variant","required","validation","inputRef","id","onFocus","onBlur","InputProps","helperText","Validation","limit","Mcq","exports"],"mappings":"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"}