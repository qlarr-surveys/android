{"version":3,"file":"SCQArray-legacy-DHyXvrwh.js","sources":["../../src/components/Questions/SCQArray/SCQArray.jsx"],"sourcesContent":["import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { useTheme } from \"@emotion/react\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { Radio } from \"@mui/material\";\nimport { valueChange } from \"~/state/runState\";\nimport Validation from \"~/components/run/Validation\";\nimport { columnMinWidth } from '~/utils/design/utils';\n\nfunction SCQArray(props) {\n  const theme = useTheme();\n  let columns = props.component.answers.filter(\n    (answer) => answer.type == \"column\"\n  );\n  let rows = props.component.answers.filter((answer) => answer.type == \"row\");\n\n  const width = columnMinWidth()\n\n  return (\n    <TableContainer\n      sx={{\n        overflowX: \"auto\",\n        maxWidth: \"100%\",\n      }}\n    >\n      <Table\n        sx={{\n          tableLayout: \"fixed\",\n          minWidth: `${columns.length * width}px`,\n        }}\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell\n              key=\"content\"\n              sx={{\n                padding: \"2px\",\n                minWidth: width + \"px\",\n              }}\n            ></TableCell>\n            {columns.map((option) => {\n              return (\n                <TableCell\n                  sx={{\n                    fontFamily: theme.textStyles.text.font,\n                    color: theme.textStyles.text.color,\n                    padding: \"2px\",\n                    fontSize: theme.textStyles.text.size,\n                  }}\n                  key={option.qualifiedCode}\n                >\n                  {option.content?.label}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((answer) => {\n            return (\n              <React.Fragment key={answer.qualifiedCode}>\n                <SCQArrayRow\n                  key={answer.qualifiedCode}\n                  answer={answer}\n                  choices={columns}\n                />\n              </React.Fragment>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction SCQArrayRow(props) {\n  const theme = useTheme();\n  const state = useSelector((state) => {\n    return {\n      show_errors: state.runState.values.Survey.show_errors,\n      validity: state.runState.values[props.answer.qualifiedCode]?.validity,\n      value: state.runState.values[props.answer.qualifiedCode]?.value,\n      relevance: state.runState.values[props.answer.qualifiedCode]?.relevance,\n    };\n  }, shallowEqual);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n        value: event.target.value,\n      })\n    );\n  };\n\n  const invalid =\n    (state.show_errors || state.isDirty) && state.validity === false;\n\n  return typeof state.relevance === \"undefined\" || state.relevance ? (\n    <React.Fragment>\n      <TableRow key={props.answer.code}>\n        <TableCell\n          sx={{\n            fontFamily: theme.textStyles.text.font,\n            color: theme.textStyles.text.color,\n            fontSize: theme.textStyles.text.size,\n            borderBottom: invalid ? \"0\" : \"\",\n            padding: \"2px\",\n            wordWrap: \"break-word\",\n          }}\n        >\n          {props.answer.content?.label}\n        </TableCell>\n        {props.choices.map((option) => {\n          return (\n            <TableCell\n              key={option.code}\n              component=\"th\"\n              scope=\"row\"\n              sx={{\n                borderBottom: invalid ? \"0\" : \"\",\n                padding: \"2px\",\n              }}\n            >\n              <Radio\n                name={props.answer.qualifiedCode}\n                onChange={handleChange}\n                checked={state.value === option.code}\n                value={option.code}\n                sx={{\n                  color: theme.textStyles.text.color,\n                }}\n              />\n            </TableCell>\n          );\n        })}\n      </TableRow>\n      {invalid ? (\n        <TableRow>\n          <TableCell\n            sx={{ padding: \"8px\" }}\n            colSpan={props.choices ? props.choices.length + 1 : 1}\n          >\n            <Validation component={props.answer} />\n          </TableCell>\n        </TableRow>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  ) : (\n    \"\"\n  );\n}\n\nexport default SCQArray;\n"],"names":["SCQArray","props","theme","useTheme","columns","component","answers","filter","answer","type","rows","width","columnMinWidth","jsx","TableContainer","sx","overflowX","maxWidth","children","jsxs","Table","tableLayout","minWidth","length","TableHead","TableRow","TableCell","padding","map","option","_option$content","fontFamily","textStyles","text","font","color","fontSize","size","content","label","qualifiedCode","TableBody","React","Fragment","SCQArrayRow","choices","_props$answer$content","state","useSelector","_state2$runState$valu","_state2$runState$valu2","_state2$runState$valu3","show_errors","runState","values","Survey","validity","value","relevance","shallowEqual","dispatch","useDispatch","handleChange","event","valueChange","componentCode","target","name","invalid","isDirty","borderBottom","wordWrap","scope","Radio","onChange","checked","code","colSpan","Validation"],"mappings":"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"}