{"version":3,"file":"Scq-legacy-Dgmiwu-V.js","sources":["../../src/components/Questions/Scq/Scq.jsx"],"sourcesContent":["import React, { useRef } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport { useTheme } from \"@mui/material/styles\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Validation from \"~/components/run/Validation\";\nimport Radio from \"@mui/material/Radio\";\nimport { valueChange } from \"~/state/runState\";\nimport FormControl from \"@mui/material/FormControl\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport { Box } from \"@mui/material\";\nimport { setDirty } from \"~/state/templateState\";\nimport Content from '~/components/run/Content';\n\nfunction SCQ(props) {\n  const state = useSelector((state) => {\n    let questionState = state.runState.values[props.component.qualifiedCode];\n    return {\n      value: questionState?.value || \"\",\n    };\n  }, shallowEqual);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n        value: event.target.value,\n      })\n    );\n  };\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup\n        name={props.component.qualifiedCode}\n        value={state.value}\n        onChange={handleChange}\n      >\n        {props.component.answers.map((option) => {\n          if (option.type === \"other\") {\n            return (\n              <ScqChoiceOther\n                lang={props.lang}\n                parentCode={props.component.qualifiedCode}\n                key={option.qualifiedCode}\n                Choice={option}\n              />\n            );\n          } else {\n            return <ScqChoice key={option.qualifiedCode} Choice={option} />;\n          }\n        })}\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nfunction ScqChoice(props) {\n  const theme = useTheme();\n\n  const showChoice = () => {\n    return (\n      <FormControlLabel\n        key={props.Choice.qualifiedCode}\n        control={\n          <Radio\n          />\n        }\n        label={\n            <Content\n                elementCode={props.Choice.code}\n                fontFamily={theme.textStyles.text.font}\n                color={theme.textStyles.text.color}\n                fontSize={theme.textStyles.text.size}\n                name=\"label\"\n                lang={props.lang}\n                content={props.Choice.content?.label}\n              />\n\n        }\n        value={props.Choice.code}\n      />\n    );\n  };\n\n  return showChoice ? showChoice() : \"\";\n}\n\nfunction ScqChoiceOther(props) {\n  const theme = useTheme();\n  const nestedTextChild = props.Choice.answers[0];\n  const state = useSelector((state) => {\n    let choiceState = state.runState.values[props.Choice.qualifiedCode];\n    let childState = state.runState.values[nestedTextChild.qualifiedCode];\n    let show_errors = state.runState.values.Survey.show_errors;\n    let isChildDirty = state.templateState[nestedTextChild.qualifiedCode];\n    return {\n      showChoice:\n        typeof choiceState?.relevance === \"undefined\" || choiceState.relevance,\n      childInvalid:\n        (show_errors || isChildDirty) &&\n        childState?.relevance === true &&\n        childState?.validity === false,\n      value: childState?.value || \"\",\n    };\n  }, shallowEqual);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n        value: event.target.value,\n      })\n    );\n  };\n\n  const handleFocus = (event) => {\n    dispatch(\n      valueChange({ componentCode: props.parentCode, value: props.Choice.code })\n    );\n  };\n\n  const lostFocus = (event) => {\n    dispatch(setDirty(event.target.name));\n  };\n\n  const textInput = useRef();\n  const onButtonClick = (event) => {\n    if (event.target.checked) {\n      textInput.current.focus();\n    }\n  };\n\n  const showChoice = () => {\n    return (\n      <div className=\"text-left d-flex\">\n        <FormControlLabel\n          key={props.Choice.qualifiedCode}\n          control={<Radio\n            sx={{\n              color: theme.textStyles.text.color,\n            }}\n          />}\n          label={\n              <TextField\n                variant=\"standard\"\n                fullWidth\n                required={\n                  state.textChild?.relevance &&\n                  nestedTextChild.validation?.required\n                }\n                sx={{\n                  label: { color: theme.textStyles.text.color },\n                }}\n                inputRef={textInput}\n                id={nestedTextChild.qualifiedCode}\n                name={nestedTextChild.qualifiedCode}\n                label={props.Choice.content?.label}\n                onChange={handleChange}\n                onFocus={handleFocus}\n                onBlur={lostFocus}\n                value={state.value}\n                InputProps={{\n                  sx: {\n                    fontFamily: theme.textStyles.text.font,\n                    color: theme.textStyles.text.color,\n                    fontSize: theme.textStyles.text.size,\n                  },\n                }}\n                helperText={\n                  state.childInvalid ? (\n                    <Validation component={nestedTextChild} limit={1} />\n                  ) : (\n                    \"\"\n                  )\n                }\n              />\n          }\n          onChange={onButtonClick}\n          value={props.Choice.code}\n        />\n        <p />\n      </div>\n    );\n  };\n\n  return state.showChoice ? showChoice() : \"\";\n}\n\nexport default SCQ;\n"],"names":["SCQ","props","state","useSelector","questionState","runState","values","component","qualifiedCode","value","shallowEqual","dispatch","useDispatch","handleChange","event","valueChange","componentCode","target","name","jsx","FormControl","children","RadioGroup","onChange","answers","map","option","type","ScqChoiceOther","lang","parentCode","Choice","ScqChoice","theme","useTheme","showChoice","_props$Choice$content","FormControlLabel","control","Radio","label","Content","elementCode","code","fontFamily","textStyles","text","font","color","fontSize","size","content","nestedTextChild","choiceState","childState","show_errors","Survey","isChildDirty","templateState","relevance","childInvalid","validity","handleFocus","lostFocus","setDirty","textInput","useRef","onButtonClick","checked","current","focus","_state$textChild","_nestedTextChild$vali","_props$Choice$content2","jsxs","className","sx","TextField","variant","fullWidth","required","textChild","validation","inputRef","id","onFocus","onBlur","InputProps","helperText","Validation","limit"],"mappings":"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"}