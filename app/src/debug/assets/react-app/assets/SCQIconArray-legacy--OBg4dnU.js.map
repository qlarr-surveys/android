{"version":3,"file":"SCQIconArray-legacy--OBg4dnU.js","sources":["../../src/components/Questions/SCQArray/SCQIconArray.jsx"],"sourcesContent":["import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { useTheme } from \"@emotion/react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { valueChange } from \"~/state/runState\";\nimport Validation from \"~/components/run/Validation\";\nimport DynamicSvg from \"~/components/DynamicSvg\";\nimport { buildResourceUrl } from \"~/networking/common\";\nimport { TableHead } from \"@mui/material\";\nimport { columnMinWidth } from '~/utils/design/utils';\n\nfunction SCQIconArray(props) {\n  const theme = useTheme();\n  const width = columnMinWidth()\n\n  let columns = props.component.answers.filter(\n    (answer) => answer.type == \"column\"\n  );\n  let rows = props.component.answers.filter((answer) => answer.type == \"row\");\n\n  return (\n    <TableContainer\n      sx={{\n        overflowX: \"auto\",\n        maxWidth: \"100%\",\n      }}\n    >\n      <Table\n        sx={{ tableLayout: \"fixed\", minWidth: `${columns.length * width}px` }}\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell\n              key=\"content\"\n              sx={{\n                width: width,\n                padding: \"0px\",\n              }}\n            ></TableCell>\n            {columns.map((option) => {\n              return (\n                <TableCell\n                  sx={{\n                    fontFamily: theme.textStyles.text.font,\n                    color: theme.textStyles.text.color,\n                    fontSize: theme.textStyles.text.size,\n                    textAlign: \"center\",\n                    width: width,\n                  }}\n                  key={option.qualifiedCode}\n                >\n                  {option.content?.label}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((answer) => {\n            return (\n              <React.Fragment key={answer.qualifiedCode}>\n                <SCQArrayRow\n                  key={answer.qualifiedCode}\n                  answer={answer}\n                  choices={columns}\n                  width={width}\n                />\n              </React.Fragment>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction SCQArrayRow(props) {\n  const theme = useTheme();\n\n  const isDirty = useSelector(\n    (state) => state.templateState[props.answer.qualifiedCode]?.isDirty\n  );\n  const show_errors = useSelector(\n    (state) => state.runState.values.Survey.show_errors\n  );\n  const state = useSelector(\n    (state) => state.runState.values[props.answer.qualifiedCode]\n  );\n  const validity = React.useMemo(() => state?.validity, [state]);\n  const value = React.useMemo(() => state?.value, [state]);\n  const relevance = React.useMemo(() => state?.relevance, [state]);\n\n  const dispatch = useDispatch();\n\n  const handleChange = (value) => {\n    dispatch(\n      valueChange({\n        componentCode: props.answer.qualifiedCode,\n        value: value,\n      })\n    );\n  };\n\n  const invalid = (show_errors || isDirty) && validity === false;\n\n  return typeof relevance === \"undefined\" || relevance ? (\n    <React.Fragment>\n      <TableRow key={props.answer.code}>\n        <TableCell\n          sx={{\n            fontFamily: theme.textStyles.text.font,\n            color: theme.textStyles.text.color,\n            fontSize: theme.textStyles.text.size,\n            borderBottom: invalid ? \"0\" : \"\",\n            padding: \"2px\",\n          }}\n        >\n          {props.answer.content?.label}\n        </TableCell>\n        {props.choices.map((option) => {\n          return (\n            <TableCell\n              key={option.code}\n              component=\"th\"\n              scope=\"row\"\n              sx={{\n                borderBottom: invalid ? \"0\" : \"\",\n                padding: \"2px\",\n                width: props.width,\n              }}\n            >\n              <DynamicSvg\n                onIconClick={() => handleChange(option.code)}\n                imageHeight={\"64px\"}\n                isSelected={value == option.code}\n                theme={theme}\n                svgUrl={\n                  option?.resources?.icon\n                    ? buildResourceUrl(option?.resources?.icon)\n                    : undefined\n                }\n              />\n            </TableCell>\n          );\n        })}\n      </TableRow>\n      {invalid ? (\n        <TableRow>\n          <TableCell\n            sx={{ padding: \"2px\" }}\n            colSpan={props.choices ? props.choices.length + 1 : 1}\n          >\n            <Validation component={props.answer} />\n          </TableCell>\n        </TableRow>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  ) : (\n    \"\"\n  );\n}\n\nexport default SCQIconArray;\n"],"names":["SCQIconArray","props","theme","useTheme","width","columnMinWidth","columns","component","answers","filter","answer","type","rows","jsx","TableContainer","sx","overflowX","maxWidth","children","jsxs","Table","tableLayout","minWidth","length","TableHead","TableRow","TableCell","padding","map","option","_option$content","fontFamily","textStyles","text","font","color","fontSize","size","textAlign","content","label","qualifiedCode","TableBody","React","Fragment","SCQArrayRow","choices","_props$answer$content","isDirty","useSelector","state","templateState","_state2$templateState","show_errors","runState","values","Survey","validity","useMemo","value","relevance","dispatch","useDispatch","handleChange","valueChange","componentCode","invalid","borderBottom","_option$resources","_option$resources2","scope","DynamicSvg","onIconClick","code","imageHeight","isSelected","svgUrl","resources","icon","buildResourceUrl","colSpan","Validation"],"mappings":"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"}