{"version":3,"file":"SCQArray-8roswF3v.js","sources":["../../src/components/Questions/SCQArray/SCQArray.jsx"],"sourcesContent":["import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { useTheme } from \"@emotion/react\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { Radio } from \"@mui/material\";\nimport { valueChange } from \"~/state/runState\";\nimport Validation from \"~/components/run/Validation\";\nimport { columnMinWidth } from '~/utils/design/utils';\n\nfunction SCQArray(props) {\n  const theme = useTheme();\n  let columns = props.component.answers.filter(\n    (answer) => answer.type == \"column\"\n  );\n  let rows = props.component.answers.filter((answer) => answer.type == \"row\");\n\n  const width = columnMinWidth()\n\n  return (\n    <TableContainer\n      sx={{\n        overflowX: \"auto\",\n        maxWidth: \"100%\",\n      }}\n    >\n      <Table\n        sx={{\n          tableLayout: \"fixed\",\n          minWidth: `${columns.length * width}px`,\n        }}\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell\n              key=\"content\"\n              sx={{\n                padding: \"2px\",\n                minWidth: width + \"px\",\n              }}\n            ></TableCell>\n            {columns.map((option) => {\n              return (\n                <TableCell\n                  sx={{\n                    fontFamily: theme.textStyles.text.font,\n                    color: theme.textStyles.text.color,\n                    padding: \"2px\",\n                    fontSize: theme.textStyles.text.size,\n                  }}\n                  key={option.qualifiedCode}\n                >\n                  {option.content?.label}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((answer) => {\n            return (\n              <React.Fragment key={answer.qualifiedCode}>\n                <SCQArrayRow\n                  key={answer.qualifiedCode}\n                  answer={answer}\n                  choices={columns}\n                />\n              </React.Fragment>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction SCQArrayRow(props) {\n  const theme = useTheme();\n  const state = useSelector((state) => {\n    return {\n      show_errors: state.runState.values.Survey.show_errors,\n      validity: state.runState.values[props.answer.qualifiedCode]?.validity,\n      value: state.runState.values[props.answer.qualifiedCode]?.value,\n      relevance: state.runState.values[props.answer.qualifiedCode]?.relevance,\n    };\n  }, shallowEqual);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n        value: event.target.value,\n      })\n    );\n  };\n\n  const invalid =\n    (state.show_errors || state.isDirty) && state.validity === false;\n\n  return typeof state.relevance === \"undefined\" || state.relevance ? (\n    <React.Fragment>\n      <TableRow key={props.answer.code}>\n        <TableCell\n          sx={{\n            fontFamily: theme.textStyles.text.font,\n            color: theme.textStyles.text.color,\n            fontSize: theme.textStyles.text.size,\n            borderBottom: invalid ? \"0\" : \"\",\n            padding: \"2px\",\n            wordWrap: \"break-word\",\n          }}\n        >\n          {props.answer.content?.label}\n        </TableCell>\n        {props.choices.map((option) => {\n          return (\n            <TableCell\n              key={option.code}\n              component=\"th\"\n              scope=\"row\"\n              sx={{\n                borderBottom: invalid ? \"0\" : \"\",\n                padding: \"2px\",\n              }}\n            >\n              <Radio\n                name={props.answer.qualifiedCode}\n                onChange={handleChange}\n                checked={state.value === option.code}\n                value={option.code}\n                sx={{\n                  color: theme.textStyles.text.color,\n                }}\n              />\n            </TableCell>\n          );\n        })}\n      </TableRow>\n      {invalid ? (\n        <TableRow>\n          <TableCell\n            sx={{ padding: \"8px\" }}\n            colSpan={props.choices ? props.choices.length + 1 : 1}\n          >\n            <Validation component={props.answer} />\n          </TableCell>\n        </TableRow>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  ) : (\n    \"\"\n  );\n}\n\nexport default SCQArray;\n"],"names":["jsx","jsxs","state"],"mappings":"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"}