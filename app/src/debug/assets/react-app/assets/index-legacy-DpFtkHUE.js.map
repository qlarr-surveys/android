{"version":3,"file":"index-legacy-DpFtkHUE.js","sources":["../../src/components/manage/SurveyMode/index.jsx","../../src/pages/manage/CreateSurvey/index.jsx"],"sourcesContent":["import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormControl, MenuItem, InputLabel, Select } from \"@mui/material\";\nimport { SURVEY_MODE } from \"~/constants/survey\";\nimport { KeyboardArrowDown } from \"@mui/icons-material\";\n\nfunction CustomArrow(props) {\n  return (\n    <KeyboardArrowDown\n      {...props}\n      style={{\n        color: \"#181735\",\n      }}\n    />\n  );\n}\n\nexport const SurveyMode = ({ surveyMode, onSurveyModeChanged }) => {\n  const { t } = useTranslation(\"manage\");\n\n  return (\n    <FormControl fullWidth>\n      <InputLabel id=\"survey-mode-label\">{t(\"label.survey_mode\")}</InputLabel>\n      <Select\n        labelId=\"survey-mode-label\"\n        id=\"demo-simple-select\"\n        value={surveyMode}\n        label={t(\"label.survey_mode\")}\n        onChange={onSurveyModeChanged}\n        sx={{\n          minWidth: \"160px\",\n          borderRadius: \"12px\",\n          backgroundColor: \"#f7f8fc\",\n          \"& .MuiOutlinedInput-notchedOutline\": {\n            border: \"none\",\n          },\n        }}\n        IconComponent={CustomArrow}\n      >\n        <MenuItem value={SURVEY_MODE.WEB}>\n          {t(`mode.${SURVEY_MODE.WEB}`)}\n        </MenuItem>\n        <MenuItem value={SURVEY_MODE.OFFLINE}>\n          {t(`mode.${SURVEY_MODE.OFFLINE}`)}\n        </MenuItem>\n        <MenuItem value={SURVEY_MODE.MIXED}>\n          {t(`mode.${SURVEY_MODE.MIXED}`)}\n        </MenuItem>\n      </Select>\n    </FormControl>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Box,\n  Button,\n  Card,\n  TextField,\n  FormGroup,\n  FormHelperText,\n  Typography,\n  Stack,\n} from \"@mui/material\";\n\nimport { routes } from \"~/routes\";\nimport { PROCESSED_ERRORS } from \"~/utils/errorsProcessor\";\nimport styles from \"./CreateSurvey.module.css\";\nimport { localDateToServerDateTime } from \"~/utils/DateUtils\";\nimport { SurveyMode } from \"~/components/manage/SurveyMode\";\nimport { SurveyActiveFromTo } from \"~/components/manage/SurveyActiveFromTo\";\nimport { SURVEY_MODE } from \"~/constants/survey\";\nimport { onError, setLoading } from \"~/state/edit/editState\";\nimport { useDispatch } from \"react-redux\";\nimport { useService } from \"~/hooks/use-service\";\n\nfunction CreateSurvey() {\n  const surveyService = useService(\"survey\");\n\n  const navigate = useNavigate();\n  const { t } = useTranslation(\"manage\");\n  const dispatch = useDispatch();\n\n  const [surveyName, setSurveyName] = useState(\"\");\n  const [surveyNameError, setSurveyNameError] = useState(\"\");\n  const [surveyDateError, setSurveyDateError] = useState(\"\");\n\n  const [surveyMode, setSurveyMode] = useState(SURVEY_MODE.MIXED);\n\n  const [surveyActiveFrom, setSurveyActiveFrom] = useState(null);\n  const [surveyActiveTo, setSurveyActiveTo] = useState(null);\n\n  const onSurveyNameChanged = (e) => {\n    setSurveyName(e.target.value);\n    setSurveyNameError(\"\");\n  };\n\n  const onSurveyModeChanged = (e) => {\n    setSurveyMode(e.target.value);\n  };\n\n  const onSurveyActiveFromChanged = (value) => {\n    setSurveyDateError(\"\");\n    setSurveyActiveFrom(value.toDate());\n  };\n\n  const onSurveyActiveToChanged = (value) => {\n    setSurveyDateError(\"\");\n    setSurveyActiveTo(value.toDate());\n  };\n\n  const validate = () => {\n    setSurveyNameError(\"\");\n\n    if (surveyName.length == 0) {\n      setSurveyNameError(t(\"survey_required\"));\n      return false;\n    }\n\n    return true;\n  };\n\n  const goDashboard = () => {\n    navigate(routes.dashboard);\n  };\n\n  const onSubmit = () => {\n    if (!validate()) {\n      return;\n    }\n\n    dispatch(setLoading(true));\n    const data = {\n      name: surveyName,\n      usage: surveyMode,\n    };\n\n    if (surveyActiveFrom) {\n      data.startDate = localDateToServerDateTime(surveyActiveFrom);\n    }\n\n    if (surveyActiveTo) {\n      data.endDate = localDateToServerDateTime(surveyActiveTo);\n    }\n\n    surveyService\n      .createSurvey(data)\n      .then(() => {\n        goDashboard();\n      })\n      .catch((processedError) => {\n        if (\n          processedError.name == PROCESSED_ERRORS.DUPLICATE_SURVEY_NAME.name\n        ) {\n          setSurveyNameError(t(`processed_errors.${processedError.name}`));\n        } else if (\n          processedError.name == PROCESSED_ERRORS.INVALID_SURVEY_DATES.name\n        ) {\n          setSurveyDateError(t(`processed_errors.${processedError.name}`));\n        }\n      })\n      .finally(() => {\n        dispatch(setLoading(false));\n      });\n  };\n\n  return (\n    <Box className={styles.mainContainer}>\n      <Card className={styles.createUserCard}>\n        <Typography variant=\"h4\">{t(\"create_survey.title\")}</Typography>\n        <FormGroup className={styles.formGroup}>\n          <TextField\n            sx={{ maxWidth: \"400px\" }}\n            error={surveyNameError.length > 0}\n            required={true}\n            value={surveyName}\n            id=\"surveyName\"\n            label={t(\"label.survey_name\")}\n            name=\"surveyName\"\n            onChange={onSurveyNameChanged}\n            variant=\"standard\"\n          />\n          {surveyNameError && (\n            <FormHelperText className={styles.errorText}>\n              {surveyNameError}\n            </FormHelperText>\n          )}\n          <Stack flexDirection=\"row\" gap={5} sx={{ mt: \"40px\" }}>\n            <Box className={styles.blockItem}>\n              <SurveyMode\n                surveyMode={surveyMode}\n                onSurveyModeChanged={onSurveyModeChanged}\n              />\n            </Box>\n            <Box className={styles.blockItem}>\n              <SurveyActiveFromTo\n                error={surveyDateError}\n                surveyActiveFrom={surveyActiveFrom}\n                surveyActiveTo={surveyActiveTo}\n                onSurveyActiveFromChanged={onSurveyActiveFromChanged}\n                onSurveyActiveToChanged={onSurveyActiveToChanged}\n              />\n            </Box>\n          </Stack>\n        </FormGroup>\n        <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", mt: \"40px\" }}>\n          <Button onClick={goDashboard}>{t(\"action_btn.cancel\")}</Button>\n          <Button onClick={onSubmit}>{t(\"action_btn.save\")}</Button>\n        </Box>\n      </Card>\n    </Box>\n  );\n}\n\nexport default CreateSurvey;\n"],"names":["CustomArrow","props","jsx","KeyboardArrowDown","_objectSpread","style","color","SurveyMode","surveyMode","onSurveyModeChanged","_useTranslation","useTranslation","t","jsxs","FormControl","fullWidth","children","InputLabel","id","Select","labelId","value","label","onChange","sx","minWidth","borderRadius","backgroundColor","border","IconComponent","MenuItem","SURVEY_MODE","WEB","OFFLINE","MIXED","CreateSurvey","surveyService","useService","navigate","useNavigate","_useTranslation2","dispatch","useDispatch","_reactExports$useStat","useState","_reactExports$useStat2","_slicedToArray","surveyName","setSurveyName","_reactExports$useStat3","_reactExports$useStat4","surveyNameError","setSurveyNameError","_reactExports$useStat5","_reactExports$useStat6","surveyDateError","setSurveyDateError","_reactExports$useStat7","_reactExports$useStat8","setSurveyMode","_reactExports$useStat9","_reactExports$useStat10","surveyActiveFrom","setSurveyActiveFrom","_reactExports$useStat11","_reactExports$useStat12","surveyActiveTo","setSurveyActiveTo","onSurveyNameChanged","e","target","onSurveyActiveFromChanged","toDate","onSurveyActiveToChanged","validate","length","goDashboard","routes","dashboard","onSubmit","setLoading","data","name","usage","startDate","localDateToServerDateTime","endDate","createSurvey","then","catch","processedError","PROCESSED_ERRORS","DUPLICATE_SURVEY_NAME","INVALID_SURVEY_DATES","finally","Box","className","styles","mainContainer","Card","createUserCard","Typography","variant","FormGroup","formGroup","TextField","maxWidth","error","required","FormHelperText","errorText","Stack","flexDirection","gap","mt","blockItem","SurveyActiveFromTo","display","justifyContent","Button","onClick"],"mappings":"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"}