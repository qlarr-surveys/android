{"version":3,"file":"index-legacy-D2SrDBwZ.js","sources":["../../src/components/manage/SurveyActiveFromTo/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { TextField, FormHelperText, Button, Box } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport dayjs from \"dayjs\";\nimport { DateTimePicker } from \"@mui/x-date-pickers\";\n\nconst renderInput = (props) => {\n  return (\n    <TextField\n      {...props}\n      variant=\"outlined\"\n      sx={{\n        \"& .MuiOutlinedInput-root\": {\n          borderRadius: \"16px\",\n          backgroundColor: \"#f7f8fc\",\n          border: \"none\",\n        },\n        \"& .MuiInputLabel-root\": {\n          color: \"#a6a8ab\",\n          fontWeight: \"500\",\n        },\n        \"& .MuiOutlinedInput-notchedOutline\": {\n          border: \"none\",\n        },\n      }}\n    />\n  );\n};\n\nexport const SurveyActiveFromTo = ({\n  error,\n  surveyActiveFrom: initialSurveyActiveFrom,\n  surveyActiveTo: initialSurveyActiveTo,\n  onSurveyActiveFromChanged,\n  onSurveyActiveToChanged,\n  disabled,\n}) => {\n  const { t } = useTranslation(\"manage\");\n  const [surveyActiveFrom, setSurveyActiveFrom] = useState(\n    initialSurveyActiveFrom\n  );\n  const [surveyActiveTo, setSurveyActiveTo] = useState(initialSurveyActiveTo);\n  const [isDirty, setIsDirty] = useState(false);\n\n  useEffect(() => {\n    setSurveyActiveFrom(initialSurveyActiveFrom);\n    setSurveyActiveTo(initialSurveyActiveTo);\n  }, [initialSurveyActiveFrom, initialSurveyActiveTo]);\n\n  const handleSurveyActiveFromChange = (newValue) => {\n    setSurveyActiveFrom(newValue);\n    setIsDirty(true);\n  };\n\n  const handleSurveyActiveToChange = (newValue) => {\n    setSurveyActiveTo(newValue);\n    setIsDirty(true);\n  };\n\n  const handleSaveChanges = () => {\n    const fromChanged = dayjs(surveyActiveFrom).toDate();\n    const toChanged = dayjs(surveyActiveTo).toDate();\n\n    if (surveyActiveFrom && !isEqualDates(fromChanged, dayjs(initialSurveyActiveFrom).toDate())) {\n      onSurveyActiveFromChanged(fromChanged);\n    }\n\n    if (surveyActiveTo && !isEqualDates(toChanged, dayjs(initialSurveyActiveTo).toDate())) {\n      onSurveyActiveToChanged(toChanged);\n    }\n\n    setIsDirty(false);\n  };\n\n  function isEqualDates(date1, date2) {\n    if (!date1 && !date2) return true;\n    if (!date1 || !date2) return false;\n    return date1.getTime() === date2.getTime();\n  }\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" width=\"100%\" gap={2}>\n\n      <LocalizationProvider dateAdapter={AdapterDayjs}>\n        <Box display=\"flex\" gap={2}>\n          <DateTimePicker\n            disabled={disabled}\n            label={t(\"label.from\")}\n            value={surveyActiveFrom}\n            onChange={handleSurveyActiveFromChange}\n            renderInput={renderInput}\n          />\n          <DateTimePicker\n            disabled={disabled}\n            label={t(\"label.to\")}\n            value={surveyActiveTo}\n            onChange={handleSurveyActiveToChange}\n            renderInput={renderInput}\n          />\n        </Box>\n        {error && (\n          <FormHelperText style={{ color: \"red\" }}>{error}</FormHelperText>\n        )}\n        {isDirty && (\n          <Button onClick={handleSaveChanges} variant=\"contained\" color=\"primary\">\n            {t(\"save_changes\")}\n          </Button>\n        )}\n      </LocalizationProvider>\n    </Box>\n\n  );\n};\n"],"names":["renderInput","props","jsx","TextField","_objectSpread","variant","sx","borderRadius","backgroundColor","border","color","fontWeight","SurveyActiveFromTo","error","surveyActiveFrom","initialSurveyActiveFrom","surveyActiveTo","initialSurveyActiveTo","onSurveyActiveFromChanged","onSurveyActiveToChanged","disabled","_useTranslation","useTranslation","t","_reactExports$useStat","useState","_reactExports$useStat2","_slicedToArray","setSurveyActiveFrom","_reactExports$useStat3","_reactExports$useStat4","setSurveyActiveTo","_reactExports$useStat5","_reactExports$useStat6","isDirty","setIsDirty","useEffect","handleSurveyActiveFromChange","newValue","handleSurveyActiveToChange","handleSaveChanges","fromChanged","dayjs","toDate","toChanged","isEqualDates","date1","date2","getTime","Box","display","flexDirection","width","gap","children","jsxs","LocalizationProvider","dateAdapter","AdapterDayjs","DateTimePicker","label","value","onChange","FormHelperText","style","Button","onClick"],"mappings":"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"}