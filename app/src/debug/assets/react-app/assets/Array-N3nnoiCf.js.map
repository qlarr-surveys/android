{"version":3,"file":"Array-N3nnoiCf.js","sources":["../../src/components/Questions/SCQArray/Array.jsx"],"sourcesContent":["import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { useTheme } from \"@emotion/react\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { Checkbox, Radio } from \"@mui/material\";\nimport { valueChange } from \"~/state/runState\";\nimport Validation from \"~/components/run/Validation\";\nimport { columnMinWidth } from \"~/utils/design/utils\";\n\nfunction Array(props) {\n  const theme = useTheme();\n  let columns = props.component.answers.filter(\n    (answer) => answer.type == \"column\"\n  );\n  let rows = props.component.answers.filter((answer) => answer.type == \"row\");\n  const { header, rowLabel } = columnMinWidth(null, props.component);\n\n  return (\n    <TableContainer\n      sx={{\n        overflowX: \"auto\",\n        maxWidth: \"100%\",\n      }}\n    >\n      <Table\n        sx={{\n          tableLayout: \"fixed\",\n        }}\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell\n              key=\"content\"\n              sx={{\n                padding: \"2px\",\n                width: rowLabel + \"px\",\n              }}\n            ></TableCell>\n            {columns.map((option) => {\n              return (\n                <TableCell\n                  sx={{\n                    fontFamily: theme.textStyles.text.font,\n                    color: theme.textStyles.text.color,\n                    padding: \"2px\",\n                    fontSize: theme.textStyles.text.size,\n                    width: header + \"px\",\n                  }}\n                  key={option.qualifiedCode}\n                >\n                  {option.content?.label}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((answer) => {\n            return (\n              <React.Fragment key={answer.qualifiedCode}>\n                <ArrayRow\n                  type={props.component.type}\n                  key={answer.qualifiedCode}\n                  answer={answer}\n                  choices={columns}\n                />\n              </React.Fragment>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction ArrayRow(props) {\n  const theme = useTheme();\n  const state = useSelector((state) => {\n    return {\n      show_errors: state.runState.values.Survey.show_errors,\n      validity: state.runState.values[props.answer.qualifiedCode]?.validity,\n      value: state.runState.values[props.answer.qualifiedCode]?.value,\n      relevance: state.runState.values[props.answer.qualifiedCode]?.relevance,\n    };\n  }, shallowEqual);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    if (props.type === \"scq_array\") {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n          value: event.target.value,\n        })\n      );\n    } else if (props.type === \"mcq_array\") {\n      let currentValue = state.value || []\n      let value = [...currentValue];\n      if (event.target.checked) {\n        value.push(event.target.value);\n      } else {\n        value = value.filter((el) => el !== event.target.value);\n      }\n      dispatch(\n        valueChange({\n          componentCode: event.target.name,\n          value: value,\n        })\n      );\n    }\n  };\n\n  const invalid =\n    (state.show_errors || state.isDirty) && state.validity === false;\n\n  return typeof state.relevance === \"undefined\" || state.relevance ? (\n    <React.Fragment>\n      <TableRow key={props.answer.code}>\n        <TableCell\n          sx={{\n            fontFamily: theme.textStyles.text.font,\n            color: theme.textStyles.text.color,\n            fontSize: theme.textStyles.text.size,\n            borderBottom: invalid ? \"0\" : \"\",\n            padding: \"2px\",\n            wordWrap: \"break-word\",\n          }}\n        >\n          {props.answer.content?.label}\n        </TableCell>\n        {props.choices.map((option) => {\n          return (\n            <TableCell\n              key={option.code}\n              component=\"th\"\n              scope=\"row\"\n              sx={{\n                borderBottom: invalid ? \"0\" : \"\",\n                padding: \"2px\",\n              }}\n            >\n              {props.type === \"scq_array\" ? (\n                <Radio\n                name={props.answer.qualifiedCode}\n                onChange={handleChange}\n                checked={state.value === option.code}\n                value={option.code}\n              />\n              ) : (\n                <Checkbox\n                  name={props.answer.qualifiedCode}\n                  onChange={handleChange}\n                  checked={(state.value || []).indexOf(option.code) > -1}\n                  value={option.code}\n                />\n              )}\n            </TableCell>\n          );\n        })}\n      </TableRow>\n      {invalid ? (\n        <TableRow>\n          <TableCell\n            sx={{ padding: \"8px\" }}\n            colSpan={props.choices ? props.choices.length + 1 : 1}\n          >\n            <Validation component={props.answer} />\n          </TableCell>\n        </TableRow>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  ) : (\n    \"\"\n  );\n}\n\nexport default Array;\n"],"names":["jsx","jsxs","state"],"mappings":";;;;;;;AAeA,SAAS,MAAM,OAAO;AACpB,QAAM,QAAQ,SAAA;AACd,MAAI,UAAU,MAAM,UAAU,QAAQ;AAAA,IACpC,CAAC,WAAW,OAAO,QAAQ;AAAA,EAAA;AAE7B,MAAI,OAAO,MAAM,UAAU,QAAQ,OAAO,CAAC,WAAW,OAAO,QAAQ,KAAK;AAC1E,QAAM,EAAE,QAAQ,SAAA,IAAa,eAAe,MAAM,MAAM,SAAS;AAEjE,SACEA,kCAAAA;AAAAA,IAAC;AAAA,IAAA;AAAA,MACC,IAAI;AAAA,QACF,WAAW;AAAA,QACX,UAAU;AAAA,MAAA;AAAA,MAGZ,UAAAC,kCAAAA;AAAAA,QAAC;AAAA,QAAA;AAAA,UACC,IAAI;AAAA,YACF,aAAa;AAAA,UAAA;AAAA,UAGf,UAAA;AAAA,YAAAD,kCAAAA,IAAC,WAAA,EACC,iDAAC,UAAA,EACC,UAAA;AAAA,cAAAA,kCAAAA;AAAAA,gBAAC;AAAA,gBAAA;AAAA,kBAEC,IAAI;AAAA,oBACF,SAAS;AAAA,oBACT,OAAO,WAAW;AAAA,kBAAA;AAAA,gBACpB;AAAA,gBAJI;AAAA,cAAA;AAAA,cAML,QAAQ,IAAI,CAAC,WAAW;;AACvB,uBACEA,kCAAAA;AAAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,IAAI;AAAA,sBACF,YAAY,MAAM,WAAW,KAAK;AAAA,sBAClC,OAAO,MAAM,WAAW,KAAK;AAAA,sBAC7B,SAAS;AAAA,sBACT,UAAU,MAAM,WAAW,KAAK;AAAA,sBAChC,OAAO,SAAS;AAAA,oBAAA;AAAA,oBAIjB,uBAAO,+BAAS;AAAA,kBAAA;AAAA,kBAFZ,OAAO;AAAA,gBAAA;AAAA,cAKlB,CAAC;AAAA,YAAA,EAAA,CACH,EAAA,CACF;AAAA,YACAA,kCAAAA,IAAC,WAAA,EACE,UAAA,KAAK,IAAI,CAAC,WAAW;AACpB,qBACEA,kCAAAA,IAAC,MAAM,UAAN,EACC,UAAAA,kCAAAA;AAAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,MAAM,MAAM,UAAU;AAAA,kBAEtB;AAAA,kBACA,SAAS;AAAA,gBAAA;AAAA,gBAFJ,OAAO;AAAA,cAAA,EAGd,GANmB,OAAO,aAO5B;AAAA,YAEJ,CAAC,EAAA,CACH;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACF;AAAA,EAAA;AAGN;AAEA,SAAS,SAAS,OAAO;;AACvB,QAAM,QAAQ,SAAA;AACd,QAAM,QAAQ,YAAY,CAACE,WAAU;;AACnC,WAAO;AAAA,MACL,aAAaA,OAAM,SAAS,OAAO,OAAO;AAAA,MAC1C,WAAUA,MAAAA,OAAM,SAAS,OAAO,MAAM,OAAO,aAAa,MAAhDA,gBAAAA,IAAmD;AAAA,MAC7D,QAAOA,YAAM,SAAS,OAAO,MAAM,OAAO,aAAa,MAAhDA,mBAAmD;AAAA,MAC1D,YAAWA,YAAM,SAAS,OAAO,MAAM,OAAO,aAAa,MAAhDA,mBAAmD;AAAA,IAAA;AAAA,EAElE,GAAG,YAAY;AACf,QAAM,WAAW,YAAA;AAEjB,QAAM,eAAe,CAAC,UAAU;AAC9B,QAAI,MAAM,SAAS,aAAa;AAChC;AAAA,QACE,YAAY;AAAA,UACV,eAAe,MAAM,OAAO;AAAA,UAC1B,OAAO,MAAM,OAAO;AAAA,QAAA,CACrB;AAAA,MAAA;AAAA,IAEL,WAAW,MAAM,SAAS,aAAa;AACrC,UAAI,eAAe,MAAM,SAAS,CAAA;AAClC,UAAI,QAAQ,CAAC,GAAG,YAAY;AAC5B,UAAI,MAAM,OAAO,SAAS;AACxB,cAAM,KAAK,MAAM,OAAO,KAAK;AAAA,MAC/B,OAAO;AACL,gBAAQ,MAAM,OAAO,CAAC,OAAO,OAAO,MAAM,OAAO,KAAK;AAAA,MACxD;AACA;AAAA,QACE,YAAY;AAAA,UACV,eAAe,MAAM,OAAO;AAAA,UAC5B;AAAA,QAAA,CACD;AAAA,MAAA;AAAA,IAEL;AAAA,EACF;AAEA,QAAM,WACH,MAAM,eAAe,MAAM,YAAY,MAAM,aAAa;AAE7D,SAAO,OAAO,MAAM,cAAc,eAAe,MAAM,YACrDD,kCAAAA,KAAC,MAAM,UAAN,EACC,UAAA;AAAA,IAAAA,uCAAC,UAAA,EACC,UAAA;AAAA,MAAAD,kCAAAA;AAAAA,QAAC;AAAA,QAAA;AAAA,UACC,IAAI;AAAA,YACF,YAAY,MAAM,WAAW,KAAK;AAAA,YAClC,OAAO,MAAM,WAAW,KAAK;AAAA,YAC7B,UAAU,MAAM,WAAW,KAAK;AAAA,YAChC,cAAc,UAAU,MAAM;AAAA,YAC9B,SAAS;AAAA,YACT,UAAU;AAAA,UAAA;AAAA,UAGX,WAAA,WAAM,OAAO,YAAb,mBAAsB;AAAA,QAAA;AAAA,MAAA;AAAA,MAExB,MAAM,QAAQ,IAAI,CAAC,WAAW;AAC7B,eACEA,kCAAAA;AAAAA,UAAC;AAAA,UAAA;AAAA,YAEC,WAAU;AAAA,YACV,OAAM;AAAA,YACN,IAAI;AAAA,cACF,cAAc,UAAU,MAAM;AAAA,cAC9B,SAAS;AAAA,YAAA;AAAA,YAGV,UAAA,MAAM,SAAS,cACdA,kCAAAA;AAAAA,cAAC;AAAA,cAAA;AAAA,gBACD,MAAM,MAAM,OAAO;AAAA,gBACnB,UAAU;AAAA,gBACV,SAAS,MAAM,UAAU,OAAO;AAAA,gBAChC,OAAO,OAAO;AAAA,cAAA;AAAA,YAAA,IAGdA,kCAAAA;AAAAA,cAAC;AAAA,cAAA;AAAA,gBACC,MAAM,MAAM,OAAO;AAAA,gBACnB,UAAU;AAAA,gBACV,UAAU,MAAM,SAAS,CAAA,GAAI,QAAQ,OAAO,IAAI,IAAI;AAAA,gBACpD,OAAO,OAAO;AAAA,cAAA;AAAA,YAAA;AAAA,UAChB;AAAA,UArBG,OAAO;AAAA,QAAA;AAAA,MAyBlB,CAAC;AAAA,IAAA,KAzCY,MAAM,OAAO,IA0C5B;AAAA,IACC,gDACE,UAAA,EACC,UAAAA,kCAAAA;AAAAA,MAAC;AAAA,MAAA;AAAA,QACC,IAAI,EAAE,SAAS,MAAA;AAAA,QACf,SAAS,MAAM,UAAU,MAAM,QAAQ,SAAS,IAAI;AAAA,QAEpD,UAAAA,kCAAAA,IAAC,YAAA,EAAW,WAAW,MAAM,OAAA,CAAQ;AAAA,MAAA;AAAA,IAAA,GAEzC,IAEA;AAAA,EAAA,EAAA,CAEJ,IAEA;AAEJ;"}