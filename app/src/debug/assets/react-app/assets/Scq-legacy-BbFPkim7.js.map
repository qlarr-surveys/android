{"version":3,"file":"Scq-legacy-BbFPkim7.js","sources":["../../src/components/Questions/Scq/Scq.jsx"],"sourcesContent":["import React, { useRef } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport { useTheme } from \"@mui/material/styles\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Validation from \"~/components/run/Validation\";\nimport Radio from \"@mui/material/Radio\";\nimport { valueChange } from \"~/state/runState\";\nimport FormControl from \"@mui/material/FormControl\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport { setDirty } from \"~/state/templateState\";\nimport Content from \"~/components/run/Content\";\n\nfunction SCQ(props) {\n  const state = useSelector((state) => {\n    let questionState = state.runState.values[props.component.qualifiedCode];\n    return {\n      value: questionState?.value || \"\",\n    };\n  }, shallowEqual);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n        value: event.target.value,\n      })\n    );\n  };\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup\n        name={props.component.qualifiedCode}\n        value={state.value}\n        onChange={handleChange}\n      >\n        {props.component.answers.map((option) => {\n          if (option.type === \"other\") {\n            return (\n              <ScqChoiceOther\n                lang={props.lang}\n                parentCode={props.component.qualifiedCode}\n                key={option.qualifiedCode}\n                Choice={option}\n              />\n            );\n          } else {\n            return <ScqChoice key={option.qualifiedCode} Choice={option} />;\n          }\n        })}\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nfunction ScqChoice(props) {\n  const theme = useTheme();\n  const relevance = useSelector((state) => {\n    return state.runState.values[props.Choice.qualifiedCode]?.relevance ?? true;\n  });\n\n  return !relevance ? <></> : (\n    <FormControlLabel\n      key={props.Choice.qualifiedCode}\n      control={<Radio />}\n      label={\n        <Content\n          elementCode={props.Choice.code}\n          fontFamily={theme.textStyles.text.font}\n          color={theme.textStyles.text.color}\n          fontSize={theme.textStyles.text.size}\n          name=\"label\"\n          lang={props.lang}\n          content={props.Choice.content?.label}\n        />\n      }\n      value={props.Choice.code}\n    />\n  );\n}\n\nfunction ScqChoiceOther(props) {\n  const theme = useTheme();\n  const nestedTextChild = props.Choice.answers[0];\n  const state = useSelector((state) => {\n    let choiceState = state.runState.values[props.Choice.qualifiedCode];\n    let childState = state.runState.values[nestedTextChild.qualifiedCode];\n    let show_errors = state.runState.values.Survey.show_errors;\n    let isChildDirty = state.templateState[nestedTextChild.qualifiedCode];\n    return {\n      showChoice:\n        typeof choiceState?.relevance === \"undefined\" || choiceState.relevance,\n      childInvalid:\n        (show_errors || isChildDirty) &&\n        childState?.relevance === true &&\n        childState?.validity === false,\n      value: childState?.value || \"\",\n    };\n  }, shallowEqual);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    dispatch(\n      valueChange({\n        componentCode: event.target.name,\n        value: event.target.value,\n      })\n    );\n  };\n\n  const handleFocus = (event) => {\n    dispatch(\n      valueChange({ componentCode: props.parentCode, value: props.Choice.code })\n    );\n  };\n\n  const lostFocus = (event) => {\n    dispatch(setDirty(event.target.name));\n  };\n\n  const textInput = useRef();\n  const onButtonClick = (event) => {\n    if (event.target.checked) {\n      textInput.current.focus();\n    }\n  };\n\n  const showChoice = () => {\n    return (\n      <div className=\"text-left d-flex\">\n        <FormControlLabel\n          key={props.Choice.qualifiedCode}\n          control={\n            <Radio\n              sx={{\n                color: theme.textStyles.text.color,\n              }}\n            />\n          }\n          label={\n            <TextField\n              variant=\"standard\"\n              fullWidth\n              required={\n                state.textChild?.relevance &&\n                nestedTextChild.validation?.required\n              }\n              sx={{\n                label: { color: theme.textStyles.text.color },\n              }}\n              inputRef={textInput}\n              id={nestedTextChild.qualifiedCode}\n              name={nestedTextChild.qualifiedCode}\n              label={props.Choice.content?.label}\n              onChange={handleChange}\n              onFocus={handleFocus}\n              onBlur={lostFocus}\n              value={state.value}\n              InputProps={{\n                sx: {\n                  fontFamily: theme.textStyles.text.font,\n                  color: theme.textStyles.text.color,\n                  fontSize: theme.textStyles.text.size,\n                },\n              }}\n              helperText={\n                state.childInvalid ? (\n                  <Validation component={nestedTextChild} limit={1} />\n                ) : (\n                  \"\"\n                )\n              }\n            />\n          }\n          onChange={onButtonClick}\n          value={props.Choice.code}\n        />\n        <p />\n      </div>\n    );\n  };\n\n  return state.showChoice ? showChoice() : \"\";\n}\n\nexport default SCQ;\n"],"names":["SCQ","props","state","useSelector","questionState","runState","values","component","qualifiedCode","value","shallowEqual","dispatch","useDispatch","handleChange","event","valueChange","componentCode","target","name","jsx","FormControl","children","RadioGroup","onChange","answers","map","option","type","ScqChoiceOther","lang","parentCode","Choice","ScqChoice","_props$Choice$content","theme","useTheme","relevance","_state$runState$value","_state$runState$value2","Fragment","FormControlLabel","control","Radio","label","Content","elementCode","code","fontFamily","textStyles","text","font","color","fontSize","size","content","nestedTextChild","choiceState","childState","show_errors","Survey","isChildDirty","templateState","showChoice","childInvalid","validity","handleFocus","lostFocus","setDirty","textInput","useRef","onButtonClick","checked","current","focus","_state$textChild","_nestedTextChild$vali","_props$Choice$content2","jsxs","className","sx","TextField","variant","fullWidth","required","textChild","validation","inputRef","id","onFocus","onBlur","InputProps","helperText","Validation","limit"],"mappings":"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"}