{"version":3,"file":"SCQIconArray-legacy-k5DyHRyv.js","sources":["../../src/components/Questions/SCQArray/SCQIconArray.jsx"],"sourcesContent":["import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { useTheme } from \"@emotion/react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { valueChange } from \"~/state/runState\";\nimport Validation from \"~/components/run/Validation\";\nimport styles from \"./SCQArrayDesign.module.css\";\nimport DynamicSvg from '~/components/DynamicSvg';\nimport { buildResourceUrl } from '~/networking/common';\n\nfunction SCQIconArray(props) {\n  let columns = props.component.answers.filter(\n    (answer) => answer.type == \"column\"\n  );\n  let rows = props.component.answers.filter((answer) => answer.type == \"row\");\n\n  return (\n    <TableContainer>\n      <Table>\n        <TableBody>\n          {rows.map((answer) => {\n            return (\n              <React.Fragment key={answer.qualifiedCode}>\n                <SCQArrayRow\n                  key={answer.qualifiedCode}\n                  answer={answer}\n                  choices={columns}\n                />\n              </React.Fragment>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction SCQArrayRow(props) {\n  const theme = useTheme();\n\n  const isDirty =  useSelector((state) => state.templateState[props.answer.qualifiedCode]?.isDirty)\n  const show_errors =  useSelector((state) => state.runState.values.Survey.show_errors)\n  const state = useSelector((state) => state.runState.values[props.answer.qualifiedCode])\n  const validity = React.useMemo(()=>state?.validity,[state])\n  const value = React.useMemo(()=>state?.value,[state])\n  const relevance = React.useMemo(()=>state?.relevance,[state])\n\n  const dispatch = useDispatch();\n\n  const handleChange = (value) => {\n    dispatch(\n      valueChange({\n        componentCode: props.answer.qualifiedCode,\n        value: value,\n      })\n    );\n  };\n\n  const invalid =\n    (show_errors || isDirty) && validity === false;\n\n  return typeof relevance === \"undefined\" || relevance ? (\n    <React.Fragment>\n      <TableRow key={props.answer.code}>\n        <TableCell\n          sx={{\n            fontFamily: theme.textStyles.text.font,\n            color: theme.textStyles.text.color,\n            fontSize: theme.textStyles.text.size,\n            borderBottom: invalid ? \"0\" : \"\",\n            padding: \"8px\",\n          }}\n        >\n          {props.answer.content?.label}\n        </TableCell>\n        {props.choices.map((option) => {\n          return (\n            <TableCell\n              key={option.code}\n              component=\"th\"\n              scope=\"row\"\n              sx={{\n                borderBottom: invalid ? \"0\" : \"\",\n                padding: \"8px\",\n              }}\n            >\n              <DynamicSvg\n                onIconClick={() => handleChange(option.code)}\n                imageHeight={\"64px\"}\n                iconColor={value == option.code ? theme.palette.primary.main : theme.textStyles.text.color\n                }\n                svgUrl={\n                  option?.resources?.icon\n                    ? buildResourceUrl(option?.resources?.icon)\n                    : undefined\n                }\n              />\n            </TableCell>\n          );\n        })}\n      </TableRow>\n      {invalid ? (\n        <TableRow>\n          <TableCell\n            sx={{ padding: \"8px\" }}\n            colSpan={props.choices ? props.choices.length + 1 : 1}\n          >\n            <Validation component={props.answer} />\n          </TableCell>\n        </TableRow>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  ) : (\n    \"\"\n  );\n}\n\nexport default SCQIconArray;\n"],"names":["SCQIconArray","props","columns","component","answers","filter","answer","type","rows","jsx","TableContainer","children","Table","TableBody","map","React","Fragment","SCQArrayRow","choices","qualifiedCode","_props$answer$content","theme","useTheme","isDirty","useSelector","state","templateState","_state2$templateState","show_errors","runState","values","Survey","validity","useMemo","value","relevance","dispatch","useDispatch","handleChange","valueChange","componentCode","invalid","jsxs","TableRow","TableCell","sx","fontFamily","textStyles","text","font","color","fontSize","size","borderBottom","padding","content","label","option","_option$resources","_option$resources2","scope","DynamicSvg","onIconClick","code","imageHeight","iconColor","palette","primary","main","svgUrl","resources","icon","buildResourceUrl","colSpan","length","Validation"],"mappings":"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"}