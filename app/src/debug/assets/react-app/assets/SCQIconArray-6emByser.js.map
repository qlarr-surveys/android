{"version":3,"file":"SCQIconArray-6emByser.js","sources":["../../src/components/Questions/SCQArray/SCQIconArray.jsx"],"sourcesContent":["import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { useTheme } from \"@emotion/react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { valueChange } from \"~/state/runState\";\nimport Validation from \"~/components/run/Validation\";\nimport DynamicSvg from \"~/components/DynamicSvg\";\nimport { buildResourceUrl } from \"~/networking/common\";\nimport { TableHead } from \"@mui/material\";\nimport { columnMinWidth } from '~/utils/design/utils';\n\nfunction SCQIconArray(props) {\n  const theme = useTheme();\n  const width = columnMinWidth()\n\n  let columns = props.component.answers.filter(\n    (answer) => answer.type == \"column\"\n  );\n  let rows = props.component.answers.filter((answer) => answer.type == \"row\");\n\n  return (\n    <TableContainer\n      sx={{\n        overflowX: \"auto\",\n        maxWidth: \"100%\",\n      }}\n    >\n      <Table\n        sx={{ tableLayout: \"fixed\", minWidth: `${columns.length * width}px` }}\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell\n              key=\"content\"\n              sx={{\n                width: width,\n                padding: \"0px\",\n              }}\n            ></TableCell>\n            {columns.map((option) => {\n              return (\n                <TableCell\n                  sx={{\n                    fontFamily: theme.textStyles.text.font,\n                    color: theme.textStyles.text.color,\n                    fontSize: theme.textStyles.text.size,\n                    textAlign: \"center\",\n                    width: width,\n                  }}\n                  key={option.qualifiedCode}\n                >\n                  {option.content?.label}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((answer) => {\n            return (\n              <React.Fragment key={answer.qualifiedCode}>\n                <SCQArrayRow\n                  key={answer.qualifiedCode}\n                  answer={answer}\n                  choices={columns}\n                  width={width}\n                />\n              </React.Fragment>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction SCQArrayRow(props) {\n  const theme = useTheme();\n\n  const isDirty = useSelector(\n    (state) => state.templateState[props.answer.qualifiedCode]?.isDirty\n  );\n  const show_errors = useSelector(\n    (state) => state.runState.values.Survey.show_errors\n  );\n  const state = useSelector(\n    (state) => state.runState.values[props.answer.qualifiedCode]\n  );\n  const validity = React.useMemo(() => state?.validity, [state]);\n  const value = React.useMemo(() => state?.value, [state]);\n  const relevance = React.useMemo(() => state?.relevance, [state]);\n\n  const dispatch = useDispatch();\n\n  const handleChange = (value) => {\n    dispatch(\n      valueChange({\n        componentCode: props.answer.qualifiedCode,\n        value: value,\n      })\n    );\n  };\n\n  const invalid = (show_errors || isDirty) && validity === false;\n\n  return typeof relevance === \"undefined\" || relevance ? (\n    <React.Fragment>\n      <TableRow key={props.answer.code}>\n        <TableCell\n          sx={{\n            fontFamily: theme.textStyles.text.font,\n            color: theme.textStyles.text.color,\n            fontSize: theme.textStyles.text.size,\n            borderBottom: invalid ? \"0\" : \"\",\n            padding: \"2px\",\n          }}\n        >\n          {props.answer.content?.label}\n        </TableCell>\n        {props.choices.map((option) => {\n          return (\n            <TableCell\n              key={option.code}\n              component=\"th\"\n              scope=\"row\"\n              sx={{\n                borderBottom: invalid ? \"0\" : \"\",\n                padding: \"2px\",\n                width: props.width,\n              }}\n            >\n              <DynamicSvg\n                onIconClick={() => handleChange(option.code)}\n                imageHeight={\"64px\"}\n                isSelected={value == option.code}\n                theme={theme}\n                svgUrl={\n                  option?.resources?.icon\n                    ? buildResourceUrl(option?.resources?.icon)\n                    : undefined\n                }\n              />\n            </TableCell>\n          );\n        })}\n      </TableRow>\n      {invalid ? (\n        <TableRow>\n          <TableCell\n            sx={{ padding: \"2px\" }}\n            colSpan={props.choices ? props.choices.length + 1 : 1}\n          >\n            <Validation component={props.answer} />\n          </TableCell>\n        </TableRow>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  ) : (\n    \"\"\n  );\n}\n\nexport default SCQIconArray;\n"],"names":["jsx","jsxs","state","value","_a"],"mappings":"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"}